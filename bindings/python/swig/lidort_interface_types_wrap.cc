/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_DIRECTORS
#define SWIG_PYTHON_NO_BUILD_NONE
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler {
#ifdef SWIG_DIRECTOR_UEH
    static void handler() {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.what() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }

      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;

      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will likely abort/terminate." << std::endl;
      throw;
    }

  public:

    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler) {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler() {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling swig_types[0]
#define SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs swig_types[1]
#define SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs swig_types[2]
#define SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling swig_types[3]
#define SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs swig_types[4]
#define SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs swig_types[5]
#define SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling swig_types[6]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean swig_types[7]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman swig_types[8]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control swig_types[9]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs swig_types[10]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol swig_types[11]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs swig_types[12]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical swig_types[13]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical swig_types[14]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays swig_types[15]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues swig_types[16]
#define SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write swig_types[17]
#define SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling swig_types[18]
#define SWIGTYPE_p_FullPhysics__Lidort_Linatmos swig_types[19]
#define SWIGTYPE_p_FullPhysics__Lidort_Linoutputs swig_types[20]
#define SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf swig_types[21]
#define SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout swig_types[22]
#define SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave swig_types[23]
#define SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss swig_types[24]
#define SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos swig_types[25]
#define SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf swig_types[26]
#define SWIGTYPE_p_FullPhysics__Lidort_Linsurf swig_types[27]
#define SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs swig_types[28]
#define SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean swig_types[29]
#define SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman swig_types[30]
#define SWIGTYPE_p_FullPhysics__Lidort_Modified_Control swig_types[31]
#define SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs swig_types[32]
#define SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol swig_types[33]
#define SWIGTYPE_p_FullPhysics__Lidort_Modified_Lininputs swig_types[34]
#define SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical swig_types[35]
#define SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays swig_types[36]
#define SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues swig_types[37]
#define SWIGTYPE_p_FullPhysics__Lidort_Outputs swig_types[38]
#define SWIGTYPE_p_FullPhysics__Lidort_Pars swig_types[39]
#define SWIGTYPE_p_FullPhysics__Lidort_Structure swig_types[40]
#define SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf swig_types[41]
#define SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout swig_types[42]
#define SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave swig_types[43]
#define SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss swig_types[44]
#define SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs swig_types[45]
#define SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs swig_types[46]
#define SWIGTYPE_p_allocator_type swig_types[47]
#define SWIGTYPE_p_blitz__ArrayT_bool_1_t swig_types[48]
#define SWIGTYPE_p_blitz__ArrayT_bool_2_t swig_types[49]
#define SWIGTYPE_p_blitz__ArrayT_bool_3_t swig_types[50]
#define SWIGTYPE_p_blitz__ArrayT_bool_4_t swig_types[51]
#define SWIGTYPE_p_blitz__ArrayT_double_1_t swig_types[52]
#define SWIGTYPE_p_blitz__ArrayT_double_2_t swig_types[53]
#define SWIGTYPE_p_blitz__ArrayT_double_3_t swig_types[54]
#define SWIGTYPE_p_blitz__ArrayT_double_4_t swig_types[55]
#define SWIGTYPE_p_blitz__ArrayT_double_5_t swig_types[56]
#define SWIGTYPE_p_blitz__ArrayT_int_1_t swig_types[57]
#define SWIGTYPE_p_blitz__ArrayT_int_2_t swig_types[58]
#define SWIGTYPE_p_blitz__ArrayT_int_3_t swig_types[59]
#define SWIGTYPE_p_blitz__ArrayT_int_4_t swig_types[60]
#define SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t swig_types[61]
#define SWIGTYPE_p_char swig_types[62]
#define SWIGTYPE_p_char_type swig_types[63]
#define SWIGTYPE_p_difference_type swig_types[64]
#define SWIGTYPE_p_fmtflags swig_types[65]
#define SWIGTYPE_p_int_type swig_types[66]
#define SWIGTYPE_p_iostate swig_types[67]
#define SWIGTYPE_p_off_type swig_types[68]
#define SWIGTYPE_p_openmode swig_types[69]
#define SWIGTYPE_p_pos_type swig_types[70]
#define SWIGTYPE_p_seekdir swig_types[71]
#define SWIGTYPE_p_size_t swig_types[72]
#define SWIGTYPE_p_size_type swig_types[73]
#define SWIGTYPE_p_state_type swig_types[74]
#define SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[75]
#define SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[76]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[77]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[78]
#define SWIGTYPE_p_traits_type swig_types[79]
#define SWIGTYPE_p_value_type swig_types[80]
#define SWIGTYPE_p_void swig_types[81]
static swig_type_info *swig_types[83];
static swig_module_info swig_module = {swig_types, 82, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif
#ifndef METH_O
# error "This python version requires swig to be run with the '-nofastunpack' option"
#endif
#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _lidort_interface_types.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__lidort_interface_types

#else
#  define SWIG_init    init_lidort_interface_types

#endif
#define SWIG_name    "_lidort_interface_types"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <boost/shared_ptr.hpp>
#include <boost/rational.hpp>

//--------------------------------------------------------------
// Helper class for python that holds an object and when deleted
// decrements the reference to it.
//--------------------------------------------------------------

class PythonObject {
public:
  PythonObject(PyObject* Obj = 0) : obj(Obj) {}
  ~PythonObject() { Py_XDECREF(obj); }
  PyObject* obj;
  operator PyObject*() {return obj;}
};


// If the object passed in actually a python director, we don't own
// it. Instead, when the reference count goes to 0 we just decrement
// our reference to it.
//
// The original RefPtr had null deleter if this is a director object,
// so we don't actually delete the pointer p
  class PythonRefPtrCleanup {
  public:
    PythonRefPtrCleanup(PyObject* Obj) : obj(Obj) {}
    void operator()(void* p) { Py_DECREF(obj);}
  private:
    PyObject* obj;
  };


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


#include "swig_type_mapper.h"


  // This is defined in swig_wrap.tmpl, so it gets put into swig_wrap.cc
  std::string parse_python_exception();


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


// Don't want to use threads with ruby
#undef _REENTRANT
#include <blitz/array.h>
#include <blitz/range.h>
#define PY_ARRAY_UNIQUE_SYMBOL full_physics_ARRAY_API
#ifndef DO_IMPORT_ARRAY
#define NO_IMPORT_ARRAY
#endif
// See https://github.com/numpy/numpy/issues/3008 for explanation of
// this.
// We'll have to update this as the numpy API increases
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>
#include "linear_algebra.h"
#include "fp_exception.h"

PyObject* numpy_module();
PyObject* numpy_dot_float64();
PyObject* numpy_dot_int32();
PyObject* numpy_dot_bool();

//--------------------------------------------------------------
// Helper routines to map a template type to the code numpy uses
// for that type.
//--------------------------------------------------------------

template<class T> int type_to_npy();
template<> inline int type_to_npy<double>() {return NPY_DOUBLE;}
template<> inline int type_to_npy<int>() {return NPY_INT;}
template<> inline int type_to_npy<bool>() {return NPY_BOOL;}

//--------------------------------------------------------------
// Use the numpy command "asarray" to convert various python 
// objects to a numpy object. This may return null, if the 
// "asarray" fails. 
//--------------------------------------------------------------

template<class T> PyObject* to_numpy(PyObject* obj);

template<> inline PyObject* to_numpy<double>(PyObject* obj)
{
  PyObject* res = PyObject_CallMethodObjArgs(numpy_module(), 
					     PyString_FromString("asarray"), 
					     obj, numpy_dot_float64(), NULL);
  // Don't worry about errors , since we just return a null
  PyErr_Clear();
  return res;
}

template<> inline PyObject* to_numpy<bool>(PyObject* obj)
{
  PyObject* res = PyObject_CallMethodObjArgs(numpy_module(), 
				    PyString_FromString("asarray"), 
				    obj, numpy_dot_bool(), NULL);
  PyErr_Clear();
  return res;
}

template<> inline PyObject* to_numpy<int>(PyObject* obj)
{
  PyObject* res = PyObject_CallMethodObjArgs(numpy_module(), 
				    PyString_FromString("asarray"), 
				    obj, numpy_dot_int32(), NULL);
  PyErr_Clear();
  return res;
}

//--------------------------------------------------------------
// Convert a numpy array to a blitz::Array. The numpy should 
// already be the right data type before calling these (you can
// call to_numpy, if that is convenient). The underlying data is 
// still owned by the numpy object, so you need to make sure that
// the numpy object doesn't get deleted until you are done with
// the blitz::Array.
//
// If this fails, we throw an exception.
//--------------------------------------------------------------

template<class T, int D> inline blitz::Array<T, D> 
  to_blitz_array(PyObject* numpy_obj)
{
  PyArrayObject* numpy = (PyArrayObject*) numpy_obj;
  if(PyArray_NDIM(numpy) != D) {
    std::cerr << PyArray_NDIM(numpy) << "\n"
	      << D << "\n";
    throw 
      FullPhysics::Exception("Dimension of array is not the expected size");
  }
  if(PyArray_TYPE(numpy) != type_to_npy<T>()) {
    throw 
      FullPhysics::Exception("Type of array not the expected type");
  }
  blitz::TinyVector<int, D> shape, stride;
  for(int i = 0; i < D; ++i) {
    shape(i) = PyArray_DIM(numpy, i);
    // Note numpy stride is in terms of bytes, while blitz in in terms
    // of type T.
    stride(i) = PyArray_STRIDE(numpy, i) / sizeof(T);
    if((int) (stride(i) * sizeof(T)) != (int) PyArray_STRIDE(numpy, i)) {
      throw 
	FullPhysics::Exception("blitz::Array can't handle strides that aren't an even multiple of sizeof(T)");
    }
  }
  return blitz::Array<T, D>((T*)PyArray_DATA(numpy), shape, stride, 
			    blitz::neverDeleteData);
}



#include "lidort_interface_types.h"


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERN size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


  #define SWIG_From_double   PyFloat_FromDouble 


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#define SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "lidort_interface_types_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_version_number_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_version_number_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (char *)(char *) ((arg1)->lidort_version_number);
  {
    size_t size = SWIG_strnlen(result, 5);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_inunit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_inunit_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_inunit);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_scenunit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_scenunit_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_scenunit);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_funit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_funit_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_funit);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_resunit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_resunit_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_resunit);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_errunit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_errunit_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_errunit);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_dbgunit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_dbgunit_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_dbgunit);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_messages_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_messages_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_messages);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxstreams_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxstreams_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxstreams);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxlayers_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxlayers_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxlayers);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxfinelayers_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxfinelayers_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxfinelayers);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxmoments_input_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxmoments_input_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxmoments_input);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_thermal_coeffs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_thermal_coeffs_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_thermal_coeffs);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxbeams_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxbeams_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxbeams);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_user_streams_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_user_streams_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_user_streams);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_user_relazms_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_user_relazms_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_user_relazms);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_user_obsgeoms_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_user_obsgeoms_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_user_obsgeoms);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_user_levels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_user_levels_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_user_levels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_partlayers_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_partlayers_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_partlayers);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_taylor_terms_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_taylor_terms_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_taylor_terms);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_directions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_directions_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_directions);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_brdf_kernels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_brdf_kernels_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_brdf_kernels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_brdf_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_brdf_parameters_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_brdf_parameters);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxstreams_brdf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxstreams_brdf_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxstreams_brdf);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_msrs_muquad_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_msrs_muquad_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_msrs_muquad);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_msrs_phiquad_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_msrs_phiquad_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_msrs_phiquad);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxstreams_scaling_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxstreams_scaling_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxstreams_scaling);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_atmoswfs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_atmoswfs_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_atmoswfs);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_surfacewfs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_surfacewfs_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_surfacewfs);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_sleavewfs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_sleavewfs_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_sleavewfs);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_geometries_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_geometries_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_geometries);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_allstrms_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_allstrms_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_allstrms);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_allstrms_p1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_allstrms_p1_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->max_allstrms_p1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxmoments_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxmoments_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxmoments);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxfourier_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxfourier_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxfourier);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxsthalf_brdf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxsthalf_brdf_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxsthalf_brdf);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxstreams_2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxstreams_2_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxstreams_2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxstreams_p1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxstreams_p1_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxstreams_p1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxtotal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxtotal_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxtotal);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxbandtotal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxbandtotal_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxbandtotal);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_one_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_one_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->one);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_zero_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_zero_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->zero);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_onep5_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_onep5_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->onep5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_two_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_two_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->two);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_three_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_three_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->three);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_four_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_four_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->four);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_quarter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_quarter_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->quarter);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_half_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_half_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->half);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_minus_one_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_minus_one_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->minus_one);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_minus_two_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_minus_two_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->minus_two);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_pie_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_pie_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->pie);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_deg_to_rad_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_deg_to_rad_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->deg_to_rad);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_pi2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_pi2_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->pi2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_pi4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_pi4_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->pi4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_pio2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_pio2_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->pio2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_pio4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_pio4_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->pio4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_eps3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_eps3_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->eps3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_eps4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_eps4_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->eps4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_eps5_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_eps5_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->eps5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_taylor_small_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_taylor_small_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->taylor_small);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_smallnum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_smallnum_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->smallnum);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_bigexp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_bigexp_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->bigexp);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_hopital_tolerance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_hopital_tolerance_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->hopital_tolerance);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_omega_smallnum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_omega_smallnum_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->omega_smallnum);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_tau_spath_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_tau_spath_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->max_tau_spath);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_tau_upath_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_tau_upath_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->max_tau_upath);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_max_tau_qpath_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_max_tau_qpath_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(double) ((arg1)->max_tau_qpath);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_serious_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_serious_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_serious);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_warning_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_warning_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_warning);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_info_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_info_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_info);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_debug_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_debug_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_debug);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidort_success_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidort_success_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidort_success);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_upidx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_upidx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->upidx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_dnidx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_dnidx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->dnidx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lambertian_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lambertian_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lambertian_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_rossthin_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_rossthin_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->rossthin_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_rossthick_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_rossthick_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->rossthick_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lisparse_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lisparse_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lisparse_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_lidense_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_lidense_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->lidense_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_hapke_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_hapke_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->hapke_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_roujean_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_roujean_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->roujean_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_rahman_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_rahman_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->rahman_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_coxmunk_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_coxmunk_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->coxmunk_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_bpdfsoil_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_bpdfsoil_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->bpdfsoil_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_bpdfvegn_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_bpdfvegn_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->bpdfvegn_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_bpdfndvi_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_bpdfndvi_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->bpdfndvi_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_newcmglint_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_newcmglint_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->newcmglint_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_rtkhotspot_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_rtkhotspot_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->rtkhotspot_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_modfresnel_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_modfresnel_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->modfresnel_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_snowbrdf_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_snowbrdf_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->snowbrdf_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_maxbrdf_idx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Pars_maxbrdf_idx_get" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(int) ((arg1)->maxbrdf_idx);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Pars_instance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Pars_instance",0,0,0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Pars *) &FullPhysics::Lidort_Pars::instance();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  FullPhysics::Lidort_Pars > *smartresult = new boost::shared_ptr<  FullPhysics::Lidort_Pars >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Pars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Pars *arg1 = (FullPhysics::Lidort_Pars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > tempshared1 ;
  boost::shared_ptr< FullPhysics::Lidort_Pars > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Pars" "', argument " "1"" of type '" "FullPhysics::Lidort_Pars *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  FullPhysics::Lidort_Pars > * >(argp1);
      arg1 = const_cast< FullPhysics::Lidort_Pars * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Pars_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Lidort_Structure_fortran_type_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Structure *arg1 = (FullPhysics::Lidort_Structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Structure_fortran_type_ptr" "', argument " "1"" of type '" "FullPhysics::Lidort_Structure *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Structure * >(argp1);
  {
    try {
      result = (void *)(arg1)->fortran_type_ptr();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Structure___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Structure *arg1 = (FullPhysics::Lidort_Structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Structure___str__" "', argument " "1"" of type '" "FullPhysics::Lidort_Structure const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Structure * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Structure const *)arg1)->print_to_string();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Structure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Structure *arg1 = (FullPhysics::Lidort_Structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Structure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Structure" "', argument " "1"" of type '" "FullPhysics::Lidort_Structure *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Structure * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Structure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Structure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Brdf_Linsup_Inputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Brdf_Linsup_Inputs *)new FullPhysics::Brdf_Linsup_Inputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Linsup_Inputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Brdf_Linsup_Inputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Brdf_Linsup_Inputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Brdf_Linsup_Inputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Brdf_Linsup_Inputs *)new FullPhysics::Brdf_Linsup_Inputs((FullPhysics::Brdf_Linsup_Inputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Linsup_Inputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Brdf_Linsup_Inputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Brdf_Linsup_Inputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Brdf_Linsup_Inputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Brdf_Linsup_Inputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Inputs::Brdf_Linsup_Inputs()\n"
    "    FullPhysics::Brdf_Linsup_Inputs::Brdf_Linsup_Inputs(FullPhysics::Brdf_Linsup_Inputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Brdf_Linsup_Inputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Brdf_Linsup_Inputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< blitz::Array< bool,1 > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      result = ((FullPhysics::Brdf_Linsup_Inputs const *)arg1)->bs_do_kernel_factor_wfs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = (&result)->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = (&result)->stride(i) * sizeof(bool);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<bool>(), 
      stride, (&result)->data(), 0, 0, 0);
    blitz::Array<bool, 1>* t = new blitz::Array<bool, 1>(result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_bool_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  blitz::Array< bool,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< bool,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_bool_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<bool>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<bool, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_do_kernel_factor_wfs((blitz::Array< bool,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_kernel_factor_wfs() const\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_kernel_factor_wfs(blitz::Array< bool,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_kernel_params_wfs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< blitz::Array< bool,2 > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_kernel_params_wfs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      result = ((FullPhysics::Brdf_Linsup_Inputs const *)arg1)->bs_do_kernel_params_wfs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = (&result)->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = (&result)->stride(i) * sizeof(bool);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<bool>(), 
      stride, (&result)->data(), 0, 0, 0);
    blitz::Array<bool, 2>* t = new blitz::Array<bool, 2>(result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_bool_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_kernel_params_wfs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  blitz::Array< bool,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< bool,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_kernel_params_wfs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_bool_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<bool>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<bool, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_do_kernel_params_wfs((blitz::Array< bool,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_kernel_params_wfs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Inputs_bs_do_kernel_params_wfs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_kernel_params_wfs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_kernel_params_wfs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Inputs_bs_do_kernel_params_wfs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_kernel_params_wfs() const\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_kernel_params_wfs(blitz::Array< bool,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_kparams_derivs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< blitz::Array< bool,1 > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_kparams_derivs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      result = ((FullPhysics::Brdf_Linsup_Inputs const *)arg1)->bs_do_kparams_derivs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = (&result)->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = (&result)->stride(i) * sizeof(bool);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<bool>(), 
      stride, (&result)->data(), 0, 0, 0);
    blitz::Array<bool, 1>* t = new blitz::Array<bool, 1>(result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_bool_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_kparams_derivs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  blitz::Array< bool,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< bool,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_kparams_derivs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_bool_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<bool>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<bool, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_do_kparams_derivs((blitz::Array< bool,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_kparams_derivs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Inputs_bs_do_kparams_derivs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_kparams_derivs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_kparams_derivs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Inputs_bs_do_kparams_derivs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_kparams_derivs() const\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_kparams_derivs(blitz::Array< bool,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_n_surface_wfs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_n_surface_wfs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Linsup_Inputs const *)arg1)->bs_n_surface_wfs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_n_surface_wfs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_n_surface_wfs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Linsup_Inputs_bs_n_surface_wfs" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_n_surface_wfs((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_n_surface_wfs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Inputs_bs_n_surface_wfs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Inputs_bs_n_surface_wfs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Inputs_bs_n_surface_wfs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Inputs_bs_n_surface_wfs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_n_surface_wfs() const\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_n_surface_wfs(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Linsup_Inputs const *)arg1)->bs_n_kernel_factor_wfs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_n_kernel_factor_wfs((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_n_kernel_factor_wfs() const\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_n_kernel_factor_wfs(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_n_kernel_params_wfs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_n_kernel_params_wfs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Linsup_Inputs const *)arg1)->bs_n_kernel_params_wfs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_n_kernel_params_wfs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_n_kernel_params_wfs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Linsup_Inputs_bs_n_kernel_params_wfs" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_n_kernel_params_wfs((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_n_kernel_params_wfs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Inputs_bs_n_kernel_params_wfs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Inputs_bs_n_kernel_params_wfs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Inputs_bs_n_kernel_params_wfs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Inputs_bs_n_kernel_params_wfs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_n_kernel_params_wfs() const\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_n_kernel_params_wfs(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_bsavalue_wf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_bsavalue_wf" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Linsup_Inputs const *)arg1)->bs_do_bsavalue_wf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_bsavalue_wf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_bsavalue_wf" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Linsup_Inputs_bs_do_bsavalue_wf" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_bsavalue_wf((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_bsavalue_wf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Inputs_bs_do_bsavalue_wf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_bsavalue_wf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_bsavalue_wf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Inputs_bs_do_bsavalue_wf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_bsavalue_wf() const\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_bsavalue_wf(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_wsavalue_wf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_wsavalue_wf" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Linsup_Inputs const *)arg1)->bs_do_wsavalue_wf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_wsavalue_wf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_wsavalue_wf" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Linsup_Inputs_bs_do_wsavalue_wf" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_wsavalue_wf((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_wsavalue_wf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Inputs_bs_do_wsavalue_wf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_wsavalue_wf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_wsavalue_wf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Inputs_bs_do_wsavalue_wf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_wsavalue_wf() const\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_wsavalue_wf(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_windspeed_wf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_windspeed_wf" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Linsup_Inputs const *)arg1)->bs_do_windspeed_wf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_windspeed_wf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_bs_do_windspeed_wf" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Linsup_Inputs_bs_do_windspeed_wf" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_windspeed_wf((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_bs_do_windspeed_wf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Inputs_bs_do_windspeed_wf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_windspeed_wf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Inputs_bs_do_windspeed_wf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Inputs_bs_do_windspeed_wf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_windspeed_wf() const\n"
    "    FullPhysics::Brdf_Linsup_Inputs::bs_do_windspeed_wf(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Inputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Inputs *arg1 = (FullPhysics::Brdf_Linsup_Inputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Inputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Inputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Brdf_Linsup_Inputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Brdf_Linsup_Inputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Brdf_Linsup_Inputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Brdf_Linsup_Inputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Brdf_Linsup_Inputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Brdf_Linsup_Inputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Brdf_Linsup_Outputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Brdf_Linsup_Outputs *)new FullPhysics::Brdf_Linsup_Outputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Linsup_Outputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Brdf_Linsup_Outputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Brdf_Linsup_Outputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Brdf_Linsup_Outputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    try {
      result = (FullPhysics::Brdf_Linsup_Outputs *)new FullPhysics::Brdf_Linsup_Outputs((FullPhysics::Brdf_Linsup_Outputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Linsup_Outputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Brdf_Linsup_Outputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Brdf_Linsup_Outputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Brdf_Linsup_Outputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Brdf_Linsup_Outputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Outputs::Brdf_Linsup_Outputs()\n"
    "    FullPhysics::Brdf_Linsup_Outputs::Brdf_Linsup_Outputs(FullPhysics::Brdf_Linsup_Outputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Brdf_Linsup_Outputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Brdf_Linsup_Outputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Brdf_Linsup_Outputs const *)arg1)->bs_ls_dbounce_brdfunc();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_ls_dbounce_brdfunc((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_dbounce_brdfunc() const\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_dbounce_brdfunc(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Brdf_Linsup_Outputs const *)arg1)->bs_ls_brdf_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_ls_brdf_f_0((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Outputs_bs_ls_brdf_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Outputs_bs_ls_brdf_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_brdf_f_0() const\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_brdf_f_0(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_brdf_f" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Brdf_Linsup_Outputs const *)arg1)->bs_ls_brdf_f();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_brdf_f" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_ls_brdf_f((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Outputs_bs_ls_brdf_f",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Outputs_bs_ls_brdf_f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_brdf_f() const\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_brdf_f(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Brdf_Linsup_Outputs const *)arg1)->bs_ls_user_brdf_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_ls_user_brdf_f_0((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_user_brdf_f_0() const\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_user_brdf_f_0(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_user_brdf_f" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Brdf_Linsup_Outputs const *)arg1)->bs_ls_user_brdf_f();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_user_brdf_f" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_ls_user_brdf_f((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Outputs_bs_ls_user_brdf_f",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Outputs_bs_ls_user_brdf_f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_user_brdf_f() const\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_user_brdf_f(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_emissivity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_emissivity" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Brdf_Linsup_Outputs const *)arg1)->bs_ls_emissivity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_emissivity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_emissivity" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_ls_emissivity((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_emissivity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Outputs_bs_ls_emissivity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_emissivity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_emissivity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Outputs_bs_ls_emissivity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_emissivity() const\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_emissivity(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_user_emissivity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_user_emissivity" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Brdf_Linsup_Outputs const *)arg1)->bs_ls_user_emissivity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_user_emissivity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_bs_ls_user_emissivity" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_ls_user_emissivity((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_bs_ls_user_emissivity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Outputs_bs_ls_user_emissivity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_user_emissivity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Linsup_Outputs_bs_ls_user_emissivity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Linsup_Outputs_bs_ls_user_emissivity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_user_emissivity() const\n"
    "    FullPhysics::Brdf_Linsup_Outputs::bs_ls_user_emissivity(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Linsup_Outputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Linsup_Outputs *arg1 = (FullPhysics::Brdf_Linsup_Outputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Brdf_Linsup_Outputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Linsup_Outputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Brdf_Linsup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Linsup_Outputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Brdf_Linsup_Outputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Brdf_Linsup_Outputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Brdf_Linsup_Outputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Brdf_Linsup_Outputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Brdf_Linsup_Outputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Brdf_Linsup_Outputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Brdf_Sup_Inputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Brdf_Sup_Inputs *)new FullPhysics::Brdf_Sup_Inputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Sup_Inputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Brdf_Sup_Inputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Brdf_Sup_Inputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Brdf_Sup_Inputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Brdf_Sup_Inputs *)new FullPhysics::Brdf_Sup_Inputs((FullPhysics::Brdf_Sup_Inputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Sup_Inputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Brdf_Sup_Inputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Brdf_Sup_Inputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Brdf_Sup_Inputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Brdf_Sup_Inputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::Brdf_Sup_Inputs()\n"
    "    FullPhysics::Brdf_Sup_Inputs::Brdf_Sup_Inputs(FullPhysics::Brdf_Sup_Inputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Brdf_Sup_Inputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Brdf_Sup_Inputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_brdf_surface__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_brdf_surface" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_brdf_surface();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_brdf_surface__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_brdf_surface" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_brdf_surface" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_brdf_surface((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_brdf_surface(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_brdf_surface",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_brdf_surface__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_brdf_surface__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_brdf_surface'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_brdf_surface() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_brdf_surface(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_surface_emission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_surface_emission" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_surface_emission();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_surface_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_surface_emission" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_surface_emission" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_surface_emission((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_surface_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_surface_emission",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_surface_emission__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_surface_emission__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_surface_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_surface_emission() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_surface_emission(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_solar_sources__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_solar_sources" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_solar_sources();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_solar_sources__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_solar_sources" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_solar_sources" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_solar_sources((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_solar_sources(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_solar_sources",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_solar_sources__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_solar_sources__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_solar_sources'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_solar_sources() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_solar_sources(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_user_streams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_user_streams" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_user_streams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_user_streams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_user_streams" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_user_streams" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_user_streams((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_user_streams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_user_streams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_user_streams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_user_streams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_user_streams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_user_streams() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_user_streams(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_user_obsgeoms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_user_obsgeoms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_user_obsgeoms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_user_obsgeoms" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_user_obsgeoms((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_user_obsgeoms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_user_obsgeoms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_user_obsgeoms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_user_obsgeoms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_user_obsgeoms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_user_obsgeoms() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_user_obsgeoms(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_doublet_geometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_doublet_geometry" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_doublet_geometry();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_doublet_geometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_doublet_geometry" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_doublet_geometry" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_doublet_geometry((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_doublet_geometry(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_doublet_geometry",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_doublet_geometry__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_doublet_geometry__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_doublet_geometry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_doublet_geometry() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_doublet_geometry(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_nstreams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_nstreams" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_nstreams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_nstreams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_nstreams" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_nstreams" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_nstreams((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_nstreams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_nstreams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_nstreams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_nstreams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_nstreams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_nstreams() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_nstreams(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_nbeams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_nbeams" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_nbeams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_nbeams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_nbeams" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_nbeams" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_nbeams((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_nbeams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_nbeams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_nbeams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_nbeams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_nbeams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_nbeams() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_nbeams(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_beam_szas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_beam_szas" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_beam_szas();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_beam_szas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_beam_szas" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_beam_szas((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_beam_szas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_beam_szas",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_beam_szas__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_beam_szas__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_beam_szas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_beam_szas() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_beam_szas(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_relazms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_user_relazms" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_n_user_relazms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_relazms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_user_relazms" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_n_user_relazms" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_n_user_relazms((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_relazms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_n_user_relazms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_n_user_relazms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_n_user_relazms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_n_user_relazms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_user_relazms() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_user_relazms(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_relazms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_user_relazms" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_user_relazms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_relazms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_user_relazms" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_user_relazms((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_relazms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_user_relazms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_user_relazms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_user_relazms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_user_relazms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_user_relazms() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_user_relazms(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_streams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_user_streams" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_n_user_streams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_streams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_user_streams" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_n_user_streams" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_n_user_streams((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_streams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_n_user_streams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_n_user_streams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_n_user_streams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_n_user_streams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_user_streams() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_user_streams(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_angles_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_user_angles_input" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_user_angles_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_angles_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_user_angles_input" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_user_angles_input((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_angles_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_user_angles_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_user_angles_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_user_angles_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_user_angles_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_user_angles_input() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_user_angles_input(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_obsgeoms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_n_user_obsgeoms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_obsgeoms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_n_user_obsgeoms" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_n_user_obsgeoms((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_obsgeoms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_n_user_obsgeoms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_n_user_obsgeoms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_n_user_obsgeoms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_n_user_obsgeoms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_user_obsgeoms() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_user_obsgeoms(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_obsgeoms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_user_obsgeoms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_obsgeoms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_user_obsgeoms((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_obsgeoms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_user_obsgeoms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_user_obsgeoms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_user_obsgeoms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_user_obsgeoms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_user_obsgeoms() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_user_obsgeoms(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_doublets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_user_doublets" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_n_user_doublets();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_doublets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_user_doublets" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_n_user_doublets" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_n_user_doublets((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_user_doublets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_n_user_doublets",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_n_user_doublets__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_n_user_doublets__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_n_user_doublets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_user_doublets() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_user_doublets(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_doublets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_user_doublets" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_user_doublets();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_doublets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_user_doublets" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_user_doublets((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_user_doublets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_user_doublets",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_user_doublets__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_user_doublets__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_user_doublets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_user_doublets() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_user_doublets(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_brdf_kernels__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_brdf_kernels" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_n_brdf_kernels();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_brdf_kernels__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_brdf_kernels" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_n_brdf_kernels" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_n_brdf_kernels((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_brdf_kernels(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_n_brdf_kernels",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_n_brdf_kernels__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_n_brdf_kernels__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_n_brdf_kernels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_brdf_kernels() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_brdf_kernels(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_brdf_names(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_brdf_names" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = ((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_brdf_names();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_which_brdf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_which_brdf" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< int,1 > *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_which_brdf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(int);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<int>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<int, 1>* t = new blitz::Array<int, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_int_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_which_brdf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< int,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_which_brdf" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_int_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<int>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<int, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_which_brdf((blitz::Array< int,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_which_brdf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_which_brdf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_which_brdf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_which_brdf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_which_brdf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_which_brdf() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_which_brdf(blitz::Array< int,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_brdf_parameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_brdf_parameters" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< int,1 > *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_n_brdf_parameters();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(int);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<int>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<int, 1>* t = new blitz::Array<int, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_int_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_brdf_parameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< int,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_n_brdf_parameters" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_int_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<int>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<int, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_n_brdf_parameters((blitz::Array< int,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_n_brdf_parameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_n_brdf_parameters",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_n_brdf_parameters__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_n_brdf_parameters__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_n_brdf_parameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_brdf_parameters() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_n_brdf_parameters(blitz::Array< int,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_brdf_parameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_brdf_parameters" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_brdf_parameters();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_brdf_parameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_brdf_parameters" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_brdf_parameters((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_brdf_parameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_brdf_parameters",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_brdf_parameters__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_brdf_parameters__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_brdf_parameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_brdf_parameters() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_brdf_parameters(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_lambertian_kernel_flag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< blitz::Array< bool,1 > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_lambertian_kernel_flag" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = ((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_lambertian_kernel_flag();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = (&result)->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = (&result)->stride(i) * sizeof(bool);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<bool>(), 
      stride, (&result)->data(), 0, 0, 0);
    blitz::Array<bool, 1>* t = new blitz::Array<bool, 1>(result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_bool_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_lambertian_kernel_flag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< bool,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< bool,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_lambertian_kernel_flag" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_bool_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<bool>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<bool, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_lambertian_kernel_flag((blitz::Array< bool,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_lambertian_kernel_flag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_lambertian_kernel_flag",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_lambertian_kernel_flag__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_lambertian_kernel_flag__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_lambertian_kernel_flag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_lambertian_kernel_flag() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_lambertian_kernel_flag(blitz::Array< bool,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_brdf_factors__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_brdf_factors" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_brdf_factors();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_brdf_factors__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_brdf_factors" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_brdf_factors((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_brdf_factors(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_brdf_factors",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_brdf_factors__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_brdf_factors__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_brdf_factors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_brdf_factors() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_brdf_factors(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_nstreams_brdf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_nstreams_brdf" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_nstreams_brdf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_nstreams_brdf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_nstreams_brdf" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_nstreams_brdf" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_nstreams_brdf((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_nstreams_brdf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_nstreams_brdf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_nstreams_brdf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_nstreams_brdf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_nstreams_brdf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_nstreams_brdf() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_nstreams_brdf(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_shadow_effect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_shadow_effect" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_shadow_effect();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_shadow_effect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_shadow_effect" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_shadow_effect" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_shadow_effect((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_shadow_effect(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_shadow_effect",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_shadow_effect__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_shadow_effect__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_shadow_effect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_shadow_effect() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_shadow_effect(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_directbounce_only__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_directbounce_only" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_directbounce_only();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_directbounce_only__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_directbounce_only" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_directbounce_only" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_directbounce_only((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_directbounce_only(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_directbounce_only",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_directbounce_only__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_directbounce_only__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_directbounce_only'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_directbounce_only() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_directbounce_only(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_wsabsa_output__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_wsabsa_output" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_wsabsa_output();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_wsabsa_output__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_wsabsa_output" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_wsabsa_output" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_wsabsa_output((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_wsabsa_output(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_wsabsa_output",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_wsabsa_output__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_wsabsa_output__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_wsabsa_output'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_wsabsa_output() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_wsabsa_output(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_wsa_scaling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_wsa_scaling" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_wsa_scaling();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_wsa_scaling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_wsa_scaling" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_wsa_scaling" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_wsa_scaling((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_wsa_scaling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_wsa_scaling",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_wsa_scaling__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_wsa_scaling__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_wsa_scaling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_wsa_scaling() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_wsa_scaling(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_bsa_scaling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_bsa_scaling" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_bsa_scaling();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_bsa_scaling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_bsa_scaling" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_bsa_scaling" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_bsa_scaling((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_bsa_scaling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_bsa_scaling",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_bsa_scaling__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_bsa_scaling__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_bsa_scaling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_bsa_scaling() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_bsa_scaling(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_wsa_value__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_wsa_value" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_wsa_value();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_wsa_value__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_wsa_value" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_wsa_value" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_wsa_value((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_wsa_value(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_wsa_value",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_wsa_value__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_wsa_value__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_wsa_value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_wsa_value() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_wsa_value(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_bsa_value__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_bsa_value" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_bsa_value();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_bsa_value__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_bsa_value" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_bsa_value" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_bsa_value((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_bsa_value(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_bsa_value",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_bsa_value__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_bsa_value__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_bsa_value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_bsa_value() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_bsa_value(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_newcmglint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_newcmglint" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_newcmglint();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_newcmglint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_newcmglint" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_newcmglint" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_newcmglint((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_newcmglint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_newcmglint",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_newcmglint__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_newcmglint__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_newcmglint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_newcmglint() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_newcmglint(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_salinity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_salinity" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_salinity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_salinity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_salinity" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_salinity" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_salinity((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_salinity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_salinity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_salinity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_salinity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_salinity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_salinity() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_salinity(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_wavelength__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_wavelength" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_wavelength();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_wavelength__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_wavelength" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_wavelength" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_wavelength((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_wavelength(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_wavelength",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_wavelength__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_wavelength__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_wavelength'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_wavelength() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_wavelength(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_windspeed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_windspeed" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_windspeed();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_windspeed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_windspeed" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_windspeed" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_windspeed((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_windspeed(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_windspeed",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_windspeed__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_windspeed__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_windspeed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_windspeed() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_windspeed(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_winddir__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_winddir" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_winddir();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_winddir__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_winddir" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_winddir((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_winddir(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_winddir",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_winddir__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_winddir__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_winddir'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_winddir() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_winddir(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_glintshadow__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_glintshadow" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_glintshadow();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_glintshadow__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_glintshadow" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_glintshadow" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_glintshadow((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_glintshadow(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_glintshadow",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_glintshadow__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_glintshadow__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_glintshadow'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_glintshadow() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_glintshadow(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_foamoption__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_foamoption" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_foamoption();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_foamoption__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_foamoption" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_foamoption" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_foamoption((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_foamoption(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_foamoption",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_foamoption__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_foamoption__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_foamoption'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_foamoption() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_foamoption(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_facetisotropy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_facetisotropy" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_facetisotropy();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_facetisotropy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_facetisotropy" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_facetisotropy" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_facetisotropy((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_facetisotropy(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_facetisotropy",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_facetisotropy__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_facetisotropy__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_facetisotropy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_facetisotropy() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_facetisotropy(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_glitter_msrcorr" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_glitter_msrcorr();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_glitter_msrcorr" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_glitter_msrcorr" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_glitter_msrcorr((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_glitter_msrcorr",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_glitter_msrcorr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_glitter_msrcorr() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_glitter_msrcorr(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_do_glitter_msrcorr_dbonly();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_do_glitter_msrcorr_dbonly((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_glitter_msrcorr_dbonly() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_do_glitter_msrcorr_dbonly(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_order__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_glitter_msrcorr_order" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_glitter_msrcorr_order();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_order__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_glitter_msrcorr_order" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_glitter_msrcorr_order" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_glitter_msrcorr_order((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_order(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_glitter_msrcorr_order",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_order__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_order__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_glitter_msrcorr_order'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_glitter_msrcorr_order() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_glitter_msrcorr_order(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_glitter_msrcorr_nmuquad();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_glitter_msrcorr_nmuquad((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_glitter_msrcorr_nmuquad() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_glitter_msrcorr_nmuquad(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Sup_Inputs const *)arg1)->bs_glitter_msrcorr_nphiquad();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_glitter_msrcorr_nphiquad((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_glitter_msrcorr_nphiquad() const\n"
    "    FullPhysics::Brdf_Sup_Inputs::bs_glitter_msrcorr_nphiquad(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Inputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Inputs *arg1 = (FullPhysics::Brdf_Sup_Inputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Brdf_Sup_Inputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Inputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Brdf_Sup_Inputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Brdf_Sup_Inputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Brdf_Sup_Inputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Brdf_Sup_Inputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Brdf_Sup_Inputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Brdf_Sup_Inputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Brdf_Sup_Outputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Brdf_Sup_Outputs *)new FullPhysics::Brdf_Sup_Outputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Sup_Outputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Brdf_Sup_Outputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Brdf_Sup_Outputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Brdf_Sup_Outputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (FullPhysics::Brdf_Sup_Outputs *)new FullPhysics::Brdf_Sup_Outputs((FullPhysics::Brdf_Sup_Outputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Sup_Outputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Brdf_Sup_Outputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Brdf_Sup_Outputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Brdf_Sup_Outputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Brdf_Sup_Outputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::Brdf_Sup_Outputs()\n"
    "    FullPhysics::Brdf_Sup_Outputs::Brdf_Sup_Outputs(FullPhysics::Brdf_Sup_Outputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Brdf_Sup_Outputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Brdf_Sup_Outputs" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_dbounce_brdfunc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_dbounce_brdfunc" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_dbounce_brdfunc();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_dbounce_brdfunc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_dbounce_brdfunc" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_dbounce_brdfunc((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_dbounce_brdfunc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_dbounce_brdfunc",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_dbounce_brdfunc__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_dbounce_brdfunc__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_dbounce_brdfunc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_dbounce_brdfunc() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_dbounce_brdfunc(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_brdf_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_brdf_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_brdf_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_brdf_f_0((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_brdf_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_brdf_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_brdf_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_brdf_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_brdf_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_brdf_f_0() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_brdf_f_0(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_brdf_f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_brdf_f" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_brdf_f();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_brdf_f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_brdf_f" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_brdf_f((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_brdf_f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_brdf_f",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_brdf_f__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_brdf_f__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_brdf_f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_brdf_f() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_brdf_f(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_user_brdf_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_user_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_user_brdf_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_user_brdf_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_user_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_user_brdf_f_0((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_user_brdf_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_user_brdf_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_user_brdf_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_user_brdf_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_user_brdf_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_user_brdf_f_0() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_user_brdf_f_0(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_user_brdf_f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_user_brdf_f" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_user_brdf_f();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_user_brdf_f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_user_brdf_f" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_user_brdf_f((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_user_brdf_f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_user_brdf_f",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_user_brdf_f__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_user_brdf_f__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_user_brdf_f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_user_brdf_f() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_user_brdf_f(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_emissivity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_emissivity" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_emissivity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_emissivity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_emissivity" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_emissivity((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_emissivity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_emissivity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_emissivity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_emissivity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_emissivity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_emissivity() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_emissivity(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_user_emissivity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_user_emissivity" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_user_emissivity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_user_emissivity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_user_emissivity" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_user_emissivity((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_user_emissivity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_user_emissivity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_user_emissivity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_user_emissivity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_user_emissivity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_user_emissivity() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_user_emissivity(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_wsa_calculated__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_wsa_calculated" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_wsa_calculated();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_wsa_calculated__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_wsa_calculated" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Outputs_bs_wsa_calculated" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_wsa_calculated((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_wsa_calculated(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_wsa_calculated",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_wsa_calculated__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_wsa_calculated__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_wsa_calculated'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_wsa_calculated() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_wsa_calculated(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_wsa_kernels__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_wsa_kernels" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_wsa_kernels();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_wsa_kernels__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_wsa_kernels" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_wsa_kernels((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_wsa_kernels(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_wsa_kernels",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_wsa_kernels__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_wsa_kernels__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_wsa_kernels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_wsa_kernels() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_wsa_kernels(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_bsa_calculated__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_bsa_calculated" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_bsa_calculated();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_bsa_calculated__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_bsa_calculated" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Sup_Outputs_bs_bsa_calculated" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_bsa_calculated((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_bsa_calculated(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_bsa_calculated",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_bsa_calculated__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_bsa_calculated__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_bsa_calculated'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_bsa_calculated() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_bsa_calculated(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_bsa_kernels__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_bsa_kernels" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Brdf_Sup_Outputs const *)arg1)->bs_bsa_kernels();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_bsa_kernels__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_bs_bsa_kernels" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->bs_bsa_kernels((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_bs_bsa_kernels(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_bs_bsa_kernels",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Sup_Outputs_bs_bsa_kernels__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Sup_Outputs_bs_bsa_kernels__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Sup_Outputs_bs_bsa_kernels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_bsa_kernels() const\n"
    "    FullPhysics::Brdf_Sup_Outputs::bs_bsa_kernels(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Sup_Outputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Sup_Outputs *arg1 = (FullPhysics::Brdf_Sup_Outputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Brdf_Sup_Outputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Sup_Outputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Brdf_Sup_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Sup_Outputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Brdf_Sup_Outputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Brdf_Sup_Outputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Brdf_Sup_Outputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Brdf_Sup_Outputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Brdf_Sup_Outputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Brdf_Sup_Outputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Brdf_Input_Exception_Handling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Input_Exception_Handling *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Brdf_Input_Exception_Handling *)new FullPhysics::Brdf_Input_Exception_Handling();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Input_Exception_Handling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Input_Exception_Handling *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Brdf_Input_Exception_Handling *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Brdf_Input_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Brdf_Input_Exception_Handling const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Brdf_Input_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Brdf_Input_Exception_Handling const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Input_Exception_Handling * >(argp1);
  {
    try {
      result = (FullPhysics::Brdf_Input_Exception_Handling *)new FullPhysics::Brdf_Input_Exception_Handling((FullPhysics::Brdf_Input_Exception_Handling const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Input_Exception_Handling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Brdf_Input_Exception_Handling",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Brdf_Input_Exception_Handling__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Brdf_Input_Exception_Handling__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Brdf_Input_Exception_Handling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Input_Exception_Handling::Brdf_Input_Exception_Handling()\n"
    "    FullPhysics::Brdf_Input_Exception_Handling::Brdf_Input_Exception_Handling(FullPhysics::Brdf_Input_Exception_Handling const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Brdf_Input_Exception_Handling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Input_Exception_Handling *arg1 = (FullPhysics::Brdf_Input_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Brdf_Input_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Brdf_Input_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Input_Exception_Handling * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Input_Exception_Handling_bs_status_inputread__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Input_Exception_Handling *arg1 = (FullPhysics::Brdf_Input_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Input_Exception_Handling_bs_status_inputread" "', argument " "1"" of type '" "FullPhysics::Brdf_Input_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Input_Exception_Handling * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Input_Exception_Handling const *)arg1)->bs_status_inputread();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Input_Exception_Handling_bs_status_inputread__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Input_Exception_Handling *arg1 = (FullPhysics::Brdf_Input_Exception_Handling *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Input_Exception_Handling_bs_status_inputread" "', argument " "1"" of type '" "FullPhysics::Brdf_Input_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Input_Exception_Handling * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Input_Exception_Handling_bs_status_inputread" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_status_inputread((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Input_Exception_Handling_bs_status_inputread(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Input_Exception_Handling_bs_status_inputread",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Input_Exception_Handling_bs_status_inputread__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Input_Exception_Handling_bs_status_inputread__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Input_Exception_Handling_bs_status_inputread'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Input_Exception_Handling::bs_status_inputread() const\n"
    "    FullPhysics::Brdf_Input_Exception_Handling::bs_status_inputread(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Input_Exception_Handling_bs_ninputmessages__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Input_Exception_Handling *arg1 = (FullPhysics::Brdf_Input_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Input_Exception_Handling_bs_ninputmessages" "', argument " "1"" of type '" "FullPhysics::Brdf_Input_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Input_Exception_Handling * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Input_Exception_Handling const *)arg1)->bs_ninputmessages();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Input_Exception_Handling_bs_ninputmessages__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Input_Exception_Handling *arg1 = (FullPhysics::Brdf_Input_Exception_Handling *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Input_Exception_Handling_bs_ninputmessages" "', argument " "1"" of type '" "FullPhysics::Brdf_Input_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Input_Exception_Handling * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Input_Exception_Handling_bs_ninputmessages" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_ninputmessages((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Input_Exception_Handling_bs_ninputmessages(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Input_Exception_Handling_bs_ninputmessages",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Input_Exception_Handling_bs_ninputmessages__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Input_Exception_Handling_bs_ninputmessages__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Input_Exception_Handling_bs_ninputmessages'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Input_Exception_Handling::bs_ninputmessages() const\n"
    "    FullPhysics::Brdf_Input_Exception_Handling::bs_ninputmessages(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Input_Exception_Handling_bs_inputmessages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Input_Exception_Handling *arg1 = (FullPhysics::Brdf_Input_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Input_Exception_Handling_bs_inputmessages" "', argument " "1"" of type '" "FullPhysics::Brdf_Input_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Input_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Brdf_Input_Exception_Handling const *)arg1)->bs_inputmessages();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Input_Exception_Handling_bs_inputactions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Input_Exception_Handling *arg1 = (FullPhysics::Brdf_Input_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Input_Exception_Handling_bs_inputactions" "', argument " "1"" of type '" "FullPhysics::Brdf_Input_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Input_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Brdf_Input_Exception_Handling const *)arg1)->bs_inputactions();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Input_Exception_Handling_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Input_Exception_Handling *arg1 = (FullPhysics::Brdf_Input_Exception_Handling *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Brdf_Input_Exception_Handling_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Input_Exception_Handling_print_desc" "', argument " "1"" of type '" "FullPhysics::Brdf_Input_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Input_Exception_Handling * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Brdf_Input_Exception_Handling_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Brdf_Input_Exception_Handling_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Brdf_Input_Exception_Handling const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Brdf_Input_Exception_Handling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Brdf_Input_Exception_Handling, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Brdf_Input_Exception_Handling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Brdf_Output_Exception_Handling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Output_Exception_Handling *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Brdf_Output_Exception_Handling *)new FullPhysics::Brdf_Output_Exception_Handling();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Output_Exception_Handling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Output_Exception_Handling *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Brdf_Output_Exception_Handling *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Brdf_Output_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Brdf_Output_Exception_Handling const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Brdf_Output_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Brdf_Output_Exception_Handling const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Output_Exception_Handling * >(argp1);
  {
    try {
      result = (FullPhysics::Brdf_Output_Exception_Handling *)new FullPhysics::Brdf_Output_Exception_Handling((FullPhysics::Brdf_Output_Exception_Handling const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Brdf_Output_Exception_Handling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Brdf_Output_Exception_Handling",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Brdf_Output_Exception_Handling__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Brdf_Output_Exception_Handling__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Brdf_Output_Exception_Handling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Output_Exception_Handling::Brdf_Output_Exception_Handling()\n"
    "    FullPhysics::Brdf_Output_Exception_Handling::Brdf_Output_Exception_Handling(FullPhysics::Brdf_Output_Exception_Handling const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Brdf_Output_Exception_Handling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Output_Exception_Handling *arg1 = (FullPhysics::Brdf_Output_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Brdf_Output_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Brdf_Output_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Output_Exception_Handling * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Output_Exception_Handling_bs_status_output__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Output_Exception_Handling *arg1 = (FullPhysics::Brdf_Output_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Output_Exception_Handling_bs_status_output" "', argument " "1"" of type '" "FullPhysics::Brdf_Output_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Output_Exception_Handling * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Output_Exception_Handling const *)arg1)->bs_status_output();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Output_Exception_Handling_bs_status_output__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Output_Exception_Handling *arg1 = (FullPhysics::Brdf_Output_Exception_Handling *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Output_Exception_Handling_bs_status_output" "', argument " "1"" of type '" "FullPhysics::Brdf_Output_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Output_Exception_Handling * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Output_Exception_Handling_bs_status_output" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_status_output((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Output_Exception_Handling_bs_status_output(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Output_Exception_Handling_bs_status_output",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Output_Exception_Handling_bs_status_output__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Output_Exception_Handling_bs_status_output__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Output_Exception_Handling_bs_status_output'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Output_Exception_Handling::bs_status_output() const\n"
    "    FullPhysics::Brdf_Output_Exception_Handling::bs_status_output(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Output_Exception_Handling_bs_noutputmessages__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Output_Exception_Handling *arg1 = (FullPhysics::Brdf_Output_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Output_Exception_Handling_bs_noutputmessages" "', argument " "1"" of type '" "FullPhysics::Brdf_Output_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Output_Exception_Handling * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Brdf_Output_Exception_Handling const *)arg1)->bs_noutputmessages();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Output_Exception_Handling_bs_noutputmessages__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Output_Exception_Handling *arg1 = (FullPhysics::Brdf_Output_Exception_Handling *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Output_Exception_Handling_bs_noutputmessages" "', argument " "1"" of type '" "FullPhysics::Brdf_Output_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Output_Exception_Handling * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brdf_Output_Exception_Handling_bs_noutputmessages" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->bs_noutputmessages((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Output_Exception_Handling_bs_noutputmessages(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Brdf_Output_Exception_Handling_bs_noutputmessages",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Brdf_Output_Exception_Handling_bs_noutputmessages__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Brdf_Output_Exception_Handling_bs_noutputmessages__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Brdf_Output_Exception_Handling_bs_noutputmessages'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Brdf_Output_Exception_Handling::bs_noutputmessages() const\n"
    "    FullPhysics::Brdf_Output_Exception_Handling::bs_noutputmessages(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Brdf_Output_Exception_Handling_bs_outputmessages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Output_Exception_Handling *arg1 = (FullPhysics::Brdf_Output_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Output_Exception_Handling_bs_outputmessages" "', argument " "1"" of type '" "FullPhysics::Brdf_Output_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Output_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Brdf_Output_Exception_Handling const *)arg1)->bs_outputmessages();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Brdf_Output_Exception_Handling_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Brdf_Output_Exception_Handling *arg1 = (FullPhysics::Brdf_Output_Exception_Handling *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Brdf_Output_Exception_Handling_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brdf_Output_Exception_Handling_print_desc" "', argument " "1"" of type '" "FullPhysics::Brdf_Output_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Brdf_Output_Exception_Handling * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Brdf_Output_Exception_Handling_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Brdf_Output_Exception_Handling_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Brdf_Output_Exception_Handling const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Brdf_Output_Exception_Handling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Brdf_Output_Exception_Handling, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Brdf_Output_Exception_Handling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Sleave_Sup_Inputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Sleave_Sup_Inputs *)new FullPhysics::Sleave_Sup_Inputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Sleave_Sup_Inputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Sleave_Sup_Inputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Sleave_Sup_Inputs" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Sleave_Sup_Inputs" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Sleave_Sup_Inputs *)new FullPhysics::Sleave_Sup_Inputs((FullPhysics::Sleave_Sup_Inputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Sleave_Sup_Inputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Sleave_Sup_Inputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Sleave_Sup_Inputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Sleave_Sup_Inputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Sleave_Sup_Inputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::Sleave_Sup_Inputs()\n"
    "    FullPhysics::Sleave_Sup_Inputs::Sleave_Sup_Inputs(FullPhysics::Sleave_Sup_Inputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Sleave_Sup_Inputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sleave_Sup_Inputs" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_sleaving__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_sleaving" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_sleaving();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_sleaving__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_sleaving" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_sleaving" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_sleaving((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_sleaving(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_sleaving",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_sleaving__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_sleaving__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_sleaving'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_sleaving() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_sleaving(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_isotropic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_isotropic" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_isotropic();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_isotropic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_isotropic" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_isotropic" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_isotropic((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_isotropic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_isotropic",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_isotropic__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_isotropic__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_isotropic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_isotropic() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_isotropic(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_roughsurface__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_roughsurface" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_roughsurface();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_roughsurface__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_roughsurface" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_roughsurface" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_roughsurface((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_roughsurface(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_roughsurface",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_roughsurface__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_roughsurface__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_roughsurface'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_roughsurface() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_roughsurface(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_exact__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_exact" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_exact();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_exact__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_exact" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_exact" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_exact((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_exact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_exact",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_exact__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_exact__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_exact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_exact() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_exact(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_exactonly__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_exactonly" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_exactonly();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_exactonly__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_exactonly" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_exactonly" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_exactonly((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_exactonly(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_exactonly",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_exactonly__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_exactonly__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_exactonly'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_exactonly() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_exactonly(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_fluorescence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_fluorescence" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_fluorescence();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_fluorescence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_fluorescence" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_fluorescence" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_fluorescence((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_fluorescence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_fluorescence",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_fluorescence__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_fluorescence__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_fluorescence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_fluorescence() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_fluorescence(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_solar_sources__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_solar_sources" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_solar_sources();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_solar_sources__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_solar_sources" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_solar_sources" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_solar_sources((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_solar_sources(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_solar_sources",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_solar_sources__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_solar_sources__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_solar_sources'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_solar_sources() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_solar_sources(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_sleave_datapath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_sleave_datapath" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = ((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_sleave_datapath();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_user_streams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_user_streams" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_user_streams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_user_streams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_user_streams" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_user_streams" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_user_streams((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_user_streams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_user_streams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_user_streams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_user_streams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_user_streams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_user_streams() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_user_streams(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_user_obsgeoms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_user_obsgeoms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_user_obsgeoms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_user_obsgeoms" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_user_obsgeoms((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_user_obsgeoms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_user_obsgeoms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_user_obsgeoms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_user_obsgeoms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_user_obsgeoms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_user_obsgeoms() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_user_obsgeoms(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_doublet_geometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_doublet_geometry" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_doublet_geometry();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_doublet_geometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_doublet_geometry" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_doublet_geometry" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_doublet_geometry((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_doublet_geometry(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_doublet_geometry",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_doublet_geometry__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_doublet_geometry__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_doublet_geometry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_doublet_geometry() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_doublet_geometry(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_nstreams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_nstreams" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_nstreams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_nstreams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_nstreams" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_nstreams" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_nstreams((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_nstreams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_nstreams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_nstreams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_nstreams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_nstreams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_nstreams() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_nstreams(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_nbeams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_nbeams" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_nbeams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_nbeams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_nbeams" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_nbeams" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_nbeams((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_nbeams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_nbeams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_nbeams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_nbeams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_nbeams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_nbeams() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_nbeams(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_beam_szas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_beam_szas" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_beam_szas();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_beam_szas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_beam_szas" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->sl_beam_szas((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_beam_szas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_beam_szas",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_beam_szas__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_beam_szas__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_beam_szas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_beam_szas() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_beam_szas(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_relazms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_n_user_relazms" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_n_user_relazms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_relazms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_n_user_relazms" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_n_user_relazms" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_n_user_relazms((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_relazms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_n_user_relazms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_n_user_relazms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_n_user_relazms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_n_user_relazms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_n_user_relazms() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_n_user_relazms(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_relazms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_user_relazms" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_user_relazms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_relazms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_user_relazms" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->sl_user_relazms((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_relazms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_user_relazms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_user_relazms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_user_relazms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_user_relazms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_user_relazms() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_user_relazms(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_streams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_n_user_streams" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_n_user_streams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_streams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_n_user_streams" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_n_user_streams" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_n_user_streams((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_streams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_n_user_streams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_n_user_streams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_n_user_streams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_n_user_streams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_n_user_streams() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_n_user_streams(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_angles_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_user_angles_input" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_user_angles_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_angles_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_user_angles_input" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->sl_user_angles_input((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_angles_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_user_angles_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_user_angles_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_user_angles_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_user_angles_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_user_angles_input() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_user_angles_input(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_obsgeoms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_n_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_n_user_obsgeoms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_obsgeoms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_n_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_n_user_obsgeoms" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_n_user_obsgeoms((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_obsgeoms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_n_user_obsgeoms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_n_user_obsgeoms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_n_user_obsgeoms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_n_user_obsgeoms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_n_user_obsgeoms() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_n_user_obsgeoms(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_obsgeoms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_user_obsgeoms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_obsgeoms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->sl_user_obsgeoms((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_obsgeoms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_user_obsgeoms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_user_obsgeoms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_user_obsgeoms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_user_obsgeoms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_user_obsgeoms() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_user_obsgeoms(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_doublets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_n_user_doublets" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_n_user_doublets();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_doublets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_n_user_doublets" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_n_user_doublets" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_n_user_doublets((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_n_user_doublets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_n_user_doublets",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_n_user_doublets__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_n_user_doublets__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_n_user_doublets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_n_user_doublets() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_n_user_doublets(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_doublets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_user_doublets" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_user_doublets();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_doublets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_user_doublets" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->sl_user_doublets((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_user_doublets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_user_doublets",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_user_doublets__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_user_doublets__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_user_doublets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_user_doublets() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_user_doublets(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_salinity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_salinity" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_salinity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_salinity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_salinity" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_salinity" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_salinity((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_salinity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_salinity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_salinity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_salinity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_salinity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_salinity() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_salinity(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_chlorconc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_chlorconc" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_chlorconc();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_chlorconc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_chlorconc" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_chlorconc" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_chlorconc((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_chlorconc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_chlorconc",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_chlorconc__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_chlorconc__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_chlorconc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_chlorconc() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_chlorconc(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_wavelength__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_wavelength" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_wavelength();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_wavelength__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_wavelength" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_wavelength" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_wavelength((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_wavelength(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_wavelength",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_wavelength__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_wavelength__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_wavelength'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_wavelength() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_wavelength(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_azimuthdep__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_azimuthdep" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_azimuthdep();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_azimuthdep__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_azimuthdep" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_azimuthdep" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_azimuthdep((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_azimuthdep(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_azimuthdep",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_azimuthdep__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_azimuthdep__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_azimuthdep'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_azimuthdep() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_azimuthdep(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_fourier_output__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_fourier_output" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_fourier_output();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_fourier_output__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_fourier_output" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_fourier_output" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_fourier_output((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_fourier_output(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_fourier_output",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_fourier_output__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_fourier_output__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_fourier_output'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_fourier_output() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_fourier_output(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_windspeed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_windspeed" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_windspeed();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_windspeed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_windspeed" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_windspeed" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_windspeed((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_windspeed(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_windspeed",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_windspeed__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_windspeed__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_windspeed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_windspeed() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_windspeed(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_winddir__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_winddir" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_winddir();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_winddir__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_winddir" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->sl_winddir((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_winddir(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_winddir",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_winddir__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_winddir__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_winddir'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_winddir() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_winddir(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_glintshadow__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_glintshadow" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_glintshadow();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_glintshadow__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_glintshadow" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_glintshadow" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_glintshadow((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_glintshadow(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_glintshadow",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_glintshadow__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_glintshadow__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_glintshadow'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_glintshadow() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_glintshadow(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_foamoption__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_foamoption" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_foamoption();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_foamoption__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_foamoption" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_foamoption" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_foamoption((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_foamoption(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_foamoption",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_foamoption__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_foamoption__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_foamoption'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_foamoption() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_foamoption(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_facetisotropy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_facetisotropy" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_do_facetisotropy();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_facetisotropy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_do_facetisotropy" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_do_facetisotropy" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_do_facetisotropy((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_do_facetisotropy(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_do_facetisotropy",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_do_facetisotropy__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_do_facetisotropy__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_do_facetisotropy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_facetisotropy() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_do_facetisotropy(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_wavelength__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_wavelength" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_fl_wavelength();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_wavelength__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_wavelength" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_fl_wavelength" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_fl_wavelength((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_wavelength(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_fl_wavelength",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_wavelength__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_wavelength__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_fl_wavelength'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_wavelength() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_wavelength(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_latitude__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_latitude" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_fl_latitude();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_latitude__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_latitude" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_fl_latitude" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_fl_latitude((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_latitude(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_fl_latitude",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_latitude__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_latitude__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_fl_latitude'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_latitude() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_latitude(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_longitude__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_longitude" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_fl_longitude();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_longitude__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_longitude" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_fl_longitude" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_fl_longitude((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_longitude(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_fl_longitude",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_longitude__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_longitude__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_fl_longitude'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_longitude() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_longitude(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_epoch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_epoch" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< int,1 > *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_fl_epoch();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(int);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<int>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<int, 1>* t = new blitz::Array<int, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_int_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_epoch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  blitz::Array< int,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_epoch" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_int_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<int>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<int, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->sl_fl_epoch((blitz::Array< int,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_epoch(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_fl_epoch",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_epoch__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_epoch__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_fl_epoch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_epoch() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_epoch(blitz::Array< int,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_amplitude755__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_amplitude755" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_fl_amplitude755();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_amplitude755__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_amplitude755" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_fl_amplitude755" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_fl_amplitude755((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_amplitude755(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_fl_amplitude755",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_amplitude755__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_amplitude755__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_fl_amplitude755'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_amplitude755() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_amplitude755(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_do_datagaussian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_do_datagaussian" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_fl_do_datagaussian();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_do_datagaussian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_do_datagaussian" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sleave_Sup_Inputs_sl_fl_do_datagaussian" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->sl_fl_do_datagaussian((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_do_datagaussian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_fl_do_datagaussian",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_do_datagaussian__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_do_datagaussian__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_fl_do_datagaussian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_do_datagaussian() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_do_datagaussian(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_inputgaussians__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_inputgaussians" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Sleave_Sup_Inputs const *)arg1)->sl_fl_inputgaussians();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_inputgaussians__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_sl_fl_inputgaussians" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->sl_fl_inputgaussians((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_sl_fl_inputgaussians(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_sl_fl_inputgaussians",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_inputgaussians__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sleave_Sup_Inputs_sl_fl_inputgaussians__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sleave_Sup_Inputs_sl_fl_inputgaussians'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_inputgaussians() const\n"
    "    FullPhysics::Sleave_Sup_Inputs::sl_fl_inputgaussians(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sleave_Sup_Inputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Sleave_Sup_Inputs *arg1 = (FullPhysics::Sleave_Sup_Inputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Sleave_Sup_Inputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sleave_Sup_Inputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Sleave_Sup_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Sleave_Sup_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sleave_Sup_Inputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sleave_Sup_Inputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Sleave_Sup_Inputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Sleave_Sup_Inputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Sleave_Sup_Inputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Sleave_Sup_Inputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Lincontrol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Lincontrol *)new FullPhysics::Lidort_Fixed_Lincontrol();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Lincontrol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Lincontrol *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Lincontrol" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Lincontrol" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Lincontrol *)new FullPhysics::Lidort_Fixed_Lincontrol((FullPhysics::Lidort_Fixed_Lincontrol const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Lincontrol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Lincontrol",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Lincontrol__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Lincontrol__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Lincontrol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::Lidort_Fixed_Lincontrol()\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::Lidort_Fixed_Lincontrol(FullPhysics::Lidort_Fixed_Lincontrol const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Lincontrol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Lincontrol" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_flag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< blitz::Array< bool,1 > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_layer_vary_flag" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Fixed_Lincontrol const *)arg1)->ts_layer_vary_flag();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = (&result)->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = (&result)->stride(i) * sizeof(bool);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<bool>(), 
      stride, (&result)->data(), 0, 0, 0);
    blitz::Array<bool, 1>* t = new blitz::Array<bool, 1>(result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_bool_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_flag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  blitz::Array< bool,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< bool,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_layer_vary_flag" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_bool_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<bool>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<bool, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_layer_vary_flag((blitz::Array< bool,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_flag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Lincontrol_ts_layer_vary_flag",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_flag__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_flag__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Lincontrol_ts_layer_vary_flag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::ts_layer_vary_flag() const\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::ts_layer_vary_flag(blitz::Array< bool,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_number__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_layer_vary_number" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    try {
      result = (blitz::Array< int,1 > *) &((FullPhysics::Lidort_Fixed_Lincontrol const *)arg1)->ts_layer_vary_number();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(int);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<int>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<int, 1>* t = new blitz::Array<int, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_int_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_number__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  blitz::Array< int,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_layer_vary_number" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_int_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<int>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<int, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_layer_vary_number((blitz::Array< int,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_number(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Lincontrol_ts_layer_vary_number",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_number__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_number__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Lincontrol_ts_layer_vary_number'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::ts_layer_vary_number() const\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::ts_layer_vary_number(blitz::Array< int,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Fixed_Lincontrol const *)arg1)->ts_n_totalcolumn_wfs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_n_totalcolumn_wfs((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::ts_n_totalcolumn_wfs() const\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::ts_n_totalcolumn_wfs(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_n_surface_wfs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_n_surface_wfs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Fixed_Lincontrol const *)arg1)->ts_n_surface_wfs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_n_surface_wfs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_n_surface_wfs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Lincontrol_ts_n_surface_wfs" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_n_surface_wfs((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_n_surface_wfs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Lincontrol_ts_n_surface_wfs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Lincontrol_ts_n_surface_wfs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Lincontrol_ts_n_surface_wfs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Lincontrol_ts_n_surface_wfs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::ts_n_surface_wfs() const\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::ts_n_surface_wfs(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_n_sleave_wfs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_n_sleave_wfs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Fixed_Lincontrol const *)arg1)->ts_n_sleave_wfs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_n_sleave_wfs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_n_sleave_wfs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Lincontrol_ts_n_sleave_wfs" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_n_sleave_wfs((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_n_sleave_wfs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Lincontrol_ts_n_sleave_wfs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Lincontrol_ts_n_sleave_wfs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Lincontrol_ts_n_sleave_wfs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Lincontrol_ts_n_sleave_wfs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::ts_n_sleave_wfs() const\n"
    "    FullPhysics::Lidort_Fixed_Lincontrol::ts_n_sleave_wfs(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_columnwf_names(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_columnwf_names" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Fixed_Lincontrol const *)arg1)->ts_columnwf_names();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_ts_profilewf_names(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_ts_profilewf_names" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Fixed_Lincontrol const *)arg1)->ts_profilewf_names();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lincontrol_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lincontrol *arg1 = (FullPhysics::Lidort_Fixed_Lincontrol *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Lincontrol_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lincontrol_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Lincontrol_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Lincontrol_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Lincontrol const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Lincontrol_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Lincontrol_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Linoptical__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Linoptical *)new FullPhysics::Lidort_Fixed_Linoptical();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Linoptical__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Linoptical *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Linoptical" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Linoptical" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Linoptical *)new FullPhysics::Lidort_Fixed_Linoptical((FullPhysics::Lidort_Fixed_Linoptical const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Linoptical(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Linoptical",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Linoptical__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Linoptical__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Linoptical'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::Lidort_Fixed_Linoptical()\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::Lidort_Fixed_Linoptical(FullPhysics::Lidort_Fixed_Linoptical const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Linoptical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Linoptical" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_deltau_vert_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_ts_l_deltau_vert_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Fixed_Linoptical const *)arg1)->ts_l_deltau_vert_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_deltau_vert_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_ts_l_deltau_vert_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_l_deltau_vert_input((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_deltau_vert_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Linoptical_ts_l_deltau_vert_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Linoptical_ts_l_deltau_vert_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Linoptical_ts_l_deltau_vert_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Linoptical_ts_l_deltau_vert_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::ts_l_deltau_vert_input() const\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::ts_l_deltau_vert_input(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_omega_total_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_ts_l_omega_total_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Fixed_Linoptical const *)arg1)->ts_l_omega_total_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_omega_total_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_ts_l_omega_total_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_l_omega_total_input((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_omega_total_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Linoptical_ts_l_omega_total_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Linoptical_ts_l_omega_total_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Linoptical_ts_l_omega_total_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Linoptical_ts_l_omega_total_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::ts_l_omega_total_input() const\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::ts_l_omega_total_input(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Fixed_Linoptical const *)arg1)->ts_l_phasmoms_total_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_l_phasmoms_total_input((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::ts_l_phasmoms_total_input() const\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::ts_l_phasmoms_total_input(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Fixed_Linoptical const *)arg1)->ts_l_phasfunc_input_up();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_l_phasfunc_input_up((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::ts_l_phasfunc_input_up() const\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::ts_l_phasfunc_input_up(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Fixed_Linoptical const *)arg1)->ts_l_phasfunc_input_dn();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_l_phasfunc_input_dn((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::ts_l_phasfunc_input_dn() const\n"
    "    FullPhysics::Lidort_Fixed_Linoptical::ts_l_phasfunc_input_dn(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Linoptical_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Linoptical *arg1 = (FullPhysics::Lidort_Fixed_Linoptical *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Linoptical_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Linoptical_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Linoptical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Linoptical_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Linoptical_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Linoptical const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Linoptical_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Linoptical_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Lininputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lininputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Lininputs *)new FullPhysics::Lidort_Fixed_Lininputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Lininputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lininputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Lininputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Lininputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lininputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Lininputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lininputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lininputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Lininputs *)new FullPhysics::Lidort_Fixed_Lininputs((FullPhysics::Lidort_Fixed_Lininputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Lininputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Lininputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Lininputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Lininputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Lininputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Lininputs::Lidort_Fixed_Lininputs()\n"
    "    FullPhysics::Lidort_Fixed_Lininputs::Lidort_Fixed_Lininputs(FullPhysics::Lidort_Fixed_Lininputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Lininputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lininputs *arg1 = (FullPhysics::Lidort_Fixed_Lininputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Lininputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lininputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lininputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lininputs_cont__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lininputs *arg1 = (FullPhysics::Lidort_Fixed_Lininputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Lincontrol *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lininputs_cont" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lininputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lininputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Lincontrol *) &((FullPhysics::Lidort_Fixed_Lininputs const *)arg1)->cont();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lininputs_cont__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lininputs *arg1 = (FullPhysics::Lidort_Fixed_Lininputs *) 0 ;
  FullPhysics::Lidort_Fixed_Lincontrol *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lininputs_cont" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lininputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lininputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lincontrol,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Lininputs_cont" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Lininputs_cont" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Lincontrol &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lincontrol * >(argp2);
  {
    try {
      (arg1)->cont(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lininputs_cont(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Lininputs_cont",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Lininputs_cont__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Lininputs_cont__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Lininputs_cont'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Lininputs::cont() const\n"
    "    FullPhysics::Lidort_Fixed_Lininputs::cont(FullPhysics::Lidort_Fixed_Lincontrol &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lininputs_optical__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lininputs *arg1 = (FullPhysics::Lidort_Fixed_Lininputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Linoptical *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lininputs_optical" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lininputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lininputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Linoptical *) &((FullPhysics::Lidort_Fixed_Lininputs const *)arg1)->optical();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lininputs_optical__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lininputs *arg1 = (FullPhysics::Lidort_Fixed_Lininputs *) 0 ;
  FullPhysics::Lidort_Fixed_Linoptical *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lininputs_optical" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lininputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lininputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Linoptical,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Lininputs_optical" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Linoptical &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Lininputs_optical" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Linoptical &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Fixed_Linoptical * >(argp2);
  {
    try {
      (arg1)->optical(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lininputs_optical(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Lininputs_optical",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Lininputs_optical__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Lininputs_optical__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Lininputs_optical'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Lininputs::optical() const\n"
    "    FullPhysics::Lidort_Fixed_Lininputs::optical(FullPhysics::Lidort_Fixed_Linoptical &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Lininputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Lininputs *arg1 = (FullPhysics::Lidort_Fixed_Lininputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Lininputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Lininputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Lininputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Lininputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Lininputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Lininputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Lininputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Lininputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Lininputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Lininputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Lincontrol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Modified_Lincontrol *)new FullPhysics::Lidort_Modified_Lincontrol();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Lincontrol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Lincontrol *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Modified_Lincontrol" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Modified_Lincontrol" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Lincontrol *)new FullPhysics::Lidort_Modified_Lincontrol((FullPhysics::Lidort_Modified_Lincontrol const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Lincontrol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Modified_Lincontrol",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Modified_Lincontrol__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Modified_Lincontrol__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Modified_Lincontrol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::Lidort_Modified_Lincontrol()\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::Lidort_Modified_Lincontrol(FullPhysics::Lidort_Modified_Lincontrol const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Modified_Lincontrol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Modified_Lincontrol" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_column_linearization__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_column_linearization" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Lincontrol const *)arg1)->ts_do_column_linearization();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_column_linearization__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_column_linearization" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Lincontrol_ts_do_column_linearization" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_column_linearization((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_column_linearization(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lincontrol_ts_do_column_linearization",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_column_linearization__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_column_linearization__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Lincontrol_ts_do_column_linearization'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_column_linearization() const\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_column_linearization(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_profile_linearization__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_profile_linearization" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Lincontrol const *)arg1)->ts_do_profile_linearization();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_profile_linearization__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_profile_linearization" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Lincontrol_ts_do_profile_linearization" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_profile_linearization((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_profile_linearization(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lincontrol_ts_do_profile_linearization",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_profile_linearization__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_profile_linearization__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Lincontrol_ts_do_profile_linearization'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_profile_linearization() const\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_profile_linearization(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_atmos_linearization__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_atmos_linearization" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Lincontrol const *)arg1)->ts_do_atmos_linearization();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_atmos_linearization__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_atmos_linearization" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Lincontrol_ts_do_atmos_linearization" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_atmos_linearization((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_atmos_linearization(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lincontrol_ts_do_atmos_linearization",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_atmos_linearization__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_atmos_linearization__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Lincontrol_ts_do_atmos_linearization'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_atmos_linearization() const\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_atmos_linearization(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_surface_linearization__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_surface_linearization" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Lincontrol const *)arg1)->ts_do_surface_linearization();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_surface_linearization__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_surface_linearization" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Lincontrol_ts_do_surface_linearization" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_surface_linearization((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_surface_linearization(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lincontrol_ts_do_surface_linearization",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_surface_linearization__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_surface_linearization__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Lincontrol_ts_do_surface_linearization'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_surface_linearization() const\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_surface_linearization(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_linearization__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_linearization" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Lincontrol const *)arg1)->ts_do_linearization();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_linearization__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_linearization" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Lincontrol_ts_do_linearization" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_linearization((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_linearization(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lincontrol_ts_do_linearization",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_linearization__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_linearization__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Lincontrol_ts_do_linearization'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_linearization() const\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_linearization(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_simulation_only__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_simulation_only" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Lincontrol const *)arg1)->ts_do_simulation_only();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_simulation_only__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_simulation_only" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Lincontrol_ts_do_simulation_only" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_simulation_only((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_simulation_only(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lincontrol_ts_do_simulation_only",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_simulation_only__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_simulation_only__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Lincontrol_ts_do_simulation_only'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_simulation_only() const\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_simulation_only(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_atmos_lbbf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_atmos_lbbf" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Lincontrol const *)arg1)->ts_do_atmos_lbbf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_atmos_lbbf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_atmos_lbbf" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Lincontrol_ts_do_atmos_lbbf" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_atmos_lbbf((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_atmos_lbbf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lincontrol_ts_do_atmos_lbbf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_atmos_lbbf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_atmos_lbbf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Lincontrol_ts_do_atmos_lbbf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_atmos_lbbf() const\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_atmos_lbbf(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_surface_lbbf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_surface_lbbf" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Lincontrol const *)arg1)->ts_do_surface_lbbf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_surface_lbbf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_surface_lbbf" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Lincontrol_ts_do_surface_lbbf" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_surface_lbbf((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_surface_lbbf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lincontrol_ts_do_surface_lbbf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_surface_lbbf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_surface_lbbf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Lincontrol_ts_do_surface_lbbf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_surface_lbbf() const\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_surface_lbbf(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_sleave_wfs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_sleave_wfs" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Lincontrol const *)arg1)->ts_do_sleave_wfs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_sleave_wfs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_ts_do_sleave_wfs" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Lincontrol_ts_do_sleave_wfs" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_sleave_wfs((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_ts_do_sleave_wfs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lincontrol_ts_do_sleave_wfs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_sleave_wfs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Lincontrol_ts_do_sleave_wfs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Lincontrol_ts_do_sleave_wfs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_sleave_wfs() const\n"
    "    FullPhysics::Lidort_Modified_Lincontrol::ts_do_sleave_wfs(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lincontrol_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lincontrol *arg1 = (FullPhysics::Lidort_Modified_Lincontrol *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lincontrol_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lincontrol_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lincontrol const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Lincontrol_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Lincontrol_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Modified_Lincontrol const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Modified_Lincontrol_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Modified_Lincontrol_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Lininputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lininputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Modified_Lininputs *)new FullPhysics::Lidort_Modified_Lininputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Lininputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Lininputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lininputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Lininputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Modified_Lininputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Modified_Lininputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lininputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Modified_Lininputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lininputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lininputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Lininputs *)new FullPhysics::Lidort_Modified_Lininputs((FullPhysics::Lidort_Modified_Lininputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Lininputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Lininputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Modified_Lininputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Modified_Lininputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Modified_Lininputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Modified_Lininputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lininputs::Lidort_Modified_Lininputs()\n"
    "    FullPhysics::Lidort_Modified_Lininputs::Lidort_Modified_Lininputs(FullPhysics::Lidort_Modified_Lininputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Modified_Lininputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lininputs *arg1 = (FullPhysics::Lidort_Modified_Lininputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lininputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Modified_Lininputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lininputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lininputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lininputs_mcont__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lininputs *arg1 = (FullPhysics::Lidort_Modified_Lininputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Lincontrol *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lininputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lininputs_mcont" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lininputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lininputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Lincontrol *) &((FullPhysics::Lidort_Modified_Lininputs const *)arg1)->mcont();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lininputs_mcont__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lininputs *arg1 = (FullPhysics::Lidort_Modified_Lininputs *) 0 ;
  FullPhysics::Lidort_Modified_Lincontrol *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lininputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lininputs_mcont" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lininputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lininputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Modified_Lincontrol,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Lininputs_mcont" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Lincontrol &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Lininputs_mcont" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Lincontrol &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Modified_Lincontrol * >(argp2);
  {
    try {
      (arg1)->mcont(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lininputs_mcont(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lininputs_mcont",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Lininputs_mcont__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Lininputs_mcont__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Lininputs_mcont'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Lininputs::mcont() const\n"
    "    FullPhysics::Lidort_Modified_Lininputs::mcont(FullPhysics::Lidort_Modified_Lincontrol &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Lininputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Lininputs *arg1 = (FullPhysics::Lidort_Modified_Lininputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Modified_Lininputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Lininputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Lininputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Lininputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Lininputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Lininputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Lininputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Modified_Lininputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Modified_Lininputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Modified_Lininputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Modified_Lininputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Linatmos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Linatmos *)new FullPhysics::Lidort_Linatmos();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linatmos, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linatmos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linatmos *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Linatmos,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Linatmos" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Linatmos" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linatmos *)new FullPhysics::Lidort_Linatmos((FullPhysics::Lidort_Linatmos const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linatmos, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linatmos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Linatmos",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Linatmos__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Linatmos__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Linatmos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::Lidort_Linatmos()\n"
    "    FullPhysics::Lidort_Linatmos::Lidort_Linatmos(FullPhysics::Lidort_Linatmos const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Linatmos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Linatmos" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_columnwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_columnwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_columnwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_columnwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_columnwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_columnwf((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_columnwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_columnwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_columnwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_columnwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_columnwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_columnwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_columnwf(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_meani_diffuse_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_meani_diffuse_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_meani_diffuse_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_meani_diffuse_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_meani_diffuse_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_meani_diffuse_colwf((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_meani_diffuse_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_meani_diffuse_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_meani_diffuse_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_meani_diffuse_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_meani_diffuse_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_meani_diffuse_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_meani_diffuse_colwf(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_flux_diffuse_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_flux_diffuse_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_flux_diffuse_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_flux_diffuse_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_flux_diffuse_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_flux_diffuse_colwf((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_flux_diffuse_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_flux_diffuse_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_flux_diffuse_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_flux_diffuse_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_flux_diffuse_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_flux_diffuse_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_flux_diffuse_colwf(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnmeani_direct_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_dnmeani_direct_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_dnmeani_direct_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnmeani_direct_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_dnmeani_direct_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_dnmeani_direct_colwf((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnmeani_direct_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_dnmeani_direct_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_dnmeani_direct_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_dnmeani_direct_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_dnmeani_direct_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_dnmeani_direct_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_dnmeani_direct_colwf(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnflux_direct_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_dnflux_direct_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_dnflux_direct_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnflux_direct_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_dnflux_direct_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_dnflux_direct_colwf((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnflux_direct_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_dnflux_direct_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_dnflux_direct_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_dnflux_direct_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_dnflux_direct_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_dnflux_direct_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_dnflux_direct_colwf(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_profilewf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,5 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_profilewf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,5 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_profilewf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_blitz__ArrayT_double_5_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_profilewf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,5 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_profilewf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_blitz__ArrayT_double_5_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linatmos_ts_profilewf" "', argument " "2"" of type '" "blitz::Array< double,5 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linatmos_ts_profilewf" "', argument " "2"" of type '" "blitz::Array< double,5 > const &""'"); 
  }
  arg2 = reinterpret_cast< blitz::Array< double,5 > * >(argp2);
  {
    try {
      (arg1)->ts_profilewf((blitz::Array< double,5 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_profilewf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_profilewf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_profilewf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_profilewf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_profilewf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_profilewf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_profilewf(blitz::Array< double,5 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_meani_diffuse_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,5 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_meani_diffuse_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,5 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_meani_diffuse_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_blitz__ArrayT_double_5_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_meani_diffuse_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,5 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_meani_diffuse_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_blitz__ArrayT_double_5_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linatmos_ts_meani_diffuse_profwf" "', argument " "2"" of type '" "blitz::Array< double,5 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linatmos_ts_meani_diffuse_profwf" "', argument " "2"" of type '" "blitz::Array< double,5 > const &""'"); 
  }
  arg2 = reinterpret_cast< blitz::Array< double,5 > * >(argp2);
  {
    try {
      (arg1)->ts_meani_diffuse_profwf((blitz::Array< double,5 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_meani_diffuse_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_meani_diffuse_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_meani_diffuse_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_meani_diffuse_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_meani_diffuse_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_meani_diffuse_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_meani_diffuse_profwf(blitz::Array< double,5 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_flux_diffuse_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,5 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_flux_diffuse_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,5 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_flux_diffuse_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_blitz__ArrayT_double_5_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_flux_diffuse_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,5 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_flux_diffuse_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_blitz__ArrayT_double_5_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linatmos_ts_flux_diffuse_profwf" "', argument " "2"" of type '" "blitz::Array< double,5 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linatmos_ts_flux_diffuse_profwf" "', argument " "2"" of type '" "blitz::Array< double,5 > const &""'"); 
  }
  arg2 = reinterpret_cast< blitz::Array< double,5 > * >(argp2);
  {
    try {
      (arg1)->ts_flux_diffuse_profwf((blitz::Array< double,5 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_flux_diffuse_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_flux_diffuse_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_flux_diffuse_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_flux_diffuse_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_flux_diffuse_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_flux_diffuse_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_flux_diffuse_profwf(blitz::Array< double,5 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnmeani_direct_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_dnmeani_direct_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_dnmeani_direct_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnmeani_direct_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_dnmeani_direct_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_dnmeani_direct_profwf((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnmeani_direct_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_dnmeani_direct_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_dnmeani_direct_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_dnmeani_direct_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_dnmeani_direct_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_dnmeani_direct_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_dnmeani_direct_profwf(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnflux_direct_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_dnflux_direct_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_dnflux_direct_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnflux_direct_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_dnflux_direct_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_dnflux_direct_profwf((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_dnflux_direct_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_dnflux_direct_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_dnflux_direct_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_dnflux_direct_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_dnflux_direct_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_dnflux_direct_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_dnflux_direct_profwf(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_abbwfs_jacobians__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_abbwfs_jacobians" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_abbwfs_jacobians();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_abbwfs_jacobians__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_abbwfs_jacobians" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_abbwfs_jacobians((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_abbwfs_jacobians(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_abbwfs_jacobians",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_abbwfs_jacobians__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_abbwfs_jacobians__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_abbwfs_jacobians'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_abbwfs_jacobians() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_abbwfs_jacobians(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_abbwfs_fluxes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_abbwfs_fluxes" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_abbwfs_fluxes();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_abbwfs_fluxes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_abbwfs_fluxes" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_abbwfs_fluxes((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_abbwfs_fluxes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_abbwfs_fluxes",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_abbwfs_fluxes__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_abbwfs_fluxes__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_abbwfs_fluxes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_abbwfs_fluxes() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_abbwfs_fluxes(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_user_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_albmed_user_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_albmed_user_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_user_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_albmed_user_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_albmed_user_profwf((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_user_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_albmed_user_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_albmed_user_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_albmed_user_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_albmed_user_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_albmed_user_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_albmed_user_profwf(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_user_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_trnmed_user_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_trnmed_user_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_user_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_trnmed_user_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_trnmed_user_profwf((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_user_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_trnmed_user_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_trnmed_user_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_trnmed_user_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_trnmed_user_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_trnmed_user_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_trnmed_user_profwf(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_fluxes_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_albmed_fluxes_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_albmed_fluxes_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_fluxes_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_albmed_fluxes_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_albmed_fluxes_profwf((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_fluxes_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_albmed_fluxes_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_albmed_fluxes_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_albmed_fluxes_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_albmed_fluxes_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_albmed_fluxes_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_albmed_fluxes_profwf(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_fluxes_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_trnmed_fluxes_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_trnmed_fluxes_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_fluxes_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_trnmed_fluxes_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_trnmed_fluxes_profwf((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_fluxes_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_trnmed_fluxes_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_trnmed_fluxes_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_trnmed_fluxes_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_trnmed_fluxes_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_trnmed_fluxes_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_trnmed_fluxes_profwf(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_transbeam_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_transbeam_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_transbeam_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_transbeam_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_transbeam_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_transbeam_profwf((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_transbeam_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_transbeam_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_transbeam_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_transbeam_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_transbeam_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_transbeam_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_transbeam_profwf(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_user_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_albmed_user_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_albmed_user_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_user_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_albmed_user_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_albmed_user_colwf((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_user_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_albmed_user_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_albmed_user_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_albmed_user_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_albmed_user_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_albmed_user_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_albmed_user_colwf(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_user_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_trnmed_user_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_trnmed_user_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_user_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_trnmed_user_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_trnmed_user_colwf((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_user_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_trnmed_user_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_trnmed_user_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_trnmed_user_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_trnmed_user_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_trnmed_user_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_trnmed_user_colwf(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_fluxes_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_albmed_fluxes_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_albmed_fluxes_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_fluxes_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_albmed_fluxes_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_albmed_fluxes_colwf((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_albmed_fluxes_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_albmed_fluxes_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_albmed_fluxes_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_albmed_fluxes_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_albmed_fluxes_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_albmed_fluxes_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_albmed_fluxes_colwf(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_fluxes_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_trnmed_fluxes_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_trnmed_fluxes_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_fluxes_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_trnmed_fluxes_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_trnmed_fluxes_colwf((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_trnmed_fluxes_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_trnmed_fluxes_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_trnmed_fluxes_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_trnmed_fluxes_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_trnmed_fluxes_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_trnmed_fluxes_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_trnmed_fluxes_colwf(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_transbeam_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_transbeam_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_transbeam_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_transbeam_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_transbeam_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_transbeam_colwf((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_transbeam_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_transbeam_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_transbeam_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_transbeam_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_transbeam_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_transbeam_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_transbeam_colwf(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_transterm_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_planetary_transterm_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_planetary_transterm_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_transterm_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_planetary_transterm_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_planetary_transterm_profwf((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_transterm_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_planetary_transterm_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_planetary_transterm_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_planetary_transterm_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_planetary_transterm_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_planetary_transterm_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_planetary_transterm_profwf(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_sbterm_profwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_planetary_sbterm_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_planetary_sbterm_profwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_sbterm_profwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_planetary_sbterm_profwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_planetary_sbterm_profwf((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_sbterm_profwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_planetary_sbterm_profwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_planetary_sbterm_profwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_planetary_sbterm_profwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_planetary_sbterm_profwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_planetary_sbterm_profwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_planetary_sbterm_profwf(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_transterm_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_planetary_transterm_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_planetary_transterm_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_transterm_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_planetary_transterm_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_planetary_transterm_colwf((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_transterm_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_planetary_transterm_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_planetary_transterm_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_planetary_transterm_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_planetary_transterm_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_planetary_transterm_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_planetary_transterm_colwf(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_sbterm_colwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_planetary_sbterm_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_planetary_sbterm_colwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_sbterm_colwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_planetary_sbterm_colwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_planetary_sbterm_colwf((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_planetary_sbterm_colwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_planetary_sbterm_colwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_planetary_sbterm_colwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_planetary_sbterm_colwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_planetary_sbterm_colwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_planetary_sbterm_colwf() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_planetary_sbterm_colwf(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lc_lostrans__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lc_lostrans" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_lc_lostrans();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lc_lostrans__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lc_lostrans" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lc_lostrans((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lc_lostrans(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_lc_lostrans",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_lc_lostrans__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_lc_lostrans__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_lc_lostrans'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_lc_lostrans() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_lc_lostrans(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lc_layer_mssts__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lc_layer_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_lc_layer_mssts();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lc_layer_mssts__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lc_layer_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lc_layer_mssts((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lc_layer_mssts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_lc_layer_mssts",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_lc_layer_mssts__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_lc_layer_mssts__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_lc_layer_mssts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_lc_layer_mssts() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_lc_layer_mssts(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lc_surf_mssts__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lc_surf_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_lc_surf_mssts();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lc_surf_mssts__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lc_surf_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lc_surf_mssts((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lc_surf_mssts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_lc_surf_mssts",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_lc_surf_mssts__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_lc_surf_mssts__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_lc_surf_mssts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_lc_surf_mssts() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_lc_surf_mssts(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lp_lostrans__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lp_lostrans" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_lp_lostrans();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lp_lostrans__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lp_lostrans" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lp_lostrans((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lp_lostrans(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_lp_lostrans",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_lp_lostrans__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_lp_lostrans__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_lp_lostrans'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_lp_lostrans() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_lp_lostrans(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lp_layer_mssts__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lp_layer_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_lp_layer_mssts();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lp_layer_mssts__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lp_layer_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lp_layer_mssts((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lp_layer_mssts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_lp_layer_mssts",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_lp_layer_mssts__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_lp_layer_mssts__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_lp_layer_mssts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_lp_layer_mssts() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_lp_layer_mssts(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lp_surf_mssts__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lp_surf_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linatmos const *)arg1)->ts_lp_surf_mssts();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lp_surf_mssts__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_ts_lp_surf_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lp_surf_mssts((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_ts_lp_surf_mssts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_ts_lp_surf_mssts",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linatmos_ts_lp_surf_mssts__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linatmos_ts_lp_surf_mssts__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linatmos_ts_lp_surf_mssts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linatmos::ts_lp_surf_mssts() const\n"
    "    FullPhysics::Lidort_Linatmos::ts_lp_surf_mssts(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linatmos_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linatmos *arg1 = (FullPhysics::Lidort_Linatmos *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Linatmos_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linatmos_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linatmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linatmos_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linatmos_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Linatmos const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Linatmos_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Linatmos, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Linatmos_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Linsurf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Linsurf *)new FullPhysics::Lidort_Linsurf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsurf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsurf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsurf *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Linsurf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Linsurf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Linsurf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsurf *)new FullPhysics::Lidort_Linsurf((FullPhysics::Lidort_Linsurf const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsurf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsurf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Linsurf",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Linsurf__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Linsurf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Linsurf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsurf::Lidort_Linsurf()\n"
    "    FullPhysics::Lidort_Linsurf::Lidort_Linsurf(FullPhysics::Lidort_Linsurf const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Linsurf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Linsurf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_surfacewf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_surfacewf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsurf const *)arg1)->ts_surfacewf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_surfacewf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_surfacewf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_surfacewf((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_surfacewf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsurf_ts_surfacewf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsurf_ts_surfacewf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsurf_ts_surfacewf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsurf_ts_surfacewf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsurf::ts_surfacewf() const\n"
    "    FullPhysics::Lidort_Linsurf::ts_surfacewf(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_meani_diffuse_surfwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_meani_diffuse_surfwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsurf const *)arg1)->ts_meani_diffuse_surfwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_meani_diffuse_surfwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_meani_diffuse_surfwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_meani_diffuse_surfwf((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_meani_diffuse_surfwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsurf_ts_meani_diffuse_surfwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsurf_ts_meani_diffuse_surfwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsurf_ts_meani_diffuse_surfwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsurf_ts_meani_diffuse_surfwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsurf::ts_meani_diffuse_surfwf() const\n"
    "    FullPhysics::Lidort_Linsurf::ts_meani_diffuse_surfwf(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_flux_diffuse_surfwf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_flux_diffuse_surfwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsurf const *)arg1)->ts_flux_diffuse_surfwf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_flux_diffuse_surfwf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_flux_diffuse_surfwf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_flux_diffuse_surfwf((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_flux_diffuse_surfwf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsurf_ts_flux_diffuse_surfwf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsurf_ts_flux_diffuse_surfwf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsurf_ts_flux_diffuse_surfwf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsurf_ts_flux_diffuse_surfwf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsurf::ts_flux_diffuse_surfwf() const\n"
    "    FullPhysics::Lidort_Linsurf::ts_flux_diffuse_surfwf(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_sbbwfs_jacobians__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_sbbwfs_jacobians" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linsurf const *)arg1)->ts_sbbwfs_jacobians();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_sbbwfs_jacobians__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_sbbwfs_jacobians" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_sbbwfs_jacobians((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_sbbwfs_jacobians(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsurf_ts_sbbwfs_jacobians",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsurf_ts_sbbwfs_jacobians__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsurf_ts_sbbwfs_jacobians__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsurf_ts_sbbwfs_jacobians'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsurf::ts_sbbwfs_jacobians() const\n"
    "    FullPhysics::Lidort_Linsurf::ts_sbbwfs_jacobians(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_sbbwfs_fluxes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_sbbwfs_fluxes" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linsurf const *)arg1)->ts_sbbwfs_fluxes();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_sbbwfs_fluxes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_sbbwfs_fluxes" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_sbbwfs_fluxes((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_sbbwfs_fluxes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsurf_ts_sbbwfs_fluxes",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsurf_ts_sbbwfs_fluxes__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsurf_ts_sbbwfs_fluxes__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsurf_ts_sbbwfs_fluxes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsurf::ts_sbbwfs_fluxes() const\n"
    "    FullPhysics::Lidort_Linsurf::ts_sbbwfs_fluxes(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_ls_layer_mssts__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_ls_layer_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linsurf const *)arg1)->ts_ls_layer_mssts();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_ls_layer_mssts__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_ls_layer_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_ls_layer_mssts((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_ls_layer_mssts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsurf_ts_ls_layer_mssts",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsurf_ts_ls_layer_mssts__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsurf_ts_ls_layer_mssts__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsurf_ts_ls_layer_mssts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsurf::ts_ls_layer_mssts() const\n"
    "    FullPhysics::Lidort_Linsurf::ts_ls_layer_mssts(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_ls_surf_mssts__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_ls_surf_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linsurf const *)arg1)->ts_ls_surf_mssts();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_ls_surf_mssts__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_ts_ls_surf_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_ls_surf_mssts((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_ts_ls_surf_mssts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsurf_ts_ls_surf_mssts",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsurf_ts_ls_surf_mssts__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsurf_ts_ls_surf_mssts__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsurf_ts_ls_surf_mssts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsurf::ts_ls_surf_mssts() const\n"
    "    FullPhysics::Lidort_Linsurf::ts_ls_surf_mssts(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsurf_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsurf *arg1 = (FullPhysics::Lidort_Linsurf *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Linsurf_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsurf_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsurf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsurf_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsurf_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Linsurf const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Linsurf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Linsurf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Linsurf_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Linoutputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linoutputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Linoutputs *)new FullPhysics::Lidort_Linoutputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linoutputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linoutputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linoutputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linoutputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Linoutputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Linoutputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Linoutputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Linoutputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Linoutputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linoutputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linoutputs *)new FullPhysics::Lidort_Linoutputs((FullPhysics::Lidort_Linoutputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linoutputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linoutputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Linoutputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Linoutputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Linoutputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Linoutputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linoutputs::Lidort_Linoutputs()\n"
    "    FullPhysics::Lidort_Linoutputs::Lidort_Linoutputs(FullPhysics::Lidort_Linoutputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Linoutputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linoutputs *arg1 = (FullPhysics::Lidort_Linoutputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linoutputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Linoutputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Linoutputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linoutputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linoutputs_atmos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linoutputs *arg1 = (FullPhysics::Lidort_Linoutputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linatmos *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linoutputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linoutputs_atmos" "', argument " "1"" of type '" "FullPhysics::Lidort_Linoutputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linoutputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linatmos *) &((FullPhysics::Lidort_Linoutputs const *)arg1)->atmos();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linatmos, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linoutputs_atmos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linoutputs *arg1 = (FullPhysics::Lidort_Linoutputs *) 0 ;
  FullPhysics::Lidort_Linatmos *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linoutputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linoutputs_atmos" "', argument " "1"" of type '" "FullPhysics::Lidort_Linoutputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linoutputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Linatmos,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linoutputs_atmos" "', argument " "2"" of type '" "FullPhysics::Lidort_Linatmos &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linoutputs_atmos" "', argument " "2"" of type '" "FullPhysics::Lidort_Linatmos &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Linatmos * >(argp2);
  {
    try {
      (arg1)->atmos(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linoutputs_atmos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linoutputs_atmos",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linoutputs_atmos__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linoutputs_atmos__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linoutputs_atmos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linoutputs::atmos() const\n"
    "    FullPhysics::Lidort_Linoutputs::atmos(FullPhysics::Lidort_Linatmos &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linoutputs_surf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linoutputs *arg1 = (FullPhysics::Lidort_Linoutputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsurf *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linoutputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linoutputs_surf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linoutputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linoutputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsurf *) &((FullPhysics::Lidort_Linoutputs const *)arg1)->surf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsurf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linoutputs_surf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linoutputs *arg1 = (FullPhysics::Lidort_Linoutputs *) 0 ;
  FullPhysics::Lidort_Linsurf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linoutputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linoutputs_surf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linoutputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linoutputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Linsurf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linoutputs_surf" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsurf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linoutputs_surf" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsurf &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Linsurf * >(argp2);
  {
    try {
      (arg1)->surf(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linoutputs_surf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linoutputs_surf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linoutputs_surf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linoutputs_surf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linoutputs_surf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linoutputs::surf() const\n"
    "    FullPhysics::Lidort_Linoutputs::surf(FullPhysics::Lidort_Linsurf &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linoutputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linoutputs *arg1 = (FullPhysics::Lidort_Linoutputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Linoutputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linoutputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linoutputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linoutputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linoutputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linoutputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linoutputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Linoutputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Linoutputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Linoutputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Linoutputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Brdf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Brdf *)new FullPhysics::Lidort_Linsup_Brdf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Brdf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Brdf *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Linsup_Brdf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Linsup_Brdf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Brdf *)new FullPhysics::Lidort_Linsup_Brdf((FullPhysics::Lidort_Linsup_Brdf const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Brdf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Linsup_Brdf",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Linsup_Brdf__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Linsup_Brdf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Linsup_Brdf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Brdf::Lidort_Linsup_Brdf()\n"
    "    FullPhysics::Lidort_Linsup_Brdf::Lidort_Linsup_Brdf(FullPhysics::Lidort_Linsup_Brdf const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Linsup_Brdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Linsup_Brdf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsup_Brdf const *)arg1)->ts_ls_exactdb_brdfunc();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_ls_exactdb_brdfunc((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_exactdb_brdfunc() const\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_exactdb_brdfunc(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsup_Brdf const *)arg1)->ts_ls_brdf_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_ls_brdf_f_0((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Brdf_ts_ls_brdf_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Brdf_ts_ls_brdf_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_brdf_f_0() const\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_brdf_f_0(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_brdf_f" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsup_Brdf const *)arg1)->ts_ls_brdf_f();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_brdf_f" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_ls_brdf_f((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Brdf_ts_ls_brdf_f",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Brdf_ts_ls_brdf_f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_brdf_f() const\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_brdf_f(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsup_Brdf const *)arg1)->ts_ls_user_brdf_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_ls_user_brdf_f_0((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_user_brdf_f_0() const\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_user_brdf_f_0(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_user_brdf_f" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsup_Brdf const *)arg1)->ts_ls_user_brdf_f();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_user_brdf_f" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_ls_user_brdf_f((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Brdf_ts_ls_user_brdf_f",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Brdf_ts_ls_user_brdf_f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_user_brdf_f() const\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_user_brdf_f(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_emissivity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_emissivity" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linsup_Brdf const *)arg1)->ts_ls_emissivity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_emissivity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_emissivity" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_ls_emissivity((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_emissivity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Brdf_ts_ls_emissivity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_emissivity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_emissivity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Brdf_ts_ls_emissivity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_emissivity() const\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_emissivity(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_user_emissivity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_user_emissivity" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linsup_Brdf const *)arg1)->ts_ls_user_emissivity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_user_emissivity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_ts_ls_user_emissivity" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_ls_user_emissivity((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_ts_ls_user_emissivity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Brdf_ts_ls_user_emissivity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_user_emissivity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Brdf_ts_ls_user_emissivity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Brdf_ts_ls_user_emissivity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_user_emissivity() const\n"
    "    FullPhysics::Lidort_Linsup_Brdf::ts_ls_user_emissivity(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Brdf_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Brdf *arg1 = (FullPhysics::Lidort_Linsup_Brdf *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Brdf_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Brdf_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Brdf_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Brdf_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Linsup_Brdf const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Linsup_Brdf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Linsup_Brdf_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Sleave__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Sleave *)new FullPhysics::Lidort_Linsup_Sleave();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Sleave__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Sleave *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Linsup_Sleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Linsup_Sleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Sleave *)new FullPhysics::Lidort_Linsup_Sleave((FullPhysics::Lidort_Linsup_Sleave const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Sleave(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Linsup_Sleave",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Linsup_Sleave__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Linsup_Sleave__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Linsup_Sleave'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Sleave::Lidort_Linsup_Sleave()\n"
    "    FullPhysics::Lidort_Linsup_Sleave::Lidort_Linsup_Sleave(FullPhysics::Lidort_Linsup_Sleave const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Linsup_Sleave(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = (FullPhysics::Lidort_Linsup_Sleave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Linsup_Sleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = (FullPhysics::Lidort_Linsup_Sleave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Linsup_Sleave const *)arg1)->ts_lssl_slterm_isotropic();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = (FullPhysics::Lidort_Linsup_Sleave *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lssl_slterm_isotropic((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Sleave::ts_lssl_slterm_isotropic() const\n"
    "    FullPhysics::Lidort_Linsup_Sleave::ts_lssl_slterm_isotropic(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_userangles__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = (FullPhysics::Lidort_Linsup_Sleave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Sleave_ts_lssl_slterm_userangles" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsup_Sleave const *)arg1)->ts_lssl_slterm_userangles();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_userangles__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = (FullPhysics::Lidort_Linsup_Sleave *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Sleave_ts_lssl_slterm_userangles" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lssl_slterm_userangles((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_userangles(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Sleave_ts_lssl_slterm_userangles",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_userangles__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_userangles__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Sleave_ts_lssl_slterm_userangles'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Sleave::ts_lssl_slterm_userangles() const\n"
    "    FullPhysics::Lidort_Linsup_Sleave::ts_lssl_slterm_userangles(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = (FullPhysics::Lidort_Linsup_Sleave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Sleave_ts_lssl_slterm_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsup_Sleave const *)arg1)->ts_lssl_slterm_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = (FullPhysics::Lidort_Linsup_Sleave *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Sleave_ts_lssl_slterm_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lssl_slterm_f_0((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Sleave_ts_lssl_slterm_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Sleave_ts_lssl_slterm_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Sleave::ts_lssl_slterm_f_0() const\n"
    "    FullPhysics::Lidort_Linsup_Sleave::ts_lssl_slterm_f_0(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = (FullPhysics::Lidort_Linsup_Sleave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsup_Sleave const *)arg1)->ts_lssl_user_slterm_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = (FullPhysics::Lidort_Linsup_Sleave *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lssl_user_slterm_f_0((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Sleave::ts_lssl_user_slterm_f_0() const\n"
    "    FullPhysics::Lidort_Linsup_Sleave::ts_lssl_user_slterm_f_0(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Sleave_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Sleave *arg1 = (FullPhysics::Lidort_Linsup_Sleave *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Sleave_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Sleave_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Sleave const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Sleave_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Sleave_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Linsup_Sleave const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Linsup_Sleave_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Linsup_Sleave_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Ss_Atmos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Ss_Atmos *)new FullPhysics::Lidort_Linsup_Ss_Atmos();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Ss_Atmos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Ss_Atmos *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Linsup_Ss_Atmos" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Linsup_Ss_Atmos" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Ss_Atmos *)new FullPhysics::Lidort_Linsup_Ss_Atmos((FullPhysics::Lidort_Linsup_Ss_Atmos const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Ss_Atmos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Linsup_Ss_Atmos",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Linsup_Ss_Atmos__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Linsup_Ss_Atmos__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Linsup_Ss_Atmos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Ss_Atmos::Lidort_Linsup_Ss_Atmos()\n"
    "    FullPhysics::Lidort_Linsup_Ss_Atmos::Lidort_Linsup_Ss_Atmos(FullPhysics::Lidort_Linsup_Ss_Atmos const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Linsup_Ss_Atmos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = (FullPhysics::Lidort_Linsup_Ss_Atmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Linsup_Ss_Atmos" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_ss__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = (FullPhysics::Lidort_Linsup_Ss_Atmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Atmos_ts_columnwf_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsup_Ss_Atmos const *)arg1)->ts_columnwf_ss();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_ss__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = (FullPhysics::Lidort_Linsup_Ss_Atmos *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Atmos_ts_columnwf_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_columnwf_ss((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_ss(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Ss_Atmos_ts_columnwf_ss",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_ss__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_ss__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Ss_Atmos_ts_columnwf_ss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Ss_Atmos::ts_columnwf_ss() const\n"
    "    FullPhysics::Lidort_Linsup_Ss_Atmos::ts_columnwf_ss(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_db__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = (FullPhysics::Lidort_Linsup_Ss_Atmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Atmos_ts_columnwf_db" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linsup_Ss_Atmos const *)arg1)->ts_columnwf_db();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_db__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = (FullPhysics::Lidort_Linsup_Ss_Atmos *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Atmos_ts_columnwf_db" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_columnwf_db((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_db(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Ss_Atmos_ts_columnwf_db",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_db__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_db__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Ss_Atmos_ts_columnwf_db'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Ss_Atmos::ts_columnwf_db() const\n"
    "    FullPhysics::Lidort_Linsup_Ss_Atmos::ts_columnwf_db(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_ss__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = (FullPhysics::Lidort_Linsup_Ss_Atmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,5 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Atmos_ts_profilewf_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,5 > *) &((FullPhysics::Lidort_Linsup_Ss_Atmos const *)arg1)->ts_profilewf_ss();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_blitz__ArrayT_double_5_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_ss__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = (FullPhysics::Lidort_Linsup_Ss_Atmos *) 0 ;
  blitz::Array< double,5 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Atmos_ts_profilewf_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_blitz__ArrayT_double_5_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Ss_Atmos_ts_profilewf_ss" "', argument " "2"" of type '" "blitz::Array< double,5 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Ss_Atmos_ts_profilewf_ss" "', argument " "2"" of type '" "blitz::Array< double,5 > const &""'"); 
  }
  arg2 = reinterpret_cast< blitz::Array< double,5 > * >(argp2);
  {
    try {
      (arg1)->ts_profilewf_ss((blitz::Array< double,5 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_ss(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Ss_Atmos_ts_profilewf_ss",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_ss__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_ss__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Ss_Atmos_ts_profilewf_ss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Ss_Atmos::ts_profilewf_ss() const\n"
    "    FullPhysics::Lidort_Linsup_Ss_Atmos::ts_profilewf_ss(blitz::Array< double,5 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_db__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = (FullPhysics::Lidort_Linsup_Ss_Atmos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Atmos_ts_profilewf_db" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  {
    try {
      result = (blitz::Array< double,4 > *) &((FullPhysics::Lidort_Linsup_Ss_Atmos const *)arg1)->ts_profilewf_db();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[4], stride[4];
    for(int i = 0; i < 4; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 4, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 4>* t = new blitz::Array<double, 4>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_4_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_db__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = (FullPhysics::Lidort_Linsup_Ss_Atmos *) 0 ;
  blitz::Array< double,4 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,4 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Atmos_ts_profilewf_db" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_4_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 4>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_profilewf_db((blitz::Array< double,4 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_db(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Ss_Atmos_ts_profilewf_db",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_db__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_db__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Ss_Atmos_ts_profilewf_db'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Ss_Atmos::ts_profilewf_db() const\n"
    "    FullPhysics::Lidort_Linsup_Ss_Atmos::ts_profilewf_db(blitz::Array< double,4 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Atmos_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg1 = (FullPhysics::Lidort_Linsup_Ss_Atmos *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Ss_Atmos_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Atmos_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Ss_Atmos_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Ss_Atmos_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Linsup_Ss_Atmos const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Linsup_Ss_Atmos_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Linsup_Ss_Atmos_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Ss_Surf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Surf *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Ss_Surf *)new FullPhysics::Lidort_Linsup_Ss_Surf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Ss_Surf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Surf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Ss_Surf *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Linsup_Ss_Surf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Surf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Linsup_Ss_Surf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Surf const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Surf * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Ss_Surf *)new FullPhysics::Lidort_Linsup_Ss_Surf((FullPhysics::Lidort_Linsup_Ss_Surf const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Ss_Surf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Linsup_Ss_Surf",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Linsup_Ss_Surf__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Linsup_Ss_Surf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Linsup_Ss_Surf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Ss_Surf::Lidort_Linsup_Ss_Surf()\n"
    "    FullPhysics::Lidort_Linsup_Ss_Surf::Lidort_Linsup_Ss_Surf(FullPhysics::Lidort_Linsup_Ss_Surf const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Linsup_Ss_Surf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Surf *arg1 = (FullPhysics::Lidort_Linsup_Ss_Surf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Linsup_Ss_Surf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Surf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Surf * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Surf_ts_surfacewf_db__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Surf *arg1 = (FullPhysics::Lidort_Linsup_Ss_Surf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Surf_ts_surfacewf_db" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Surf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Surf * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Linsup_Ss_Surf const *)arg1)->ts_surfacewf_db();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Surf_ts_surfacewf_db__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Surf *arg1 = (FullPhysics::Lidort_Linsup_Ss_Surf *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Surf_ts_surfacewf_db" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Surf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Surf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_surfacewf_db((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Surf_ts_surfacewf_db(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Ss_Surf_ts_surfacewf_db",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Ss_Surf_ts_surfacewf_db__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Ss_Surf_ts_surfacewf_db__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Ss_Surf_ts_surfacewf_db'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Ss_Surf::ts_surfacewf_db() const\n"
    "    FullPhysics::Lidort_Linsup_Ss_Surf::ts_surfacewf_db(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_Surf_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss_Surf *arg1 = (FullPhysics::Lidort_Linsup_Ss_Surf *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Ss_Surf_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_Surf_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss_Surf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Surf * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Ss_Surf_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Ss_Surf_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Linsup_Ss_Surf const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Linsup_Ss_Surf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Linsup_Ss_Surf_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Ss__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Ss *)new FullPhysics::Lidort_Linsup_Ss();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Ss__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Ss *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Linsup_Ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Linsup_Ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Ss *)new FullPhysics::Lidort_Linsup_Ss((FullPhysics::Lidort_Linsup_Ss const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Ss(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Linsup_Ss",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Linsup_Ss__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Linsup_Ss__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Linsup_Ss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Ss::Lidort_Linsup_Ss()\n"
    "    FullPhysics::Lidort_Linsup_Ss::Lidort_Linsup_Ss(FullPhysics::Lidort_Linsup_Ss const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Linsup_Ss(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss *arg1 = (FullPhysics::Lidort_Linsup_Ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Linsup_Ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_atmos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss *arg1 = (FullPhysics::Lidort_Linsup_Ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Ss_Atmos *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_atmos" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Ss_Atmos *) &((FullPhysics::Lidort_Linsup_Ss const *)arg1)->atmos();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_atmos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss *arg1 = (FullPhysics::Lidort_Linsup_Ss *) 0 ;
  FullPhysics::Lidort_Linsup_Ss_Atmos *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_atmos" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Atmos,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Ss_atmos" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Ss_atmos" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsup_Ss_Atmos &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Atmos * >(argp2);
  {
    try {
      (arg1)->atmos(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_atmos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Ss_atmos",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Ss_atmos__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Ss_atmos__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Ss_atmos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Ss::atmos() const\n"
    "    FullPhysics::Lidort_Linsup_Ss::atmos(FullPhysics::Lidort_Linsup_Ss_Atmos &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_surf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss *arg1 = (FullPhysics::Lidort_Linsup_Ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Ss_Surf *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_surf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Ss_Surf *) &((FullPhysics::Lidort_Linsup_Ss const *)arg1)->surf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_surf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss *arg1 = (FullPhysics::Lidort_Linsup_Ss *) 0 ;
  FullPhysics::Lidort_Linsup_Ss_Surf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_surf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss_Surf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Ss_surf" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsup_Ss_Surf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Ss_surf" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsup_Ss_Surf &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss_Surf * >(argp2);
  {
    try {
      (arg1)->surf(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_surf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Ss_surf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Ss_surf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Ss_surf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Ss_surf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Ss::surf() const\n"
    "    FullPhysics::Lidort_Linsup_Ss::surf(FullPhysics::Lidort_Linsup_Ss_Surf &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Ss_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Ss *arg1 = (FullPhysics::Lidort_Linsup_Ss *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Ss_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Ss_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Ss const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Ss_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Ss_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Linsup_Ss const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Linsup_Ss_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Linsup_Ss_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Inout__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Inout *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Inout *)new FullPhysics::Lidort_Linsup_Inout();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Inout__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Inout *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Inout *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Linsup_Inout" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Inout const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Linsup_Inout" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Inout const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Inout * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Inout *)new FullPhysics::Lidort_Linsup_Inout((FullPhysics::Lidort_Linsup_Inout const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Linsup_Inout(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Linsup_Inout",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Linsup_Inout__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Linsup_Inout__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Linsup_Inout'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Inout::Lidort_Linsup_Inout()\n"
    "    FullPhysics::Lidort_Linsup_Inout::Lidort_Linsup_Inout(FullPhysics::Lidort_Linsup_Inout const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Linsup_Inout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Inout *arg1 = (FullPhysics::Lidort_Linsup_Inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Linsup_Inout" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Inout *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Inout * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Inout_brdf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Inout *arg1 = (FullPhysics::Lidort_Linsup_Inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Brdf *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Inout_brdf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Inout const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Inout * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Brdf *) &((FullPhysics::Lidort_Linsup_Inout const *)arg1)->brdf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Inout_brdf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Inout *arg1 = (FullPhysics::Lidort_Linsup_Inout *) 0 ;
  FullPhysics::Lidort_Linsup_Brdf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Inout_brdf" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Inout *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Inout * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Brdf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Inout_brdf" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsup_Brdf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Inout_brdf" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsup_Brdf &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Linsup_Brdf * >(argp2);
  {
    try {
      (arg1)->brdf(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Inout_brdf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Inout_brdf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Inout_brdf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Inout_brdf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Inout_brdf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Inout::brdf() const\n"
    "    FullPhysics::Lidort_Linsup_Inout::brdf(FullPhysics::Lidort_Linsup_Brdf &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Inout_ss__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Inout *arg1 = (FullPhysics::Lidort_Linsup_Inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Ss *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Inout_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Inout const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Inout * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Ss *) &((FullPhysics::Lidort_Linsup_Inout const *)arg1)->ss();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Inout_ss__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Inout *arg1 = (FullPhysics::Lidort_Linsup_Inout *) 0 ;
  FullPhysics::Lidort_Linsup_Ss *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Inout_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Inout *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Inout * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Ss,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Inout_ss" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsup_Ss &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Inout_ss" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsup_Ss &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Linsup_Ss * >(argp2);
  {
    try {
      (arg1)->ss(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Inout_ss(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Inout_ss",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Inout_ss__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Inout_ss__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Inout_ss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Inout::ss() const\n"
    "    FullPhysics::Lidort_Linsup_Inout::ss(FullPhysics::Lidort_Linsup_Ss &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Inout_sleave__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Inout *arg1 = (FullPhysics::Lidort_Linsup_Inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Linsup_Sleave *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Inout_sleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Inout const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Inout * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Linsup_Sleave *) &((FullPhysics::Lidort_Linsup_Inout const *)arg1)->sleave();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Inout_sleave__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Inout *arg1 = (FullPhysics::Lidort_Linsup_Inout *) 0 ;
  FullPhysics::Lidort_Linsup_Sleave *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Inout_sleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Inout *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Inout * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Linsup_Sleave,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Inout_sleave" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsup_Sleave &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Inout_sleave" "', argument " "2"" of type '" "FullPhysics::Lidort_Linsup_Sleave &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Linsup_Sleave * >(argp2);
  {
    try {
      (arg1)->sleave(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Inout_sleave(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Inout_sleave",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Linsup_Inout_sleave__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Linsup_Inout_sleave__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Linsup_Inout_sleave'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Linsup_Inout::sleave() const\n"
    "    FullPhysics::Lidort_Linsup_Inout::sleave(FullPhysics::Lidort_Linsup_Sleave &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Linsup_Inout_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Linsup_Inout *arg1 = (FullPhysics::Lidort_Linsup_Inout *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Linsup_Inout_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Linsup_Inout_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Linsup_Inout const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Linsup_Inout * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Linsup_Inout_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Linsup_Inout_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Linsup_Inout const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Linsup_Inout_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Linsup_Inout, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Linsup_Inout_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Main_Outputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Main_Outputs *)new FullPhysics::Lidort_Main_Outputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Main_Outputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Main_Outputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Main_Outputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Main_Outputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Main_Outputs *)new FullPhysics::Lidort_Main_Outputs((FullPhysics::Lidort_Main_Outputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Main_Outputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Main_Outputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Main_Outputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Main_Outputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Main_Outputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::Lidort_Main_Outputs()\n"
    "    FullPhysics::Lidort_Main_Outputs::Lidort_Main_Outputs(FullPhysics::Lidort_Main_Outputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Main_Outputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Main_Outputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_intensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_intensity" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_intensity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_intensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_intensity" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_intensity((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_intensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_intensity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_intensity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_intensity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_intensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_intensity() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_intensity(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_meani_diffuse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_meani_diffuse" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_meani_diffuse();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_meani_diffuse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_meani_diffuse" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_meani_diffuse((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_meani_diffuse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_meani_diffuse",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_meani_diffuse__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_meani_diffuse__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_meani_diffuse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_meani_diffuse() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_meani_diffuse(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_flux_diffuse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_flux_diffuse" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_flux_diffuse();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_flux_diffuse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_flux_diffuse" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_flux_diffuse((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_flux_diffuse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_flux_diffuse",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_flux_diffuse__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_flux_diffuse__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_flux_diffuse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_flux_diffuse() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_flux_diffuse(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_dnmeani_direct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_dnmeani_direct" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_dnmeani_direct();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_dnmeani_direct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_dnmeani_direct" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_dnmeani_direct((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_dnmeani_direct(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_dnmeani_direct",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_dnmeani_direct__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_dnmeani_direct__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_dnmeani_direct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_dnmeani_direct() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_dnmeani_direct(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_dnflux_direct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_dnflux_direct" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_dnflux_direct();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_dnflux_direct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_dnflux_direct" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_dnflux_direct((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_dnflux_direct(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_dnflux_direct",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_dnflux_direct__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_dnflux_direct__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_dnflux_direct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_dnflux_direct() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_dnflux_direct(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_albmed_user__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_albmed_user" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_albmed_user();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_albmed_user__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_albmed_user" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_albmed_user((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_albmed_user(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_albmed_user",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_albmed_user__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_albmed_user__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_albmed_user'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_albmed_user() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_albmed_user(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trnmed_user__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_trnmed_user" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_trnmed_user();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trnmed_user__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_trnmed_user" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_trnmed_user((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trnmed_user(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_trnmed_user",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_trnmed_user__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_trnmed_user__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_trnmed_user'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_trnmed_user() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_trnmed_user(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_albmed_fluxes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_albmed_fluxes" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_albmed_fluxes();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_albmed_fluxes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_albmed_fluxes" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_albmed_fluxes((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_albmed_fluxes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_albmed_fluxes",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_albmed_fluxes__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_albmed_fluxes__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_albmed_fluxes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_albmed_fluxes() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_albmed_fluxes(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trnmed_fluxes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_trnmed_fluxes" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_trnmed_fluxes();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trnmed_fluxes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_trnmed_fluxes" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_trnmed_fluxes((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trnmed_fluxes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_trnmed_fluxes",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_trnmed_fluxes__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_trnmed_fluxes__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_trnmed_fluxes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_trnmed_fluxes() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_trnmed_fluxes(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_planetary_transterm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_planetary_transterm" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_planetary_transterm();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_planetary_transterm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_planetary_transterm" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_planetary_transterm((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_planetary_transterm(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_planetary_transterm",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_planetary_transterm__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_planetary_transterm__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_planetary_transterm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_planetary_transterm() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_planetary_transterm(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_planetary_sbterm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_planetary_sbterm" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_planetary_sbterm();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_planetary_sbterm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_planetary_sbterm" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Main_Outputs_ts_planetary_sbterm" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_planetary_sbterm((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_planetary_sbterm(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_planetary_sbterm",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_planetary_sbterm__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_planetary_sbterm__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_planetary_sbterm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_planetary_sbterm() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_planetary_sbterm(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_pathgeoms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_pathgeoms" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_pathgeoms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_pathgeoms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_pathgeoms" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_pathgeoms((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_pathgeoms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_pathgeoms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_pathgeoms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_pathgeoms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_pathgeoms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_pathgeoms() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_pathgeoms(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_lostrans__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_lostrans" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_lostrans();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_lostrans__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_lostrans" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_lostrans((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_lostrans(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_lostrans",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_lostrans__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_lostrans__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_lostrans'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_lostrans() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_lostrans(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_layer_mssts__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_layer_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_layer_mssts();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_layer_mssts__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_layer_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_layer_mssts((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_layer_mssts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_layer_mssts",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_layer_mssts__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_layer_mssts__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_layer_mssts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_layer_mssts() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_layer_mssts(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_surf_mssts__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_surf_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_surf_mssts();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_surf_mssts__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_surf_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_surf_mssts((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_surf_mssts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_surf_mssts",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_surf_mssts__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_surf_mssts__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_surf_mssts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_surf_mssts() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_surf_mssts(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_contribs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_contribs" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_contribs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_contribs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_contribs" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_contribs((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_contribs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_contribs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_contribs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_contribs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_contribs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_contribs() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_contribs(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_fourier_saved__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_fourier_saved" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< int,1 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_fourier_saved();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(int);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<int>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<int, 1>* t = new blitz::Array<int, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_int_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_fourier_saved__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< int,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_fourier_saved" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_int_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<int>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<int, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_fourier_saved((blitz::Array< int,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_fourier_saved(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_fourier_saved",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_fourier_saved__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_fourier_saved__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_fourier_saved'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_fourier_saved() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_fourier_saved(blitz::Array< int,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_n_geometries__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_n_geometries" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_n_geometries();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_n_geometries__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_n_geometries" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Main_Outputs_ts_n_geometries" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_n_geometries((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_n_geometries(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_n_geometries",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_n_geometries__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_n_geometries__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_n_geometries'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_n_geometries() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_n_geometries(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_solarbeam_boatrans__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_solarbeam_boatrans" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_solarbeam_boatrans();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_solarbeam_boatrans__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_solarbeam_boatrans" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_solarbeam_boatrans((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_solarbeam_boatrans(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_solarbeam_boatrans",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_solarbeam_boatrans__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_solarbeam_boatrans__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_solarbeam_boatrans'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_solarbeam_boatrans() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_solarbeam_boatrans(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_spheralb__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_spheralb" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_spheralb();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_spheralb__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_spheralb" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Main_Outputs_ts_spheralb" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_spheralb((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_spheralb(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_spheralb",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_spheralb__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_spheralb__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_spheralb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_spheralb() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_spheralb(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trans1_user__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_trans1_user" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_trans1_user();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trans1_user__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_trans1_user" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_trans1_user((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trans1_user(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_trans1_user",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_trans1_user__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_trans1_user__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_trans1_user'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_trans1_user() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_trans1_user(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trans1_beam__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_trans1_beam" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Main_Outputs const *)arg1)->ts_trans1_beam();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trans1_beam__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_ts_trans1_beam" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_trans1_beam((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_ts_trans1_beam(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_ts_trans1_beam",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Main_Outputs_ts_trans1_beam__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Main_Outputs_ts_trans1_beam__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Main_Outputs_ts_trans1_beam'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_trans1_beam() const\n"
    "    FullPhysics::Lidort_Main_Outputs::ts_trans1_beam(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Main_Outputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Main_Outputs *arg1 = (FullPhysics::Lidort_Main_Outputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Main_Outputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Main_Outputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Main_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Main_Outputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Main_Outputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Main_Outputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Main_Outputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Main_Outputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Wladjusted_Outputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Wladjusted_Outputs *)new FullPhysics::Lidort_Wladjusted_Outputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Wladjusted_Outputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Wladjusted_Outputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Wladjusted_Outputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Wladjusted_Outputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Wladjusted_Outputs *)new FullPhysics::Lidort_Wladjusted_Outputs((FullPhysics::Lidort_Wladjusted_Outputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Wladjusted_Outputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Wladjusted_Outputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Wladjusted_Outputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Wladjusted_Outputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Wladjusted_Outputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Wladjusted_Outputs::Lidort_Wladjusted_Outputs()\n"
    "    FullPhysics::Lidort_Wladjusted_Outputs::Lidort_Wladjusted_Outputs(FullPhysics::Lidort_Wladjusted_Outputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Wladjusted_Outputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = (FullPhysics::Lidort_Wladjusted_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Wladjusted_Outputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = (FullPhysics::Lidort_Wladjusted_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Wladjusted_Outputs const *)arg1)->ts_wladjusted_isotropic();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = (FullPhysics::Lidort_Wladjusted_Outputs *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_wladjusted_isotropic((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_isotropic() const\n"
    "    FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_isotropic(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_direct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = (FullPhysics::Lidort_Wladjusted_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Wladjusted_Outputs_ts_wladjusted_direct" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Wladjusted_Outputs const *)arg1)->ts_wladjusted_direct();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_direct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = (FullPhysics::Lidort_Wladjusted_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Wladjusted_Outputs_ts_wladjusted_direct" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_wladjusted_direct((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_direct(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Wladjusted_Outputs_ts_wladjusted_direct",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_direct__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_direct__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Wladjusted_Outputs_ts_wladjusted_direct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_direct() const\n"
    "    FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_direct(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = (FullPhysics::Lidort_Wladjusted_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Wladjusted_Outputs const *)arg1)->ts_wladjusted_f_ords_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = (FullPhysics::Lidort_Wladjusted_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_wladjusted_f_ords_0((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_f_ords_0() const\n"
    "    FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_f_ords_0(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = (FullPhysics::Lidort_Wladjusted_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Wladjusted_Outputs const *)arg1)->ts_wladjusted_f_user_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = (FullPhysics::Lidort_Wladjusted_Outputs *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_wladjusted_f_user_0((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_f_user_0() const\n"
    "    FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_f_user_0(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Wladjusted_Outputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Wladjusted_Outputs *arg1 = (FullPhysics::Lidort_Wladjusted_Outputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Wladjusted_Outputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Wladjusted_Outputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Wladjusted_Outputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Wladjusted_Outputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Wladjusted_Outputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Wladjusted_Outputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Wladjusted_Outputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Exception_Handling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Exception_Handling *)new FullPhysics::Lidort_Exception_Handling();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Exception_Handling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Exception_Handling *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Exception_Handling *)new FullPhysics::Lidort_Exception_Handling((FullPhysics::Lidort_Exception_Handling const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Exception_Handling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Exception_Handling",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Exception_Handling__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Exception_Handling__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Exception_Handling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Exception_Handling::Lidort_Exception_Handling()\n"
    "    FullPhysics::Lidort_Exception_Handling::Lidort_Exception_Handling(FullPhysics::Lidort_Exception_Handling const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Exception_Handling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_status_inputcheck__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_status_inputcheck" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Exception_Handling const *)arg1)->ts_status_inputcheck();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_status_inputcheck__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_status_inputcheck" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Exception_Handling_ts_status_inputcheck" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_status_inputcheck((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_status_inputcheck(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Exception_Handling_ts_status_inputcheck",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Exception_Handling_ts_status_inputcheck__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Exception_Handling_ts_status_inputcheck__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Exception_Handling_ts_status_inputcheck'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Exception_Handling::ts_status_inputcheck() const\n"
    "    FullPhysics::Lidort_Exception_Handling::ts_status_inputcheck(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_ncheckmessages__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_ncheckmessages" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Exception_Handling const *)arg1)->ts_ncheckmessages();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_ncheckmessages__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_ncheckmessages" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Exception_Handling_ts_ncheckmessages" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_ncheckmessages((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_ncheckmessages(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Exception_Handling_ts_ncheckmessages",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Exception_Handling_ts_ncheckmessages__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Exception_Handling_ts_ncheckmessages__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Exception_Handling_ts_ncheckmessages'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Exception_Handling::ts_ncheckmessages() const\n"
    "    FullPhysics::Lidort_Exception_Handling::ts_ncheckmessages(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_checkmessages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_checkmessages" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Exception_Handling const *)arg1)->ts_checkmessages();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_actions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_actions" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Exception_Handling const *)arg1)->ts_actions();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_status_calculation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_status_calculation" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Exception_Handling const *)arg1)->ts_status_calculation();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_status_calculation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_status_calculation" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Exception_Handling_ts_status_calculation" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_status_calculation((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_status_calculation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Exception_Handling_ts_status_calculation",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Exception_Handling_ts_status_calculation__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Exception_Handling_ts_status_calculation__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Exception_Handling_ts_status_calculation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Exception_Handling::ts_status_calculation() const\n"
    "    FullPhysics::Lidort_Exception_Handling::ts_status_calculation(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_message(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_message" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Exception_Handling const *)arg1)->ts_message();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_trace_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_trace_1" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Exception_Handling const *)arg1)->ts_trace_1();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_trace_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_trace_2" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Exception_Handling const *)arg1)->ts_trace_2();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_ts_trace_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_ts_trace_3" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Exception_Handling const *)arg1)->ts_trace_3();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Exception_Handling_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Exception_Handling *arg1 = (FullPhysics::Lidort_Exception_Handling *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Exception_Handling_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Exception_Handling_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Exception_Handling_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Exception_Handling_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Exception_Handling const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Exception_Handling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Exception_Handling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Input_Exception_Handling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Input_Exception_Handling *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Input_Exception_Handling *)new FullPhysics::Lidort_Input_Exception_Handling();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Input_Exception_Handling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Input_Exception_Handling *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Input_Exception_Handling *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Input_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Lidort_Input_Exception_Handling const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Input_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Lidort_Input_Exception_Handling const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Input_Exception_Handling * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Input_Exception_Handling *)new FullPhysics::Lidort_Input_Exception_Handling((FullPhysics::Lidort_Input_Exception_Handling const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Input_Exception_Handling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Input_Exception_Handling",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Input_Exception_Handling__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Input_Exception_Handling__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Input_Exception_Handling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Input_Exception_Handling::Lidort_Input_Exception_Handling()\n"
    "    FullPhysics::Lidort_Input_Exception_Handling::Lidort_Input_Exception_Handling(FullPhysics::Lidort_Input_Exception_Handling const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Input_Exception_Handling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Input_Exception_Handling *arg1 = (FullPhysics::Lidort_Input_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Input_Exception_Handling" "', argument " "1"" of type '" "FullPhysics::Lidort_Input_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Input_Exception_Handling * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Input_Exception_Handling_ts_status_inputread__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Input_Exception_Handling *arg1 = (FullPhysics::Lidort_Input_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Input_Exception_Handling_ts_status_inputread" "', argument " "1"" of type '" "FullPhysics::Lidort_Input_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Input_Exception_Handling * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Input_Exception_Handling const *)arg1)->ts_status_inputread();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Input_Exception_Handling_ts_status_inputread__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Input_Exception_Handling *arg1 = (FullPhysics::Lidort_Input_Exception_Handling *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Input_Exception_Handling_ts_status_inputread" "', argument " "1"" of type '" "FullPhysics::Lidort_Input_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Input_Exception_Handling * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Input_Exception_Handling_ts_status_inputread" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_status_inputread((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Input_Exception_Handling_ts_status_inputread(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Input_Exception_Handling_ts_status_inputread",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Input_Exception_Handling_ts_status_inputread__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Input_Exception_Handling_ts_status_inputread__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Input_Exception_Handling_ts_status_inputread'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Input_Exception_Handling::ts_status_inputread() const\n"
    "    FullPhysics::Lidort_Input_Exception_Handling::ts_status_inputread(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Input_Exception_Handling_ts_ninputmessages__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Input_Exception_Handling *arg1 = (FullPhysics::Lidort_Input_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Input_Exception_Handling_ts_ninputmessages" "', argument " "1"" of type '" "FullPhysics::Lidort_Input_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Input_Exception_Handling * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Input_Exception_Handling const *)arg1)->ts_ninputmessages();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Input_Exception_Handling_ts_ninputmessages__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Input_Exception_Handling *arg1 = (FullPhysics::Lidort_Input_Exception_Handling *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Input_Exception_Handling_ts_ninputmessages" "', argument " "1"" of type '" "FullPhysics::Lidort_Input_Exception_Handling *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Input_Exception_Handling * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Input_Exception_Handling_ts_ninputmessages" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_ninputmessages((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Input_Exception_Handling_ts_ninputmessages(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Input_Exception_Handling_ts_ninputmessages",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Input_Exception_Handling_ts_ninputmessages__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Input_Exception_Handling_ts_ninputmessages__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Input_Exception_Handling_ts_ninputmessages'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Input_Exception_Handling::ts_ninputmessages() const\n"
    "    FullPhysics::Lidort_Input_Exception_Handling::ts_ninputmessages(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Input_Exception_Handling_ts_inputmessages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Input_Exception_Handling *arg1 = (FullPhysics::Lidort_Input_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Input_Exception_Handling_ts_inputmessages" "', argument " "1"" of type '" "FullPhysics::Lidort_Input_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Input_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Input_Exception_Handling const *)arg1)->ts_inputmessages();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Input_Exception_Handling_ts_inputactions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Input_Exception_Handling *arg1 = (FullPhysics::Lidort_Input_Exception_Handling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Input_Exception_Handling_ts_inputactions" "', argument " "1"" of type '" "FullPhysics::Lidort_Input_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Input_Exception_Handling * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Input_Exception_Handling const *)arg1)->ts_inputactions();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Input_Exception_Handling_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Input_Exception_Handling *arg1 = (FullPhysics::Lidort_Input_Exception_Handling *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Input_Exception_Handling_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Input_Exception_Handling_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Input_Exception_Handling const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Input_Exception_Handling * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Input_Exception_Handling_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Input_Exception_Handling_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Input_Exception_Handling const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Input_Exception_Handling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Input_Exception_Handling, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Input_Exception_Handling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Outputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Outputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Outputs *)new FullPhysics::Lidort_Outputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Outputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Outputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Outputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Outputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Outputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Outputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Outputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Outputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Outputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Outputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Outputs *)new FullPhysics::Lidort_Outputs((FullPhysics::Lidort_Outputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Outputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Outputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Outputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Outputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Outputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Outputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Outputs::Lidort_Outputs()\n"
    "    FullPhysics::Lidort_Outputs::Lidort_Outputs(FullPhysics::Lidort_Outputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Outputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Outputs *arg1 = (FullPhysics::Lidort_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Outputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Outputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Outputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Outputs_main__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Outputs *arg1 = (FullPhysics::Lidort_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Main_Outputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Outputs_main" "', argument " "1"" of type '" "FullPhysics::Lidort_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Outputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Main_Outputs *) &((FullPhysics::Lidort_Outputs const *)arg1)->main();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Outputs_main__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Outputs *arg1 = (FullPhysics::Lidort_Outputs *) 0 ;
  FullPhysics::Lidort_Main_Outputs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Outputs_main" "', argument " "1"" of type '" "FullPhysics::Lidort_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Outputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Main_Outputs,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Outputs_main" "', argument " "2"" of type '" "FullPhysics::Lidort_Main_Outputs &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Outputs_main" "', argument " "2"" of type '" "FullPhysics::Lidort_Main_Outputs &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Main_Outputs * >(argp2);
  {
    try {
      (arg1)->main(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Outputs_main(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Outputs_main",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Outputs_main__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Outputs_main__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Outputs_main'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Outputs::main() const\n"
    "    FullPhysics::Lidort_Outputs::main(FullPhysics::Lidort_Main_Outputs &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Outputs_wlout__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Outputs *arg1 = (FullPhysics::Lidort_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Wladjusted_Outputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Outputs_wlout" "', argument " "1"" of type '" "FullPhysics::Lidort_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Outputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Wladjusted_Outputs *) &((FullPhysics::Lidort_Outputs const *)arg1)->wlout();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Outputs_wlout__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Outputs *arg1 = (FullPhysics::Lidort_Outputs *) 0 ;
  FullPhysics::Lidort_Wladjusted_Outputs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Outputs_wlout" "', argument " "1"" of type '" "FullPhysics::Lidort_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Outputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Wladjusted_Outputs,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Outputs_wlout" "', argument " "2"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Outputs_wlout" "', argument " "2"" of type '" "FullPhysics::Lidort_Wladjusted_Outputs &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Wladjusted_Outputs * >(argp2);
  {
    try {
      (arg1)->wlout(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Outputs_wlout(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Outputs_wlout",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Outputs_wlout__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Outputs_wlout__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Outputs_wlout'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Outputs::wlout() const\n"
    "    FullPhysics::Lidort_Outputs::wlout(FullPhysics::Lidort_Wladjusted_Outputs &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Outputs_status__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Outputs *arg1 = (FullPhysics::Lidort_Outputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Exception_Handling *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Outputs_status" "', argument " "1"" of type '" "FullPhysics::Lidort_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Outputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Exception_Handling *) &((FullPhysics::Lidort_Outputs const *)arg1)->status();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Outputs_status__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Outputs *arg1 = (FullPhysics::Lidort_Outputs *) 0 ;
  FullPhysics::Lidort_Exception_Handling *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Outputs_status" "', argument " "1"" of type '" "FullPhysics::Lidort_Outputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Outputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Exception_Handling,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Outputs_status" "', argument " "2"" of type '" "FullPhysics::Lidort_Exception_Handling &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Outputs_status" "', argument " "2"" of type '" "FullPhysics::Lidort_Exception_Handling &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Exception_Handling * >(argp2);
  {
    try {
      (arg1)->status(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Outputs_status(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Outputs_status",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Outputs_status__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Outputs_status__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Outputs_status'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Outputs::status() const\n"
    "    FullPhysics::Lidort_Outputs::status(FullPhysics::Lidort_Exception_Handling &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Outputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Outputs *arg1 = (FullPhysics::Lidort_Outputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Outputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Outputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Outputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Outputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Outputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Outputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Outputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Outputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Outputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Outputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Outputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Brdf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Sup_Brdf *)new FullPhysics::Lidort_Sup_Brdf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Brdf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Sup_Brdf *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Sup_Brdf" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Sup_Brdf" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Sup_Brdf *)new FullPhysics::Lidort_Sup_Brdf((FullPhysics::Lidort_Sup_Brdf const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Brdf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Sup_Brdf",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Sup_Brdf__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Sup_Brdf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Sup_Brdf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Brdf::Lidort_Sup_Brdf()\n"
    "    FullPhysics::Lidort_Sup_Brdf::Lidort_Sup_Brdf(FullPhysics::Lidort_Sup_Brdf const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Sup_Brdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Sup_Brdf" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_exactdb_brdfunc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_exactdb_brdfunc" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Sup_Brdf const *)arg1)->ts_exactdb_brdfunc();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_exactdb_brdfunc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_exactdb_brdfunc" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_exactdb_brdfunc((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_exactdb_brdfunc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Brdf_ts_exactdb_brdfunc",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Brdf_ts_exactdb_brdfunc__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Brdf_ts_exactdb_brdfunc__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Brdf_ts_exactdb_brdfunc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_exactdb_brdfunc() const\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_exactdb_brdfunc(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_brdf_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Sup_Brdf const *)arg1)->ts_brdf_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_brdf_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_brdf_f_0((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_brdf_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Brdf_ts_brdf_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Brdf_ts_brdf_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Brdf_ts_brdf_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Brdf_ts_brdf_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_brdf_f_0() const\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_brdf_f_0(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_brdf_f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_brdf_f" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Sup_Brdf const *)arg1)->ts_brdf_f();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_brdf_f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_brdf_f" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_brdf_f((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_brdf_f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Brdf_ts_brdf_f",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Brdf_ts_brdf_f__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Brdf_ts_brdf_f__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Brdf_ts_brdf_f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_brdf_f() const\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_brdf_f(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_user_brdf_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_user_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Sup_Brdf const *)arg1)->ts_user_brdf_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_user_brdf_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_user_brdf_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_user_brdf_f_0((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_user_brdf_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Brdf_ts_user_brdf_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Brdf_ts_user_brdf_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Brdf_ts_user_brdf_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Brdf_ts_user_brdf_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_user_brdf_f_0() const\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_user_brdf_f_0(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_user_brdf_f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_user_brdf_f" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Sup_Brdf const *)arg1)->ts_user_brdf_f();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_user_brdf_f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_user_brdf_f" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_user_brdf_f((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_user_brdf_f(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Brdf_ts_user_brdf_f",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Brdf_ts_user_brdf_f__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Brdf_ts_user_brdf_f__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Brdf_ts_user_brdf_f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_user_brdf_f() const\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_user_brdf_f(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_emissivity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_emissivity" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Sup_Brdf const *)arg1)->ts_emissivity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_emissivity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_emissivity" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_emissivity((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_emissivity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Brdf_ts_emissivity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Brdf_ts_emissivity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Brdf_ts_emissivity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Brdf_ts_emissivity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_emissivity() const\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_emissivity(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_user_emissivity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_user_emissivity" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Sup_Brdf const *)arg1)->ts_user_emissivity();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_user_emissivity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_ts_user_emissivity" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_user_emissivity((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_ts_user_emissivity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Brdf_ts_user_emissivity",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Brdf_ts_user_emissivity__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Brdf_ts_user_emissivity__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Brdf_ts_user_emissivity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_user_emissivity() const\n"
    "    FullPhysics::Lidort_Sup_Brdf::ts_user_emissivity(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Brdf_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Brdf *arg1 = (FullPhysics::Lidort_Sup_Brdf *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Sup_Brdf_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Brdf_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Brdf const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Sup_Brdf_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Sup_Brdf_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Sup_Brdf const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Sup_Brdf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Sup_Brdf_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Sleave__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Sup_Sleave *)new FullPhysics::Lidort_Sup_Sleave();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Sleave__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Sup_Sleave *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Sup_Sleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Sup_Sleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Sup_Sleave *)new FullPhysics::Lidort_Sup_Sleave((FullPhysics::Lidort_Sup_Sleave const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Sleave(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Sup_Sleave",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Sup_Sleave__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Sup_Sleave__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Sup_Sleave'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Sleave::Lidort_Sup_Sleave()\n"
    "    FullPhysics::Lidort_Sup_Sleave::Lidort_Sup_Sleave(FullPhysics::Lidort_Sup_Sleave const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Sup_Sleave(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = (FullPhysics::Lidort_Sup_Sleave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Sup_Sleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_slterm_isotropic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = (FullPhysics::Lidort_Sup_Sleave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Sleave_ts_slterm_isotropic" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Sup_Sleave const *)arg1)->ts_slterm_isotropic();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_slterm_isotropic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = (FullPhysics::Lidort_Sup_Sleave *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Sleave_ts_slterm_isotropic" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_slterm_isotropic((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_slterm_isotropic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Sleave_ts_slterm_isotropic",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Sleave_ts_slterm_isotropic__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Sleave_ts_slterm_isotropic__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Sleave_ts_slterm_isotropic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Sleave::ts_slterm_isotropic() const\n"
    "    FullPhysics::Lidort_Sup_Sleave::ts_slterm_isotropic(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_slterm_userangles__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = (FullPhysics::Lidort_Sup_Sleave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Sleave_ts_slterm_userangles" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Sup_Sleave const *)arg1)->ts_slterm_userangles();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_slterm_userangles__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = (FullPhysics::Lidort_Sup_Sleave *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Sleave_ts_slterm_userangles" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_slterm_userangles((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_slterm_userangles(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Sleave_ts_slterm_userangles",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Sleave_ts_slterm_userangles__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Sleave_ts_slterm_userangles__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Sleave_ts_slterm_userangles'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Sleave::ts_slterm_userangles() const\n"
    "    FullPhysics::Lidort_Sup_Sleave::ts_slterm_userangles(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_slterm_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = (FullPhysics::Lidort_Sup_Sleave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Sleave_ts_slterm_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Sup_Sleave const *)arg1)->ts_slterm_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_slterm_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = (FullPhysics::Lidort_Sup_Sleave *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Sleave_ts_slterm_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_slterm_f_0((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_slterm_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Sleave_ts_slterm_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Sleave_ts_slterm_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Sleave_ts_slterm_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Sleave_ts_slterm_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Sleave::ts_slterm_f_0() const\n"
    "    FullPhysics::Lidort_Sup_Sleave::ts_slterm_f_0(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_user_slterm_f_0__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = (FullPhysics::Lidort_Sup_Sleave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Sleave_ts_user_slterm_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Sup_Sleave const *)arg1)->ts_user_slterm_f_0();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_user_slterm_f_0__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = (FullPhysics::Lidort_Sup_Sleave *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Sleave_ts_user_slterm_f_0" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_user_slterm_f_0((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_ts_user_slterm_f_0(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Sleave_ts_user_slterm_f_0",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Sleave_ts_user_slterm_f_0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Sleave_ts_user_slterm_f_0__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Sleave_ts_user_slterm_f_0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Sleave::ts_user_slterm_f_0() const\n"
    "    FullPhysics::Lidort_Sup_Sleave::ts_user_slterm_f_0(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Sleave_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Sleave *arg1 = (FullPhysics::Lidort_Sup_Sleave *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Sup_Sleave_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Sleave_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Sleave const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Sup_Sleave_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Sup_Sleave_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Sup_Sleave const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Sup_Sleave_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Sup_Sleave_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Ss__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Ss *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Sup_Ss *)new FullPhysics::Lidort_Sup_Ss();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Ss__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Ss *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Sup_Ss *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Sup_Ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Ss const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Sup_Ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Ss const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Ss * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Sup_Ss *)new FullPhysics::Lidort_Sup_Ss((FullPhysics::Lidort_Sup_Ss const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Ss(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Sup_Ss",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Sup_Ss__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Sup_Ss__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Sup_Ss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Ss::Lidort_Sup_Ss()\n"
    "    FullPhysics::Lidort_Sup_Ss::Lidort_Sup_Ss(FullPhysics::Lidort_Sup_Ss const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Sup_Ss(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Ss *arg1 = (FullPhysics::Lidort_Sup_Ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Sup_Ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Ss *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Ss * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Ss_ts_intensity_ss__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Ss *arg1 = (FullPhysics::Lidort_Sup_Ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Ss_ts_intensity_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Ss const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Ss * >(argp1);
  {
    try {
      result = (blitz::Array< double,3 > *) &((FullPhysics::Lidort_Sup_Ss const *)arg1)->ts_intensity_ss();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[3], stride[3];
    for(int i = 0; i < 3; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 3, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 3>* t = new blitz::Array<double, 3>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_3_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Ss_ts_intensity_ss__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Ss *arg1 = (FullPhysics::Lidort_Sup_Ss *) 0 ;
  blitz::Array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,3 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Ss_ts_intensity_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Ss *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Ss * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_3_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 3>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_intensity_ss((blitz::Array< double,3 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Ss_ts_intensity_ss(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Ss_ts_intensity_ss",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Ss_ts_intensity_ss__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Ss_ts_intensity_ss__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Ss_ts_intensity_ss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Ss::ts_intensity_ss() const\n"
    "    FullPhysics::Lidort_Sup_Ss::ts_intensity_ss(blitz::Array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Ss_ts_intensity_db__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Ss *arg1 = (FullPhysics::Lidort_Sup_Ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Ss_ts_intensity_db" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Ss const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Ss * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Sup_Ss const *)arg1)->ts_intensity_db();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Ss_ts_intensity_db__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Ss *arg1 = (FullPhysics::Lidort_Sup_Ss *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Ss_ts_intensity_db" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Ss *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Ss * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_intensity_db((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Ss_ts_intensity_db(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Ss_ts_intensity_db",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Ss_ts_intensity_db__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Ss_ts_intensity_db__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Ss_ts_intensity_db'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Ss::ts_intensity_db() const\n"
    "    FullPhysics::Lidort_Sup_Ss::ts_intensity_db(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Ss_ts_contribs_ss__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Ss *arg1 = (FullPhysics::Lidort_Sup_Ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Ss_ts_contribs_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Ss const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Ss * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Sup_Ss const *)arg1)->ts_contribs_ss();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Ss_ts_contribs_ss__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Ss *arg1 = (FullPhysics::Lidort_Sup_Ss *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Ss_ts_contribs_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Ss *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Ss * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_contribs_ss((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Ss_ts_contribs_ss(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Ss_ts_contribs_ss",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Ss_ts_contribs_ss__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Ss_ts_contribs_ss__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Ss_ts_contribs_ss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Ss::ts_contribs_ss() const\n"
    "    FullPhysics::Lidort_Sup_Ss::ts_contribs_ss(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Ss_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Ss *arg1 = (FullPhysics::Lidort_Sup_Ss *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Sup_Ss_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Ss_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Ss const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Ss * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Sup_Ss_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Sup_Ss_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Sup_Ss const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Sup_Ss_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Sup_Ss_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Inout__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Inout *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Sup_Inout *)new FullPhysics::Lidort_Sup_Inout();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Inout__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Inout *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Sup_Inout *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Sup_Inout" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Inout const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Sup_Inout" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Inout const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Inout * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Sup_Inout *)new FullPhysics::Lidort_Sup_Inout((FullPhysics::Lidort_Sup_Inout const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Sup_Inout(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Sup_Inout",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Sup_Inout__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Sup_Inout__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Sup_Inout'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Inout::Lidort_Sup_Inout()\n"
    "    FullPhysics::Lidort_Sup_Inout::Lidort_Sup_Inout(FullPhysics::Lidort_Sup_Inout const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Sup_Inout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Inout *arg1 = (FullPhysics::Lidort_Sup_Inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Sup_Inout" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Inout *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Inout * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Inout_brdf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Inout *arg1 = (FullPhysics::Lidort_Sup_Inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Sup_Brdf *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Inout_brdf" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Inout const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Inout * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Sup_Brdf *) &((FullPhysics::Lidort_Sup_Inout const *)arg1)->brdf();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Inout_brdf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Inout *arg1 = (FullPhysics::Lidort_Sup_Inout *) 0 ;
  FullPhysics::Lidort_Sup_Brdf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Inout_brdf" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Inout *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Inout * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Sup_Brdf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Sup_Inout_brdf" "', argument " "2"" of type '" "FullPhysics::Lidort_Sup_Brdf &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Sup_Inout_brdf" "', argument " "2"" of type '" "FullPhysics::Lidort_Sup_Brdf &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Sup_Brdf * >(argp2);
  {
    try {
      (arg1)->brdf(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Inout_brdf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Inout_brdf",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Inout_brdf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Inout_brdf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Inout_brdf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Inout::brdf() const\n"
    "    FullPhysics::Lidort_Sup_Inout::brdf(FullPhysics::Lidort_Sup_Brdf &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Inout_ss__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Inout *arg1 = (FullPhysics::Lidort_Sup_Inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Sup_Ss *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Inout_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Inout const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Inout * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Sup_Ss *) &((FullPhysics::Lidort_Sup_Inout const *)arg1)->ss();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Inout_ss__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Inout *arg1 = (FullPhysics::Lidort_Sup_Inout *) 0 ;
  FullPhysics::Lidort_Sup_Ss *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Inout_ss" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Inout *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Inout * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Sup_Ss,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Sup_Inout_ss" "', argument " "2"" of type '" "FullPhysics::Lidort_Sup_Ss &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Sup_Inout_ss" "', argument " "2"" of type '" "FullPhysics::Lidort_Sup_Ss &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Sup_Ss * >(argp2);
  {
    try {
      (arg1)->ss(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Inout_ss(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Inout_ss",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Inout_ss__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Inout_ss__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Inout_ss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Inout::ss() const\n"
    "    FullPhysics::Lidort_Sup_Inout::ss(FullPhysics::Lidort_Sup_Ss &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Inout_sleave__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Inout *arg1 = (FullPhysics::Lidort_Sup_Inout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Sup_Sleave *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Inout_sleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Inout const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Inout * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Sup_Sleave *) &((FullPhysics::Lidort_Sup_Inout const *)arg1)->sleave();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Inout_sleave__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Inout *arg1 = (FullPhysics::Lidort_Sup_Inout *) 0 ;
  FullPhysics::Lidort_Sup_Sleave *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Inout_sleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Inout *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Inout * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Sup_Sleave,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Sup_Inout_sleave" "', argument " "2"" of type '" "FullPhysics::Lidort_Sup_Sleave &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Sup_Inout_sleave" "', argument " "2"" of type '" "FullPhysics::Lidort_Sup_Sleave &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Sup_Sleave * >(argp2);
  {
    try {
      (arg1)->sleave(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Inout_sleave(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Sup_Inout_sleave",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Sup_Inout_sleave__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Sup_Inout_sleave__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Sup_Inout_sleave'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Sup_Inout::sleave() const\n"
    "    FullPhysics::Lidort_Sup_Inout::sleave(FullPhysics::Lidort_Sup_Sleave &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Sup_Inout_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Sup_Inout *arg1 = (FullPhysics::Lidort_Sup_Inout *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Sup_Inout_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Sup_Inout_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Sup_Inout const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Sup_Inout * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Sup_Inout_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Sup_Inout_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Sup_Inout const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Sup_Inout_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Sup_Inout, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Sup_Inout_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Boolean__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Boolean *)new FullPhysics::Lidort_Fixed_Boolean();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Boolean__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Boolean *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Boolean" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Boolean" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Boolean *)new FullPhysics::Lidort_Fixed_Boolean((FullPhysics::Lidort_Fixed_Boolean const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Boolean(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Boolean",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Boolean__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Boolean__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Boolean'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::Lidort_Fixed_Boolean()\n"
    "    FullPhysics::Lidort_Fixed_Boolean::Lidort_Fixed_Boolean(FullPhysics::Lidort_Fixed_Boolean const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Boolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Boolean" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_fullrad_mode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_fullrad_mode" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_fullrad_mode();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_fullrad_mode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_fullrad_mode" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_fullrad_mode" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_fullrad_mode((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_fullrad_mode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_fullrad_mode",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_fullrad_mode__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_fullrad_mode__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_fullrad_mode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_fullrad_mode() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_fullrad_mode(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_thermal_emission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_thermal_emission" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_thermal_emission();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_thermal_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_thermal_emission" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_thermal_emission" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_thermal_emission((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_thermal_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_thermal_emission",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_thermal_emission__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_thermal_emission__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_thermal_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_thermal_emission() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_thermal_emission(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_surface_emission__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_surface_emission" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_surface_emission();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_surface_emission__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_surface_emission" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_surface_emission" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_surface_emission((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_surface_emission(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_surface_emission",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_surface_emission__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_surface_emission__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_surface_emission'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_surface_emission() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_surface_emission(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_plane_parallel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_plane_parallel" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_plane_parallel();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_plane_parallel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_plane_parallel" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_plane_parallel" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_plane_parallel((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_plane_parallel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_plane_parallel",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_plane_parallel__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_plane_parallel__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_plane_parallel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_plane_parallel() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_plane_parallel(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_brdf_surface__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_brdf_surface" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_brdf_surface();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_brdf_surface__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_brdf_surface" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_brdf_surface" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_brdf_surface((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_brdf_surface(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_brdf_surface",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_brdf_surface__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_brdf_surface__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_brdf_surface'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_brdf_surface() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_brdf_surface(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_upwelling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_upwelling" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_upwelling();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_upwelling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_upwelling" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_upwelling" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_upwelling((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_upwelling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_upwelling",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_upwelling__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_upwelling__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_upwelling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_upwelling() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_upwelling(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_dnwelling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_dnwelling" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_dnwelling();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_dnwelling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_dnwelling" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_dnwelling" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_dnwelling((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_dnwelling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_dnwelling",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_dnwelling__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_dnwelling__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_dnwelling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_dnwelling() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_dnwelling(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_toa_contribs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_toa_contribs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_toa_contribs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_toa_contribs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_toa_contribs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_toa_contribs" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_toa_contribs((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_toa_contribs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_toa_contribs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_toa_contribs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_toa_contribs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_toa_contribs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_toa_contribs() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_toa_contribs(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_surface_leaving__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_surface_leaving" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_surface_leaving();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_surface_leaving__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_surface_leaving" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_surface_leaving" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_surface_leaving((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_surface_leaving(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_surface_leaving",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_surface_leaving__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_surface_leaving__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_surface_leaving'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_surface_leaving() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_surface_leaving(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_sl_isotropic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_sl_isotropic" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_sl_isotropic();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_sl_isotropic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_sl_isotropic" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_sl_isotropic" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_sl_isotropic((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_sl_isotropic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_sl_isotropic",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_sl_isotropic__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_sl_isotropic__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_sl_isotropic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_sl_isotropic() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_sl_isotropic(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_water_leaving__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_water_leaving" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_water_leaving();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_water_leaving__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_water_leaving" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_water_leaving" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_water_leaving((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_water_leaving(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_water_leaving",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_water_leaving__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_water_leaving__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_water_leaving'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_water_leaving() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_water_leaving(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_fluorescence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_fluorescence" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_fluorescence();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_fluorescence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_fluorescence" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_fluorescence" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_fluorescence((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_fluorescence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_fluorescence",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_fluorescence__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_fluorescence__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_fluorescence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_fluorescence() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_fluorescence(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_tf_iteration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_tf_iteration" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_tf_iteration();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_tf_iteration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_tf_iteration" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_tf_iteration" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_tf_iteration((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_tf_iteration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_tf_iteration",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_tf_iteration__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_tf_iteration__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_tf_iteration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_tf_iteration() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_tf_iteration(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_wladjusted_output__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_wladjusted_output" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_wladjusted_output();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_wladjusted_output__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_wladjusted_output" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_wladjusted_output" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_wladjusted_output((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_wladjusted_output(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_wladjusted_output",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_wladjusted_output__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_wladjusted_output__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_wladjusted_output'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_wladjusted_output() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_wladjusted_output(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_toa_illumination__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_toa_illumination" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_toa_illumination();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_toa_illumination__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_toa_illumination" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_toa_illumination" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_toa_illumination((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_toa_illumination(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_toa_illumination",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_toa_illumination__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_toa_illumination__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_toa_illumination'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_toa_illumination() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_toa_illumination(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_boa_illumination__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_boa_illumination" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_boa_illumination();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_boa_illumination__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_boa_illumination" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_boa_illumination" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_boa_illumination((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_boa_illumination(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_boa_illumination",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_boa_illumination__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_boa_illumination__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_boa_illumination'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_boa_illumination() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_boa_illumination(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_albtrn_media__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< blitz::Array< bool,1 > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_albtrn_media" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_albtrn_media();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = (&result)->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = (&result)->stride(i) * sizeof(bool);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<bool>(), 
      stride, (&result)->data(), 0, 0, 0);
    blitz::Array<bool, 1>* t = new blitz::Array<bool, 1>(result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_bool_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_albtrn_media__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  blitz::Array< bool,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< bool,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_albtrn_media" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_bool_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<bool>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<bool, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_do_albtrn_media((blitz::Array< bool,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_albtrn_media(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_albtrn_media",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_albtrn_media__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_albtrn_media__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_albtrn_media'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_albtrn_media() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_albtrn_media(blitz::Array< bool,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_planetary_problem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_planetary_problem" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_planetary_problem();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_planetary_problem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_planetary_problem" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_planetary_problem" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_planetary_problem((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_planetary_problem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_planetary_problem",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_planetary_problem__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_planetary_problem__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_planetary_problem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_planetary_problem() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_planetary_problem(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_mssts__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->ts_do_mssts();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_mssts__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_ts_do_mssts" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Boolean_ts_do_mssts" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_mssts((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_ts_do_mssts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_ts_do_mssts",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_mssts__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Boolean_ts_do_mssts__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Boolean_ts_do_mssts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_mssts() const\n"
    "    FullPhysics::Lidort_Fixed_Boolean::ts_do_mssts(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Boolean_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Boolean *arg1 = (FullPhysics::Lidort_Fixed_Boolean *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Boolean_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Boolean_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Boolean_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Boolean_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Boolean const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Boolean_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Boolean_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Control__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Control *)new FullPhysics::Lidort_Fixed_Control();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Control__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Control *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Control" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Control" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Control *)new FullPhysics::Lidort_Fixed_Control((FullPhysics::Lidort_Fixed_Control const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Control(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Control",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Control__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Control__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Control'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::Lidort_Fixed_Control()\n"
    "    FullPhysics::Lidort_Fixed_Control::Lidort_Fixed_Control(FullPhysics::Lidort_Fixed_Control const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Control(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Control" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_taylor_order__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_taylor_order" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_taylor_order();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_taylor_order__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_taylor_order" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_taylor_order" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_taylor_order((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_taylor_order(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_taylor_order",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_taylor_order__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_taylor_order__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_taylor_order'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_taylor_order() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_taylor_order(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_nstreams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_nstreams" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_nstreams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_nstreams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_nstreams" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_nstreams" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_nstreams((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_nstreams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_nstreams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_nstreams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_nstreams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_nstreams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_nstreams() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_nstreams(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_nlayers__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_nlayers" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_nlayers();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_nlayers__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_nlayers" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_nlayers" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_nlayers((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_nlayers(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_nlayers",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_nlayers__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_nlayers__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_nlayers'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_nlayers() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_nlayers(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_nfinelayers__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_nfinelayers" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_nfinelayers();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_nfinelayers__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_nfinelayers" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_nfinelayers" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_nfinelayers((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_nfinelayers(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_nfinelayers",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_nfinelayers__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_nfinelayers__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_nfinelayers'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_nfinelayers() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_nfinelayers(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_n_thermal_coeffs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_n_thermal_coeffs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_n_thermal_coeffs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_n_thermal_coeffs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_n_thermal_coeffs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_n_thermal_coeffs" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_n_thermal_coeffs((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_n_thermal_coeffs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_n_thermal_coeffs",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_n_thermal_coeffs__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_n_thermal_coeffs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_n_thermal_coeffs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_n_thermal_coeffs() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_n_thermal_coeffs(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_lidort_accuracy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_lidort_accuracy" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_lidort_accuracy();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_lidort_accuracy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_lidort_accuracy" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_lidort_accuracy" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_lidort_accuracy((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_lidort_accuracy(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_lidort_accuracy",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_lidort_accuracy__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_lidort_accuracy__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_lidort_accuracy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_lidort_accuracy() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_lidort_accuracy(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_asymtx_tolerance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_asymtx_tolerance" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_asymtx_tolerance();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_asymtx_tolerance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_asymtx_tolerance" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_asymtx_tolerance" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_asymtx_tolerance((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_asymtx_tolerance(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_asymtx_tolerance",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_asymtx_tolerance__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_asymtx_tolerance__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_asymtx_tolerance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_asymtx_tolerance() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_asymtx_tolerance(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_tf_maxiter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_tf_maxiter" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_tf_maxiter();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_tf_maxiter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_tf_maxiter" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_tf_maxiter" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_tf_maxiter((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_tf_maxiter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_tf_maxiter",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_tf_maxiter__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_tf_maxiter__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_tf_maxiter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_tf_maxiter() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_tf_maxiter(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_tf_criterion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_tf_criterion" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_tf_criterion();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_tf_criterion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_tf_criterion" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_tf_criterion" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_tf_criterion((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_tf_criterion(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_tf_criterion",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_tf_criterion__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_tf_criterion__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_tf_criterion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_tf_criterion() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_tf_criterion(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_toa_illumination__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_toa_illumination" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_toa_illumination();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_toa_illumination__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_toa_illumination" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_toa_illumination" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_toa_illumination((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_toa_illumination(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_toa_illumination",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_toa_illumination__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_toa_illumination__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_toa_illumination'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_toa_illumination() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_toa_illumination(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_boa_illumination__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_boa_illumination" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Fixed_Control const *)arg1)->ts_boa_illumination();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_boa_illumination__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_ts_boa_illumination" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Control_ts_boa_illumination" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_boa_illumination((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_ts_boa_illumination(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_ts_boa_illumination",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Control_ts_boa_illumination__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Control_ts_boa_illumination__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Control_ts_boa_illumination'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_boa_illumination() const\n"
    "    FullPhysics::Lidort_Fixed_Control::ts_boa_illumination(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Control_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Control *arg1 = (FullPhysics::Lidort_Fixed_Control *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Control_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Control_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Control_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Control_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Control const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Control_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Control_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Sunrays__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Sunrays *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Sunrays *)new FullPhysics::Lidort_Fixed_Sunrays();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Sunrays__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Sunrays *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Sunrays *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Sunrays" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Sunrays const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Sunrays" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Sunrays const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Sunrays * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Sunrays *)new FullPhysics::Lidort_Fixed_Sunrays((FullPhysics::Lidort_Fixed_Sunrays const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Sunrays(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Sunrays",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Sunrays__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Sunrays__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Sunrays'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Sunrays::Lidort_Fixed_Sunrays()\n"
    "    FullPhysics::Lidort_Fixed_Sunrays::Lidort_Fixed_Sunrays(FullPhysics::Lidort_Fixed_Sunrays const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Sunrays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Sunrays *arg1 = (FullPhysics::Lidort_Fixed_Sunrays *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Sunrays" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Sunrays *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Sunrays * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Sunrays_ts_flux_factor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Sunrays *arg1 = (FullPhysics::Lidort_Fixed_Sunrays *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Sunrays_ts_flux_factor" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Sunrays const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Sunrays * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Fixed_Sunrays const *)arg1)->ts_flux_factor();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Sunrays_ts_flux_factor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Sunrays *arg1 = (FullPhysics::Lidort_Fixed_Sunrays *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Sunrays_ts_flux_factor" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Sunrays *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Sunrays * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Sunrays_ts_flux_factor" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_flux_factor((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Sunrays_ts_flux_factor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Sunrays_ts_flux_factor",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Sunrays_ts_flux_factor__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Sunrays_ts_flux_factor__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Sunrays_ts_flux_factor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Sunrays::ts_flux_factor() const\n"
    "    FullPhysics::Lidort_Fixed_Sunrays::ts_flux_factor(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Sunrays_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Sunrays *arg1 = (FullPhysics::Lidort_Fixed_Sunrays *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Sunrays_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Sunrays_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Sunrays const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Sunrays * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Sunrays_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Sunrays_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Sunrays const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Sunrays_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Sunrays_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Uservalues__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Uservalues *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Uservalues *)new FullPhysics::Lidort_Fixed_Uservalues();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Uservalues__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Uservalues *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Uservalues *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Uservalues" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Uservalues const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Uservalues" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Uservalues const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Uservalues * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Uservalues *)new FullPhysics::Lidort_Fixed_Uservalues((FullPhysics::Lidort_Fixed_Uservalues const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Uservalues(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Uservalues",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Uservalues__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Uservalues__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Uservalues'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Uservalues::Lidort_Fixed_Uservalues()\n"
    "    FullPhysics::Lidort_Fixed_Uservalues::Lidort_Fixed_Uservalues(FullPhysics::Lidort_Fixed_Uservalues const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Uservalues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Uservalues *arg1 = (FullPhysics::Lidort_Fixed_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Uservalues" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Uservalues * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Uservalues_ts_n_user_levels__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Uservalues *arg1 = (FullPhysics::Lidort_Fixed_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Uservalues_ts_n_user_levels" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Uservalues * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Fixed_Uservalues const *)arg1)->ts_n_user_levels();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Uservalues_ts_n_user_levels__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Uservalues *arg1 = (FullPhysics::Lidort_Fixed_Uservalues *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Uservalues_ts_n_user_levels" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Uservalues * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Uservalues_ts_n_user_levels" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_n_user_levels((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Uservalues_ts_n_user_levels(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Uservalues_ts_n_user_levels",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Uservalues_ts_n_user_levels__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Uservalues_ts_n_user_levels__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Uservalues_ts_n_user_levels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Uservalues::ts_n_user_levels() const\n"
    "    FullPhysics::Lidort_Fixed_Uservalues::ts_n_user_levels(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Uservalues_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Uservalues *arg1 = (FullPhysics::Lidort_Fixed_Uservalues *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Uservalues_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Uservalues_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Uservalues * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Uservalues_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Uservalues_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Uservalues const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Uservalues_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Uservalues_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Chapman__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Chapman *)new FullPhysics::Lidort_Fixed_Chapman();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Chapman__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Chapman *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Chapman" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Chapman" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Chapman *)new FullPhysics::Lidort_Fixed_Chapman((FullPhysics::Lidort_Fixed_Chapman const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Chapman(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Chapman",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Chapman__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Chapman__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Chapman'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Chapman::Lidort_Fixed_Chapman()\n"
    "    FullPhysics::Lidort_Fixed_Chapman::Lidort_Fixed_Chapman(FullPhysics::Lidort_Fixed_Chapman const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Chapman(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Chapman" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_height_grid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_ts_height_grid" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Fixed_Chapman const *)arg1)->ts_height_grid();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_height_grid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_ts_height_grid" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_height_grid((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_height_grid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Chapman_ts_height_grid",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Chapman_ts_height_grid__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Chapman_ts_height_grid__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Chapman_ts_height_grid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Chapman::ts_height_grid() const\n"
    "    FullPhysics::Lidort_Fixed_Chapman::ts_height_grid(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_pressure_grid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_ts_pressure_grid" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Fixed_Chapman const *)arg1)->ts_pressure_grid();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_pressure_grid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_ts_pressure_grid" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_pressure_grid((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_pressure_grid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Chapman_ts_pressure_grid",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Chapman_ts_pressure_grid__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Chapman_ts_pressure_grid__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Chapman_ts_pressure_grid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Chapman::ts_pressure_grid() const\n"
    "    FullPhysics::Lidort_Fixed_Chapman::ts_pressure_grid(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_temperature_grid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_ts_temperature_grid" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Fixed_Chapman const *)arg1)->ts_temperature_grid();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_temperature_grid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_ts_temperature_grid" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_temperature_grid((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_temperature_grid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Chapman_ts_temperature_grid",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Chapman_ts_temperature_grid__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Chapman_ts_temperature_grid__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Chapman_ts_temperature_grid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Chapman::ts_temperature_grid() const\n"
    "    FullPhysics::Lidort_Fixed_Chapman::ts_temperature_grid(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_finegrid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_ts_finegrid" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    try {
      result = (blitz::Array< int,1 > *) &((FullPhysics::Lidort_Fixed_Chapman const *)arg1)->ts_finegrid();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(int);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<int>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<int, 1>* t = new blitz::Array<int, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_int_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_finegrid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  blitz::Array< int,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< int,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_ts_finegrid" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_int_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<int>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<int, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_finegrid((blitz::Array< int,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_finegrid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Chapman_ts_finegrid",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Chapman_ts_finegrid__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Chapman_ts_finegrid__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Chapman_ts_finegrid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Chapman::ts_finegrid() const\n"
    "    FullPhysics::Lidort_Fixed_Chapman::ts_finegrid(blitz::Array< int,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_rfindex_parameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_ts_rfindex_parameter" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Fixed_Chapman const *)arg1)->ts_rfindex_parameter();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_rfindex_parameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_ts_rfindex_parameter" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Chapman_ts_rfindex_parameter" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_rfindex_parameter((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_ts_rfindex_parameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Chapman_ts_rfindex_parameter",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Chapman_ts_rfindex_parameter__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Chapman_ts_rfindex_parameter__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Chapman_ts_rfindex_parameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Chapman::ts_rfindex_parameter() const\n"
    "    FullPhysics::Lidort_Fixed_Chapman::ts_rfindex_parameter(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Chapman_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Chapman *arg1 = (FullPhysics::Lidort_Fixed_Chapman *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Chapman_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Chapman_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Chapman const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Chapman_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Chapman_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Chapman const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Chapman_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Chapman_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Optical__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Optical *)new FullPhysics::Lidort_Fixed_Optical();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Optical__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Optical *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Optical" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Optical" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Optical *)new FullPhysics::Lidort_Fixed_Optical((FullPhysics::Lidort_Fixed_Optical const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Optical(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Optical",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Optical__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Optical__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Optical'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Optical::Lidort_Fixed_Optical()\n"
    "    FullPhysics::Lidort_Fixed_Optical::Lidort_Fixed_Optical(FullPhysics::Lidort_Fixed_Optical const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Optical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Optical" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_deltau_vert_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_deltau_vert_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Fixed_Optical const *)arg1)->ts_deltau_vert_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_deltau_vert_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_deltau_vert_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_deltau_vert_input((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_deltau_vert_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Optical_ts_deltau_vert_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Optical_ts_deltau_vert_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Optical_ts_deltau_vert_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Optical_ts_deltau_vert_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_deltau_vert_input() const\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_deltau_vert_input(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_phasmoms_total_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_phasmoms_total_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Fixed_Optical const *)arg1)->ts_phasmoms_total_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_phasmoms_total_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_phasmoms_total_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_phasmoms_total_input((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_phasmoms_total_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Optical_ts_phasmoms_total_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Optical_ts_phasmoms_total_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Optical_ts_phasmoms_total_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Optical_ts_phasmoms_total_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_phasmoms_total_input() const\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_phasmoms_total_input(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_phasfunc_input_up__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_phasfunc_input_up" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Fixed_Optical const *)arg1)->ts_phasfunc_input_up();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_phasfunc_input_up__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_phasfunc_input_up" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_phasfunc_input_up((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_phasfunc_input_up(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Optical_ts_phasfunc_input_up",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Optical_ts_phasfunc_input_up__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Optical_ts_phasfunc_input_up__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Optical_ts_phasfunc_input_up'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_phasfunc_input_up() const\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_phasfunc_input_up(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_phasfunc_input_dn__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_phasfunc_input_dn" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Fixed_Optical const *)arg1)->ts_phasfunc_input_dn();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_phasfunc_input_dn__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_phasfunc_input_dn" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_phasfunc_input_dn((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_phasfunc_input_dn(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Optical_ts_phasfunc_input_dn",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Optical_ts_phasfunc_input_dn__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Optical_ts_phasfunc_input_dn__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Optical_ts_phasfunc_input_dn'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_phasfunc_input_dn() const\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_phasfunc_input_dn(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_lambertian_albedo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_lambertian_albedo" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Fixed_Optical const *)arg1)->ts_lambertian_albedo();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_lambertian_albedo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_lambertian_albedo" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Optical_ts_lambertian_albedo" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_lambertian_albedo((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_lambertian_albedo(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Optical_ts_lambertian_albedo",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Optical_ts_lambertian_albedo__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Optical_ts_lambertian_albedo__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Optical_ts_lambertian_albedo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_lambertian_albedo() const\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_lambertian_albedo(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_thermal_bb_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_thermal_bb_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Fixed_Optical const *)arg1)->ts_thermal_bb_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_thermal_bb_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_thermal_bb_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_thermal_bb_input((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_thermal_bb_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Optical_ts_thermal_bb_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Optical_ts_thermal_bb_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Optical_ts_thermal_bb_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Optical_ts_thermal_bb_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_thermal_bb_input() const\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_thermal_bb_input(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_surface_bb_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_surface_bb_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Fixed_Optical const *)arg1)->ts_surface_bb_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_surface_bb_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_surface_bb_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Optical_ts_surface_bb_input" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_surface_bb_input((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_surface_bb_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Optical_ts_surface_bb_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Optical_ts_surface_bb_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Optical_ts_surface_bb_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Optical_ts_surface_bb_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_surface_bb_input() const\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_surface_bb_input(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_atmos_wavelength__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_atmos_wavelength" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Fixed_Optical const *)arg1)->ts_atmos_wavelength();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_atmos_wavelength__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_ts_atmos_wavelength" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Optical_ts_atmos_wavelength" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_atmos_wavelength((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_ts_atmos_wavelength(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Optical_ts_atmos_wavelength",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Optical_ts_atmos_wavelength__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Optical_ts_atmos_wavelength__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Optical_ts_atmos_wavelength'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_atmos_wavelength() const\n"
    "    FullPhysics::Lidort_Fixed_Optical::ts_atmos_wavelength(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Optical_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Optical *arg1 = (FullPhysics::Lidort_Fixed_Optical *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Optical_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Optical_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Optical_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Optical_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Optical const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Optical_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Optical_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Write__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Write *)new FullPhysics::Lidort_Fixed_Write();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Write__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Write *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Write" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Write" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Write *)new FullPhysics::Lidort_Fixed_Write((FullPhysics::Lidort_Fixed_Write const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Write(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Write",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Write__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Write__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Write'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Write::Lidort_Fixed_Write()\n"
    "    FullPhysics::Lidort_Fixed_Write::Lidort_Fixed_Write(FullPhysics::Lidort_Fixed_Write const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Write" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_debug_write__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_do_debug_write" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Write const *)arg1)->ts_do_debug_write();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_debug_write__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_do_debug_write" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Write_ts_do_debug_write" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_debug_write((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_debug_write(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Write_ts_do_debug_write",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Write_ts_do_debug_write__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Write_ts_do_debug_write__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Write_ts_do_debug_write'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Write::ts_do_debug_write() const\n"
    "    FullPhysics::Lidort_Fixed_Write::ts_do_debug_write(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_do_write_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Write const *)arg1)->ts_do_write_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_do_write_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Write_ts_do_write_input" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_write_input((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Write_ts_do_write_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Write_ts_do_write_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Write_ts_do_write_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Write_ts_do_write_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Write::ts_do_write_input() const\n"
    "    FullPhysics::Lidort_Fixed_Write::ts_do_write_input(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_input_write_filename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_input_write_filename" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Fixed_Write const *)arg1)->ts_input_write_filename();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_scenario__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_do_write_scenario" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Write const *)arg1)->ts_do_write_scenario();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_scenario__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_do_write_scenario" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Write_ts_do_write_scenario" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_write_scenario((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_scenario(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Write_ts_do_write_scenario",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Write_ts_do_write_scenario__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Write_ts_do_write_scenario__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Write_ts_do_write_scenario'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Write::ts_do_write_scenario() const\n"
    "    FullPhysics::Lidort_Fixed_Write::ts_do_write_scenario(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_scenario_write_filename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_scenario_write_filename" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Fixed_Write const *)arg1)->ts_scenario_write_filename();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_fourier__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_do_write_fourier" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Write const *)arg1)->ts_do_write_fourier();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_fourier__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_do_write_fourier" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Write_ts_do_write_fourier" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_write_fourier((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_fourier(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Write_ts_do_write_fourier",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Write_ts_do_write_fourier__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Write_ts_do_write_fourier__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Write_ts_do_write_fourier'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Write::ts_do_write_fourier() const\n"
    "    FullPhysics::Lidort_Fixed_Write::ts_do_write_fourier(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_fourier_write_filename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_fourier_write_filename" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Fixed_Write const *)arg1)->ts_fourier_write_filename();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_results__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_do_write_results" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Fixed_Write const *)arg1)->ts_do_write_results();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_results__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_do_write_results" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Fixed_Write_ts_do_write_results" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_write_results((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_do_write_results(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Write_ts_do_write_results",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Write_ts_do_write_results__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Write_ts_do_write_results__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Write_ts_do_write_results'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Write::ts_do_write_results() const\n"
    "    FullPhysics::Lidort_Fixed_Write::ts_do_write_results(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_ts_results_write_filename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_ts_results_write_filename" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  {
    try {
      result = ((FullPhysics::Lidort_Fixed_Write const *)arg1)->ts_results_write_filename();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Write_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Write *arg1 = (FullPhysics::Lidort_Fixed_Write *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Write_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Write_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Write const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Write_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Write_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Write const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Write_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Write_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Inputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Inputs *)new FullPhysics::Lidort_Fixed_Inputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Inputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Inputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Fixed_Inputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Fixed_Inputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Inputs *)new FullPhysics::Lidort_Fixed_Inputs((FullPhysics::Lidort_Fixed_Inputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Fixed_Inputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Fixed_Inputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Fixed_Inputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Fixed_Inputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Fixed_Inputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Inputs::Lidort_Fixed_Inputs()\n"
    "    FullPhysics::Lidort_Fixed_Inputs::Lidort_Fixed_Inputs(FullPhysics::Lidort_Fixed_Inputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Fixed_Inputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Fixed_Inputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_f_bool__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Boolean *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_f_bool" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Boolean *) &((FullPhysics::Lidort_Fixed_Inputs const *)arg1)->f_bool();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_f_bool__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  FullPhysics::Lidort_Fixed_Boolean *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_f_bool" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Boolean,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Inputs_f_bool" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Boolean &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Inputs_f_bool" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Boolean &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Fixed_Boolean * >(argp2);
  {
    try {
      (arg1)->f_bool(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_f_bool(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Inputs_f_bool",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Inputs_f_bool__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Inputs_f_bool__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Inputs_f_bool'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Inputs::f_bool() const\n"
    "    FullPhysics::Lidort_Fixed_Inputs::f_bool(FullPhysics::Lidort_Fixed_Boolean &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_cont__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Control *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_cont" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Control *) &((FullPhysics::Lidort_Fixed_Inputs const *)arg1)->cont();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_cont__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  FullPhysics::Lidort_Fixed_Control *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_cont" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Control,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Inputs_cont" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Control &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Inputs_cont" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Control &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Fixed_Control * >(argp2);
  {
    try {
      (arg1)->cont(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_cont(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Inputs_cont",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Inputs_cont__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Inputs_cont__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Inputs_cont'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Inputs::cont() const\n"
    "    FullPhysics::Lidort_Fixed_Inputs::cont(FullPhysics::Lidort_Fixed_Control &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_sunrays__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Sunrays *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_sunrays" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Sunrays *) &((FullPhysics::Lidort_Fixed_Inputs const *)arg1)->sunrays();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_sunrays__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  FullPhysics::Lidort_Fixed_Sunrays *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_sunrays" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Sunrays,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Inputs_sunrays" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Sunrays &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Inputs_sunrays" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Sunrays &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Fixed_Sunrays * >(argp2);
  {
    try {
      (arg1)->sunrays(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_sunrays(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Inputs_sunrays",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Inputs_sunrays__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Inputs_sunrays__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Inputs_sunrays'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Inputs::sunrays() const\n"
    "    FullPhysics::Lidort_Fixed_Inputs::sunrays(FullPhysics::Lidort_Fixed_Sunrays &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_userval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Uservalues *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_userval" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Uservalues *) &((FullPhysics::Lidort_Fixed_Inputs const *)arg1)->userval();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_userval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  FullPhysics::Lidort_Fixed_Uservalues *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_userval" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Uservalues,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Inputs_userval" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Uservalues &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Inputs_userval" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Uservalues &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Fixed_Uservalues * >(argp2);
  {
    try {
      (arg1)->userval(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_userval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Inputs_userval",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Inputs_userval__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Inputs_userval__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Inputs_userval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Inputs::userval() const\n"
    "    FullPhysics::Lidort_Fixed_Inputs::userval(FullPhysics::Lidort_Fixed_Uservalues &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_chapman__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Chapman *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_chapman" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Chapman *) &((FullPhysics::Lidort_Fixed_Inputs const *)arg1)->chapman();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_chapman__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  FullPhysics::Lidort_Fixed_Chapman *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_chapman" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Chapman,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Inputs_chapman" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Chapman &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Inputs_chapman" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Chapman &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Fixed_Chapman * >(argp2);
  {
    try {
      (arg1)->chapman(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_chapman(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Inputs_chapman",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Inputs_chapman__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Inputs_chapman__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Inputs_chapman'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Inputs::chapman() const\n"
    "    FullPhysics::Lidort_Fixed_Inputs::chapman(FullPhysics::Lidort_Fixed_Chapman &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_optical__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Optical *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_optical" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Optical *) &((FullPhysics::Lidort_Fixed_Inputs const *)arg1)->optical();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_optical__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  FullPhysics::Lidort_Fixed_Optical *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_optical" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Optical,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Inputs_optical" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Optical &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Inputs_optical" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Optical &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Fixed_Optical * >(argp2);
  {
    try {
      (arg1)->optical(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_optical(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Inputs_optical",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Inputs_optical__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Inputs_optical__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Inputs_optical'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Inputs::optical() const\n"
    "    FullPhysics::Lidort_Fixed_Inputs::optical(FullPhysics::Lidort_Fixed_Optical &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_write__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Fixed_Write *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_write" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Fixed_Write *) &((FullPhysics::Lidort_Fixed_Inputs const *)arg1)->write();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_write__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  FullPhysics::Lidort_Fixed_Write *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_write" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Fixed_Write,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Inputs_write" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Write &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Inputs_write" "', argument " "2"" of type '" "FullPhysics::Lidort_Fixed_Write &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Fixed_Write * >(argp2);
  {
    try {
      (arg1)->write(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_write(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Inputs_write",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Fixed_Inputs_write__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Fixed_Inputs_write__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Fixed_Inputs_write'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Fixed_Inputs::write() const\n"
    "    FullPhysics::Lidort_Fixed_Inputs::write(FullPhysics::Lidort_Fixed_Write &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Fixed_Inputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Fixed_Inputs *arg1 = (FullPhysics::Lidort_Fixed_Inputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Fixed_Inputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Fixed_Inputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Fixed_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Fixed_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Fixed_Inputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Fixed_Inputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Fixed_Inputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Fixed_Inputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Fixed_Inputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Fixed_Inputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Boolean__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Modified_Boolean *)new FullPhysics::Lidort_Modified_Boolean();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Boolean__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Boolean *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Modified_Boolean" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Modified_Boolean" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Boolean *)new FullPhysics::Lidort_Modified_Boolean((FullPhysics::Lidort_Modified_Boolean const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Boolean(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Modified_Boolean",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Modified_Boolean__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Modified_Boolean__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Modified_Boolean'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::Lidort_Modified_Boolean()\n"
    "    FullPhysics::Lidort_Modified_Boolean::Lidort_Modified_Boolean(FullPhysics::Lidort_Modified_Boolean const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Modified_Boolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Modified_Boolean" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_focorr" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_focorr();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_focorr" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_focorr" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_focorr((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_focorr",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_focorr__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_focorr__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_focorr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_focorr() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_focorr(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr_external__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_focorr_external" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_focorr_external();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr_external__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_focorr_external" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_focorr_external" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_focorr_external((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr_external(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_focorr_external",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_focorr_external__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_focorr_external__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_focorr_external'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_focorr_external() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_focorr_external(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr_nadir__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_focorr_nadir" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_focorr_nadir();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr_nadir__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_focorr_nadir" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_focorr_nadir" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_focorr_nadir((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr_nadir(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_focorr_nadir",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_focorr_nadir__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_focorr_nadir__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_focorr_nadir'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_focorr_nadir() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_focorr_nadir(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr_outgoing__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_focorr_outgoing" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_focorr_outgoing();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr_outgoing__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_focorr_outgoing" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_focorr_outgoing" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_focorr_outgoing((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_focorr_outgoing(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_focorr_outgoing",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_focorr_outgoing__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_focorr_outgoing__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_focorr_outgoing'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_focorr_outgoing() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_focorr_outgoing(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_sscorr_truncation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_sscorr_truncation" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_sscorr_truncation();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_sscorr_truncation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_sscorr_truncation" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_sscorr_truncation" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_sscorr_truncation((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_sscorr_truncation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_sscorr_truncation",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_sscorr_truncation__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_sscorr_truncation__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_sscorr_truncation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_sscorr_truncation() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_sscorr_truncation(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_sscorr_usephasfunc();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_sscorr_usephasfunc((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_sscorr_usephasfunc() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_sscorr_usephasfunc(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_external_wleave__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_external_wleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_external_wleave();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_external_wleave__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_external_wleave" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_external_wleave" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_external_wleave((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_external_wleave(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_external_wleave",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_external_wleave__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_external_wleave__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_external_wleave'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_external_wleave() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_external_wleave(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_double_convtest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_double_convtest" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_double_convtest();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_double_convtest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_double_convtest" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_double_convtest" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_double_convtest((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_double_convtest(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_double_convtest",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_double_convtest__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_double_convtest__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_double_convtest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_double_convtest() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_double_convtest(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_solar_sources__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_solar_sources" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_solar_sources();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_solar_sources__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_solar_sources" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_solar_sources" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_solar_sources((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_solar_sources(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_solar_sources",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_solar_sources__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_solar_sources__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_solar_sources'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_solar_sources() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_solar_sources(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_refractive_geometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_refractive_geometry" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_refractive_geometry();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_refractive_geometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_refractive_geometry" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_refractive_geometry" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_refractive_geometry((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_refractive_geometry(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_refractive_geometry",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_refractive_geometry__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_refractive_geometry__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_refractive_geometry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_refractive_geometry() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_refractive_geometry(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_chapman_function__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_chapman_function" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_chapman_function();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_chapman_function__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_chapman_function" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_chapman_function" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_chapman_function((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_chapman_function(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_chapman_function",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_chapman_function__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_chapman_function__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_chapman_function'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_chapman_function() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_chapman_function(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_rayleigh_only__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_rayleigh_only" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_rayleigh_only();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_rayleigh_only__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_rayleigh_only" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_rayleigh_only" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_rayleigh_only((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_rayleigh_only(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_rayleigh_only",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_rayleigh_only__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_rayleigh_only__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_rayleigh_only'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_rayleigh_only() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_rayleigh_only(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_isotropic_only__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_isotropic_only" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_isotropic_only();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_isotropic_only__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_isotropic_only" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_isotropic_only" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_isotropic_only((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_isotropic_only(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_isotropic_only",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_isotropic_only__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_isotropic_only__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_isotropic_only'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_isotropic_only() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_isotropic_only(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_no_azimuth__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_no_azimuth" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_no_azimuth();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_no_azimuth__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_no_azimuth" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_no_azimuth" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_no_azimuth((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_no_azimuth(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_no_azimuth",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_no_azimuth__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_no_azimuth__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_no_azimuth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_no_azimuth() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_no_azimuth(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_all_fourier__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_all_fourier" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_all_fourier();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_all_fourier__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_all_fourier" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_all_fourier" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_all_fourier((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_all_fourier(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_all_fourier",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_all_fourier__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_all_fourier__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_all_fourier'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_all_fourier() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_all_fourier(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_deltam_scaling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_deltam_scaling" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_deltam_scaling();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_deltam_scaling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_deltam_scaling" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_deltam_scaling" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_deltam_scaling((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_deltam_scaling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_deltam_scaling",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_deltam_scaling__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_deltam_scaling__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_deltam_scaling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_deltam_scaling() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_deltam_scaling(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_solution_saving__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_solution_saving" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_solution_saving();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_solution_saving__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_solution_saving" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_solution_saving" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_solution_saving((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_solution_saving(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_solution_saving",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_solution_saving__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_solution_saving__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_solution_saving'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_solution_saving() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_solution_saving(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_bvp_telescoping__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_bvp_telescoping" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_bvp_telescoping();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_bvp_telescoping__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_bvp_telescoping" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_bvp_telescoping" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_bvp_telescoping((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_bvp_telescoping(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_bvp_telescoping",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_bvp_telescoping__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_bvp_telescoping__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_bvp_telescoping'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_bvp_telescoping() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_bvp_telescoping(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_user_streams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_user_streams" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_user_streams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_user_streams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_user_streams" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_user_streams" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_user_streams((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_user_streams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_user_streams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_user_streams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_user_streams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_user_streams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_user_streams() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_user_streams(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_additional_mvout__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_additional_mvout" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_additional_mvout();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_additional_mvout__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_additional_mvout" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_additional_mvout" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_additional_mvout((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_additional_mvout(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_additional_mvout",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_additional_mvout__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_additional_mvout__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_additional_mvout'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_additional_mvout() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_additional_mvout(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_mvout_only__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_mvout_only" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_mvout_only();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_mvout_only__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_mvout_only" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_mvout_only" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_mvout_only((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_mvout_only(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_mvout_only",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_mvout_only__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_mvout_only__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_mvout_only'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_mvout_only() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_mvout_only(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_thermal_transonly__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_thermal_transonly" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_thermal_transonly();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_thermal_transonly__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_thermal_transonly" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_thermal_transonly" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_thermal_transonly((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_thermal_transonly(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_thermal_transonly",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_thermal_transonly__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_thermal_transonly__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_thermal_transonly'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_thermal_transonly() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_thermal_transonly(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_observation_geometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_observation_geometry" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_observation_geometry();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_observation_geometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_observation_geometry" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_observation_geometry" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_observation_geometry((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_observation_geometry(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_observation_geometry",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_observation_geometry__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_observation_geometry__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_observation_geometry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_observation_geometry() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_observation_geometry(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_doublet_geometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_doublet_geometry" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  {
    try {
      result = (bool)((FullPhysics::Lidort_Modified_Boolean const *)arg1)->ts_do_doublet_geometry();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_doublet_geometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_ts_do_doublet_geometry" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Boolean_ts_do_doublet_geometry" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_do_doublet_geometry((bool const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_ts_do_doublet_geometry(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_ts_do_doublet_geometry",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Boolean_ts_do_doublet_geometry__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Boolean_ts_do_doublet_geometry__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Boolean_ts_do_doublet_geometry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_doublet_geometry() const\n"
    "    FullPhysics::Lidort_Modified_Boolean::ts_do_doublet_geometry(bool const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Boolean_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Boolean *arg1 = (FullPhysics::Lidort_Modified_Boolean *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Modified_Boolean_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Boolean_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Boolean const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Boolean_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Boolean_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Modified_Boolean const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Modified_Boolean_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Modified_Boolean_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Control__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Control *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Modified_Control *)new FullPhysics::Lidort_Modified_Control();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Control, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Control__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Control *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Control *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Modified_Control,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Modified_Control" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Control const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Modified_Control" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Control const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Control * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Control *)new FullPhysics::Lidort_Modified_Control((FullPhysics::Lidort_Modified_Control const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Control, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Control(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Modified_Control",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Modified_Control__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Modified_Control__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Modified_Control'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Control::Lidort_Modified_Control()\n"
    "    FullPhysics::Lidort_Modified_Control::Lidort_Modified_Control(FullPhysics::Lidort_Modified_Control const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Modified_Control(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Control *arg1 = (FullPhysics::Lidort_Modified_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Control, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Modified_Control" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Control * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Control_ts_nmoments_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Control *arg1 = (FullPhysics::Lidort_Modified_Control *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Control_ts_nmoments_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Control * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Modified_Control const *)arg1)->ts_nmoments_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Control_ts_nmoments_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Control *arg1 = (FullPhysics::Lidort_Modified_Control *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Control_ts_nmoments_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Control *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Control * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Control_ts_nmoments_input" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_nmoments_input((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Control_ts_nmoments_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Control_ts_nmoments_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Control_ts_nmoments_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Control_ts_nmoments_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Control_ts_nmoments_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Control::ts_nmoments_input() const\n"
    "    FullPhysics::Lidort_Modified_Control::ts_nmoments_input(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Control_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Control *arg1 = (FullPhysics::Lidort_Modified_Control *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Modified_Control_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Control, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Control_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Control const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Control * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Control_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Control_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Modified_Control const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Modified_Control_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Modified_Control, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Modified_Control_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Sunrays__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Sunrays *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Modified_Sunrays *)new FullPhysics::Lidort_Modified_Sunrays();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Sunrays__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Sunrays *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Sunrays *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Modified_Sunrays" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Sunrays const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Modified_Sunrays" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Sunrays const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Sunrays * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Sunrays *)new FullPhysics::Lidort_Modified_Sunrays((FullPhysics::Lidort_Modified_Sunrays const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Sunrays(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Modified_Sunrays",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Modified_Sunrays__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Modified_Sunrays__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Modified_Sunrays'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Sunrays::Lidort_Modified_Sunrays()\n"
    "    FullPhysics::Lidort_Modified_Sunrays::Lidort_Modified_Sunrays(FullPhysics::Lidort_Modified_Sunrays const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Modified_Sunrays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Sunrays *arg1 = (FullPhysics::Lidort_Modified_Sunrays *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Modified_Sunrays" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Sunrays *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Sunrays * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Sunrays_ts_nbeams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Sunrays *arg1 = (FullPhysics::Lidort_Modified_Sunrays *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Sunrays_ts_nbeams" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Sunrays const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Sunrays * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Modified_Sunrays const *)arg1)->ts_nbeams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Sunrays_ts_nbeams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Sunrays *arg1 = (FullPhysics::Lidort_Modified_Sunrays *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Sunrays_ts_nbeams" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Sunrays *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Sunrays * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Sunrays_ts_nbeams" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_nbeams((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Sunrays_ts_nbeams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Sunrays_ts_nbeams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Sunrays_ts_nbeams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Sunrays_ts_nbeams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Sunrays_ts_nbeams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Sunrays::ts_nbeams() const\n"
    "    FullPhysics::Lidort_Modified_Sunrays::ts_nbeams(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Sunrays_ts_beam_szas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Sunrays *arg1 = (FullPhysics::Lidort_Modified_Sunrays *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Sunrays_ts_beam_szas" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Sunrays const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Sunrays * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Modified_Sunrays const *)arg1)->ts_beam_szas();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Sunrays_ts_beam_szas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Sunrays *arg1 = (FullPhysics::Lidort_Modified_Sunrays *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Sunrays_ts_beam_szas" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Sunrays *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Sunrays * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_beam_szas((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Sunrays_ts_beam_szas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Sunrays_ts_beam_szas",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Sunrays_ts_beam_szas__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Sunrays_ts_beam_szas__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Sunrays_ts_beam_szas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Sunrays::ts_beam_szas() const\n"
    "    FullPhysics::Lidort_Modified_Sunrays::ts_beam_szas(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Sunrays_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Sunrays *arg1 = (FullPhysics::Lidort_Modified_Sunrays *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Modified_Sunrays_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Sunrays_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Sunrays const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Sunrays * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Sunrays_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Sunrays_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Modified_Sunrays const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Modified_Sunrays_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Modified_Sunrays_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Uservalues__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Modified_Uservalues *)new FullPhysics::Lidort_Modified_Uservalues();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Uservalues__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Uservalues *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Modified_Uservalues" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Modified_Uservalues" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Uservalues *)new FullPhysics::Lidort_Modified_Uservalues((FullPhysics::Lidort_Modified_Uservalues const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Uservalues(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Modified_Uservalues",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Modified_Uservalues__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Modified_Uservalues__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Modified_Uservalues'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::Lidort_Modified_Uservalues()\n"
    "    FullPhysics::Lidort_Modified_Uservalues::Lidort_Modified_Uservalues(FullPhysics::Lidort_Modified_Uservalues const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Modified_Uservalues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Modified_Uservalues" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_relazms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_n_user_relazms" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->ts_n_user_relazms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_relazms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_n_user_relazms" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Uservalues_ts_n_user_relazms" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_n_user_relazms((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_relazms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_ts_n_user_relazms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Uservalues_ts_n_user_relazms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Uservalues_ts_n_user_relazms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Uservalues_ts_n_user_relazms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_n_user_relazms() const\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_n_user_relazms(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_relazms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_user_relazms" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->ts_user_relazms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_relazms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_user_relazms" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_user_relazms((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_relazms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_ts_user_relazms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Uservalues_ts_user_relazms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Uservalues_ts_user_relazms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Uservalues_ts_user_relazms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_user_relazms() const\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_user_relazms(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_streams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_n_user_streams" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->ts_n_user_streams();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_streams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_n_user_streams" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Uservalues_ts_n_user_streams" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_n_user_streams((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_streams(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_ts_n_user_streams",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Uservalues_ts_n_user_streams__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Uservalues_ts_n_user_streams__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Uservalues_ts_n_user_streams'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_n_user_streams() const\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_n_user_streams(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_angles_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_user_angles_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->ts_user_angles_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_angles_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_user_angles_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_user_angles_input((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_angles_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_ts_user_angles_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Uservalues_ts_user_angles_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Uservalues_ts_user_angles_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Uservalues_ts_user_angles_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_user_angles_input() const\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_user_angles_input(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_levels__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_user_levels" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->ts_user_levels();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_levels__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_user_levels" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_user_levels((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_levels(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_ts_user_levels",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Uservalues_ts_user_levels__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Uservalues_ts_user_levels__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Uservalues_ts_user_levels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_user_levels() const\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_user_levels(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_geometry_specheight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_geometry_specheight" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->ts_geometry_specheight();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_geometry_specheight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_geometry_specheight" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Uservalues_ts_geometry_specheight" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_geometry_specheight((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_geometry_specheight(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_ts_geometry_specheight",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Uservalues_ts_geometry_specheight__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Uservalues_ts_geometry_specheight__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Uservalues_ts_geometry_specheight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_geometry_specheight() const\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_geometry_specheight(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_obsgeoms__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_n_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->ts_n_user_obsgeoms();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_obsgeoms__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_n_user_obsgeoms" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Uservalues_ts_n_user_obsgeoms" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_n_user_obsgeoms((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_obsgeoms(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_ts_n_user_obsgeoms",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Uservalues_ts_n_user_obsgeoms__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Uservalues_ts_n_user_obsgeoms__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Uservalues_ts_n_user_obsgeoms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_n_user_obsgeoms() const\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_n_user_obsgeoms(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_obsgeoms_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_user_obsgeoms_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->ts_user_obsgeoms_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_obsgeoms_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_user_obsgeoms_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_user_obsgeoms_input((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_obsgeoms_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_ts_user_obsgeoms_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Uservalues_ts_user_obsgeoms_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Uservalues_ts_user_obsgeoms_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Uservalues_ts_user_obsgeoms_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_user_obsgeoms_input() const\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_user_obsgeoms_input(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_doublets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_n_user_doublets" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (int *) &((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->ts_n_user_doublets();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_doublets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_n_user_doublets" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Uservalues_ts_n_user_doublets" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_n_user_doublets((int const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_n_user_doublets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_ts_n_user_doublets",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Uservalues_ts_n_user_doublets__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Uservalues_ts_n_user_doublets__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Uservalues_ts_n_user_doublets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_n_user_doublets() const\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_n_user_doublets(int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_doublets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_user_doublets" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    try {
      result = (blitz::Array< double,2 > *) &((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->ts_user_doublets();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[2], stride[2];
    for(int i = 0; i < 2; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 2, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 2>* t = new blitz::Array<double, 2>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_2_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_doublets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  blitz::Array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,2 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_ts_user_doublets" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_2_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 2>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_user_doublets((blitz::Array< double,2 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_ts_user_doublets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_ts_user_doublets",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Uservalues_ts_user_doublets__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Uservalues_ts_user_doublets__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Uservalues_ts_user_doublets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_user_doublets() const\n"
    "    FullPhysics::Lidort_Modified_Uservalues::ts_user_doublets(blitz::Array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Uservalues_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Uservalues *arg1 = (FullPhysics::Lidort_Modified_Uservalues *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Modified_Uservalues_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Uservalues_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Uservalues const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Uservalues_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Uservalues_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Modified_Uservalues const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Modified_Uservalues_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Modified_Uservalues_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Chapman__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Chapman *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Modified_Chapman *)new FullPhysics::Lidort_Modified_Chapman();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Chapman__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Chapman *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Chapman *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Modified_Chapman" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Chapman const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Modified_Chapman" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Chapman const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Chapman * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Chapman *)new FullPhysics::Lidort_Modified_Chapman((FullPhysics::Lidort_Modified_Chapman const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Chapman(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Modified_Chapman",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Modified_Chapman__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Modified_Chapman__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Modified_Chapman'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Chapman::Lidort_Modified_Chapman()\n"
    "    FullPhysics::Lidort_Modified_Chapman::Lidort_Modified_Chapman(FullPhysics::Lidort_Modified_Chapman const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Modified_Chapman(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Chapman *arg1 = (FullPhysics::Lidort_Modified_Chapman *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Modified_Chapman" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Chapman *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Chapman * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Chapman_ts_earth_radius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Chapman *arg1 = (FullPhysics::Lidort_Modified_Chapman *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Chapman_ts_earth_radius" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Chapman const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Chapman * >(argp1);
  {
    try {
      result = (double *) &((FullPhysics::Lidort_Modified_Chapman const *)arg1)->ts_earth_radius();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Chapman_ts_earth_radius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Chapman *arg1 = (FullPhysics::Lidort_Modified_Chapman *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Chapman_ts_earth_radius" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Chapman *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Chapman * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lidort_Modified_Chapman_ts_earth_radius" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->ts_earth_radius((double const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Chapman_ts_earth_radius(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Chapman_ts_earth_radius",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Chapman_ts_earth_radius__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Chapman_ts_earth_radius__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Chapman_ts_earth_radius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Chapman::ts_earth_radius() const\n"
    "    FullPhysics::Lidort_Modified_Chapman::ts_earth_radius(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Chapman_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Chapman *arg1 = (FullPhysics::Lidort_Modified_Chapman *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Modified_Chapman_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Chapman_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Chapman const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Chapman * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Chapman_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Chapman_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Modified_Chapman const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Modified_Chapman_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Modified_Chapman_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Optical__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Optical *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Modified_Optical *)new FullPhysics::Lidort_Modified_Optical();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Optical__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Optical *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Optical *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Modified_Optical" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Optical const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Modified_Optical" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Optical const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Optical * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Optical *)new FullPhysics::Lidort_Modified_Optical((FullPhysics::Lidort_Modified_Optical const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Optical(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Modified_Optical",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Modified_Optical__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Modified_Optical__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Modified_Optical'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Optical::Lidort_Modified_Optical()\n"
    "    FullPhysics::Lidort_Modified_Optical::Lidort_Modified_Optical(FullPhysics::Lidort_Modified_Optical const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Modified_Optical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Optical *arg1 = (FullPhysics::Lidort_Modified_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Modified_Optical" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Optical * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Optical_ts_omega_total_input__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Optical *arg1 = (FullPhysics::Lidort_Modified_Optical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Optical_ts_omega_total_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Optical * >(argp1);
  {
    try {
      result = (blitz::Array< double,1 > *) &((FullPhysics::Lidort_Modified_Optical const *)arg1)->ts_omega_total_input();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    npy_intp dims[1], stride[1];
    for(int i = 0; i < 1; ++i) {
      dims[i] = result->extent(i);
      // Note numpy stride is in terms of bytes, while blitz in in terms
      // of type T.
      stride[i] = result->stride(i) * sizeof(double);
    }
    resultobj = PyArray_New(&PyArray_Type, 1, dims, type_to_npy<double>(), 
      stride, result->data(), 0, 0, 0);
    blitz::Array<double, 1>* t = new blitz::Array<double, 1>(*result);
    PyArray_SetBaseObject
    ((PyArrayObject *)resultobj,
      SWIG_NewPointerObj(SWIG_as_voidptr(t), 
        SWIGTYPE_p_blitz__ArrayT_double_1_t, 
        SWIG_POINTER_NEW | 0 ));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Optical_ts_omega_total_input__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Optical *arg1 = (FullPhysics::Lidort_Modified_Optical *) 0 ;
  blitz::Array< double,1 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blitz::Array< double,1 > a2 ;
  PythonObject numpy2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Optical_ts_omega_total_input" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Optical *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Optical * >(argp1);
  {
    int res = SWIG_ConvertPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_blitz__ArrayT_double_1_t, 
      0 );
    if(!SWIG_IsOK(res)) {
      numpy2.obj = to_numpy<double>(swig_obj[1]);
      if(!numpy2.obj)
      return NULL;
      a2.reference(to_blitz_array<double, 1>(numpy2));
      arg2 = &a2;
    }
  }
  {
    try {
      (arg1)->ts_omega_total_input((blitz::Array< double,1 > const &)*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Optical_ts_omega_total_input(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Optical_ts_omega_total_input",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Optical_ts_omega_total_input__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Optical_ts_omega_total_input__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Optical_ts_omega_total_input'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Optical::ts_omega_total_input() const\n"
    "    FullPhysics::Lidort_Modified_Optical::ts_omega_total_input(blitz::Array< double,1 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Optical_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Optical *arg1 = (FullPhysics::Lidort_Modified_Optical *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Modified_Optical_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Optical_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Optical const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Optical * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Optical_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Optical_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Modified_Optical const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Modified_Optical_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Modified_Optical_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Inputs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FullPhysics::Lidort_Modified_Inputs *)new FullPhysics::Lidort_Modified_Inputs();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Inputs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Inputs *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Lidort_Modified_Inputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Lidort_Modified_Inputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs const &""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Inputs *)new FullPhysics::Lidort_Modified_Inputs((FullPhysics::Lidort_Modified_Inputs const &)*arg1);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Lidort_Modified_Inputs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Lidort_Modified_Inputs",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Lidort_Modified_Inputs__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Lidort_Modified_Inputs__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Lidort_Modified_Inputs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Inputs::Lidort_Modified_Inputs()\n"
    "    FullPhysics::Lidort_Modified_Inputs::Lidort_Modified_Inputs(FullPhysics::Lidort_Modified_Inputs const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Lidort_Modified_Inputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lidort_Modified_Inputs" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  {
    try {
      delete arg1;
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_mbool__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Boolean *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_mbool" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Boolean *) &((FullPhysics::Lidort_Modified_Inputs const *)arg1)->mbool();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_mbool__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  FullPhysics::Lidort_Modified_Boolean *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_mbool" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Modified_Boolean,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Inputs_mbool" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Boolean &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Inputs_mbool" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Boolean &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Modified_Boolean * >(argp2);
  {
    try {
      (arg1)->mbool(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_mbool(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Inputs_mbool",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Inputs_mbool__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Inputs_mbool__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Inputs_mbool'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Inputs::mbool() const\n"
    "    FullPhysics::Lidort_Modified_Inputs::mbool(FullPhysics::Lidort_Modified_Boolean &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_mcont__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Control *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_mcont" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Control *) &((FullPhysics::Lidort_Modified_Inputs const *)arg1)->mcont();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Control, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_mcont__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  FullPhysics::Lidort_Modified_Control *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_mcont" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Modified_Control,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Inputs_mcont" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Control &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Inputs_mcont" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Control &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Modified_Control * >(argp2);
  {
    try {
      (arg1)->mcont(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_mcont(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Inputs_mcont",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Inputs_mcont__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Inputs_mcont__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Inputs_mcont'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Inputs::mcont() const\n"
    "    FullPhysics::Lidort_Modified_Inputs::mcont(FullPhysics::Lidort_Modified_Control &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_msunrays__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Sunrays *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_msunrays" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Sunrays *) &((FullPhysics::Lidort_Modified_Inputs const *)arg1)->msunrays();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_msunrays__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  FullPhysics::Lidort_Modified_Sunrays *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_msunrays" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Modified_Sunrays,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Inputs_msunrays" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Sunrays &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Inputs_msunrays" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Sunrays &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Modified_Sunrays * >(argp2);
  {
    try {
      (arg1)->msunrays(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_msunrays(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Inputs_msunrays",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Inputs_msunrays__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Inputs_msunrays__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Inputs_msunrays'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Inputs::msunrays() const\n"
    "    FullPhysics::Lidort_Modified_Inputs::msunrays(FullPhysics::Lidort_Modified_Sunrays &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_muserval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Uservalues *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_muserval" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Uservalues *) &((FullPhysics::Lidort_Modified_Inputs const *)arg1)->muserval();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_muserval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  FullPhysics::Lidort_Modified_Uservalues *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_muserval" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Modified_Uservalues,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Inputs_muserval" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Uservalues &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Inputs_muserval" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Uservalues &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Modified_Uservalues * >(argp2);
  {
    try {
      (arg1)->muserval(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_muserval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Inputs_muserval",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Inputs_muserval__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Inputs_muserval__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Inputs_muserval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Inputs::muserval() const\n"
    "    FullPhysics::Lidort_Modified_Inputs::muserval(FullPhysics::Lidort_Modified_Uservalues &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_mchapman__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Chapman *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_mchapman" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Chapman *) &((FullPhysics::Lidort_Modified_Inputs const *)arg1)->mchapman();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_mchapman__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  FullPhysics::Lidort_Modified_Chapman *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_mchapman" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Modified_Chapman,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Inputs_mchapman" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Chapman &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Inputs_mchapman" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Chapman &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Modified_Chapman * >(argp2);
  {
    try {
      (arg1)->mchapman(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_mchapman(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Inputs_mchapman",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Inputs_mchapman__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Inputs_mchapman__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Inputs_mchapman'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Inputs::mchapman() const\n"
    "    FullPhysics::Lidort_Modified_Inputs::mchapman(FullPhysics::Lidort_Modified_Chapman &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_moptical__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FullPhysics::Lidort_Modified_Optical *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_moptical" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  {
    try {
      result = (FullPhysics::Lidort_Modified_Optical *) &((FullPhysics::Lidort_Modified_Inputs const *)arg1)->moptical();
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_moptical__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  FullPhysics::Lidort_Modified_Optical *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_moptical" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FullPhysics__Lidort_Modified_Optical,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Inputs_moptical" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Optical &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Inputs_moptical" "', argument " "2"" of type '" "FullPhysics::Lidort_Modified_Optical &""'"); 
  }
  arg2 = reinterpret_cast< FullPhysics::Lidort_Modified_Optical * >(argp2);
  {
    try {
      (arg1)->moptical(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_moptical(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Lidort_Modified_Inputs_moptical",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_Lidort_Modified_Inputs_moptical__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Lidort_Modified_Inputs_moptical__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Lidort_Modified_Inputs_moptical'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullPhysics::Lidort_Modified_Inputs::moptical() const\n"
    "    FullPhysics::Lidort_Modified_Inputs::moptical(FullPhysics::Lidort_Modified_Optical &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Lidort_Modified_Inputs_print_desc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FullPhysics::Lidort_Modified_Inputs *arg1 = (FullPhysics::Lidort_Modified_Inputs *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Lidort_Modified_Inputs_print_desc",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lidort_Modified_Inputs_print_desc" "', argument " "1"" of type '" "FullPhysics::Lidort_Modified_Inputs const *""'"); 
  }
  arg1 = reinterpret_cast< FullPhysics::Lidort_Modified_Inputs * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lidort_Modified_Inputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lidort_Modified_Inputs_print_desc" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((FullPhysics::Lidort_Modified_Inputs const *)arg1)->print(*arg2);
    } catch (Swig::DirectorException &e) {
      SWIG_fail; 
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lidort_Modified_Inputs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char *)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FullPhysics__Lidort_Modified_Inputs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Lidort_Modified_Inputs_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_version_number_get", (PyCFunction)_wrap_Lidort_Pars_lidort_version_number_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_inunit_get", (PyCFunction)_wrap_Lidort_Pars_lidort_inunit_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_scenunit_get", (PyCFunction)_wrap_Lidort_Pars_lidort_scenunit_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_funit_get", (PyCFunction)_wrap_Lidort_Pars_lidort_funit_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_resunit_get", (PyCFunction)_wrap_Lidort_Pars_lidort_resunit_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_errunit_get", (PyCFunction)_wrap_Lidort_Pars_lidort_errunit_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_dbgunit_get", (PyCFunction)_wrap_Lidort_Pars_lidort_dbgunit_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_messages_get", (PyCFunction)_wrap_Lidort_Pars_max_messages_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxstreams_get", (PyCFunction)_wrap_Lidort_Pars_maxstreams_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxlayers_get", (PyCFunction)_wrap_Lidort_Pars_maxlayers_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxfinelayers_get", (PyCFunction)_wrap_Lidort_Pars_maxfinelayers_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxmoments_input_get", (PyCFunction)_wrap_Lidort_Pars_maxmoments_input_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_thermal_coeffs_get", (PyCFunction)_wrap_Lidort_Pars_max_thermal_coeffs_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxbeams_get", (PyCFunction)_wrap_Lidort_Pars_maxbeams_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_user_streams_get", (PyCFunction)_wrap_Lidort_Pars_max_user_streams_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_user_relazms_get", (PyCFunction)_wrap_Lidort_Pars_max_user_relazms_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_user_obsgeoms_get", (PyCFunction)_wrap_Lidort_Pars_max_user_obsgeoms_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_user_levels_get", (PyCFunction)_wrap_Lidort_Pars_max_user_levels_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_partlayers_get", (PyCFunction)_wrap_Lidort_Pars_max_partlayers_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_taylor_terms_get", (PyCFunction)_wrap_Lidort_Pars_max_taylor_terms_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_directions_get", (PyCFunction)_wrap_Lidort_Pars_max_directions_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_brdf_kernels_get", (PyCFunction)_wrap_Lidort_Pars_max_brdf_kernels_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_brdf_parameters_get", (PyCFunction)_wrap_Lidort_Pars_max_brdf_parameters_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxstreams_brdf_get", (PyCFunction)_wrap_Lidort_Pars_maxstreams_brdf_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_msrs_muquad_get", (PyCFunction)_wrap_Lidort_Pars_max_msrs_muquad_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_msrs_phiquad_get", (PyCFunction)_wrap_Lidort_Pars_max_msrs_phiquad_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxstreams_scaling_get", (PyCFunction)_wrap_Lidort_Pars_maxstreams_scaling_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_atmoswfs_get", (PyCFunction)_wrap_Lidort_Pars_max_atmoswfs_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_surfacewfs_get", (PyCFunction)_wrap_Lidort_Pars_max_surfacewfs_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_sleavewfs_get", (PyCFunction)_wrap_Lidort_Pars_max_sleavewfs_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_geometries_get", (PyCFunction)_wrap_Lidort_Pars_max_geometries_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_allstrms_get", (PyCFunction)_wrap_Lidort_Pars_max_allstrms_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_allstrms_p1_get", (PyCFunction)_wrap_Lidort_Pars_max_allstrms_p1_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxmoments_get", (PyCFunction)_wrap_Lidort_Pars_maxmoments_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxfourier_get", (PyCFunction)_wrap_Lidort_Pars_maxfourier_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxsthalf_brdf_get", (PyCFunction)_wrap_Lidort_Pars_maxsthalf_brdf_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxstreams_2_get", (PyCFunction)_wrap_Lidort_Pars_maxstreams_2_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxstreams_p1_get", (PyCFunction)_wrap_Lidort_Pars_maxstreams_p1_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxtotal_get", (PyCFunction)_wrap_Lidort_Pars_maxtotal_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxbandtotal_get", (PyCFunction)_wrap_Lidort_Pars_maxbandtotal_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_one_get", (PyCFunction)_wrap_Lidort_Pars_one_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_zero_get", (PyCFunction)_wrap_Lidort_Pars_zero_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_onep5_get", (PyCFunction)_wrap_Lidort_Pars_onep5_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_two_get", (PyCFunction)_wrap_Lidort_Pars_two_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_three_get", (PyCFunction)_wrap_Lidort_Pars_three_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_four_get", (PyCFunction)_wrap_Lidort_Pars_four_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_quarter_get", (PyCFunction)_wrap_Lidort_Pars_quarter_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_half_get", (PyCFunction)_wrap_Lidort_Pars_half_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_minus_one_get", (PyCFunction)_wrap_Lidort_Pars_minus_one_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_minus_two_get", (PyCFunction)_wrap_Lidort_Pars_minus_two_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_pie_get", (PyCFunction)_wrap_Lidort_Pars_pie_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_deg_to_rad_get", (PyCFunction)_wrap_Lidort_Pars_deg_to_rad_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_pi2_get", (PyCFunction)_wrap_Lidort_Pars_pi2_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_pi4_get", (PyCFunction)_wrap_Lidort_Pars_pi4_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_pio2_get", (PyCFunction)_wrap_Lidort_Pars_pio2_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_pio4_get", (PyCFunction)_wrap_Lidort_Pars_pio4_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_eps3_get", (PyCFunction)_wrap_Lidort_Pars_eps3_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_eps4_get", (PyCFunction)_wrap_Lidort_Pars_eps4_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_eps5_get", (PyCFunction)_wrap_Lidort_Pars_eps5_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_taylor_small_get", (PyCFunction)_wrap_Lidort_Pars_taylor_small_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_smallnum_get", (PyCFunction)_wrap_Lidort_Pars_smallnum_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_bigexp_get", (PyCFunction)_wrap_Lidort_Pars_bigexp_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_hopital_tolerance_get", (PyCFunction)_wrap_Lidort_Pars_hopital_tolerance_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_omega_smallnum_get", (PyCFunction)_wrap_Lidort_Pars_omega_smallnum_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_tau_spath_get", (PyCFunction)_wrap_Lidort_Pars_max_tau_spath_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_tau_upath_get", (PyCFunction)_wrap_Lidort_Pars_max_tau_upath_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_max_tau_qpath_get", (PyCFunction)_wrap_Lidort_Pars_max_tau_qpath_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_serious_get", (PyCFunction)_wrap_Lidort_Pars_lidort_serious_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_warning_get", (PyCFunction)_wrap_Lidort_Pars_lidort_warning_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_info_get", (PyCFunction)_wrap_Lidort_Pars_lidort_info_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_debug_get", (PyCFunction)_wrap_Lidort_Pars_lidort_debug_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidort_success_get", (PyCFunction)_wrap_Lidort_Pars_lidort_success_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_upidx_get", (PyCFunction)_wrap_Lidort_Pars_upidx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_dnidx_get", (PyCFunction)_wrap_Lidort_Pars_dnidx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lambertian_idx_get", (PyCFunction)_wrap_Lidort_Pars_lambertian_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_rossthin_idx_get", (PyCFunction)_wrap_Lidort_Pars_rossthin_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_rossthick_idx_get", (PyCFunction)_wrap_Lidort_Pars_rossthick_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lisparse_idx_get", (PyCFunction)_wrap_Lidort_Pars_lisparse_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_lidense_idx_get", (PyCFunction)_wrap_Lidort_Pars_lidense_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_hapke_idx_get", (PyCFunction)_wrap_Lidort_Pars_hapke_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_roujean_idx_get", (PyCFunction)_wrap_Lidort_Pars_roujean_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_rahman_idx_get", (PyCFunction)_wrap_Lidort_Pars_rahman_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_coxmunk_idx_get", (PyCFunction)_wrap_Lidort_Pars_coxmunk_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_bpdfsoil_idx_get", (PyCFunction)_wrap_Lidort_Pars_bpdfsoil_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_bpdfvegn_idx_get", (PyCFunction)_wrap_Lidort_Pars_bpdfvegn_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_bpdfndvi_idx_get", (PyCFunction)_wrap_Lidort_Pars_bpdfndvi_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_newcmglint_idx_get", (PyCFunction)_wrap_Lidort_Pars_newcmglint_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_rtkhotspot_idx_get", (PyCFunction)_wrap_Lidort_Pars_rtkhotspot_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_modfresnel_idx_get", (PyCFunction)_wrap_Lidort_Pars_modfresnel_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_snowbrdf_idx_get", (PyCFunction)_wrap_Lidort_Pars_snowbrdf_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_maxbrdf_idx_get", (PyCFunction)_wrap_Lidort_Pars_maxbrdf_idx_get, METH_O, NULL},
	 { (char *)"Lidort_Pars_instance", (PyCFunction)_wrap_Lidort_Pars_instance, METH_NOARGS, (char *)"\n"
		"\n"
		"static Lidort_Pars& FullPhysics::Lidort_Pars::instance()\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Pars", (PyCFunction)_wrap_delete_Lidort_Pars, METH_O, NULL},
	 { (char *)"Lidort_Pars_swigregister", Lidort_Pars_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Structure_fortran_type_ptr", (PyCFunction)_wrap_Lidort_Structure_fortran_type_ptr, METH_O, (char *)"\n"
		"\n"
		"void* FullPhysics::Lidort_Structure::fortran_type_ptr()\n"
		"\n"
		""},
	 { (char *)"Lidort_Structure___str__", (PyCFunction)_wrap_Lidort_Structure___str__, METH_O, NULL},
	 { (char *)"delete_Lidort_Structure", (PyCFunction)_wrap_delete_Lidort_Structure, METH_O, NULL},
	 { (char *)"Lidort_Structure_swigregister", Lidort_Structure_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Brdf_Linsup_Inputs", _wrap_new_Brdf_Linsup_Inputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Linsup_Inputs::Brdf_Linsup_Inputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Brdf_Linsup_Inputs", (PyCFunction)_wrap_delete_Brdf_Linsup_Inputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Linsup_Inputs::~Brdf_Linsup_Inputs()\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs", _wrap_Brdf_Linsup_Inputs_bs_do_kernel_factor_wfs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Inputs::bs_do_kernel_factor_wfs(const blitz::Array< bool, 1 > &bs_do_kernel_factor_wfs_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_bs_do_kernel_params_wfs", _wrap_Brdf_Linsup_Inputs_bs_do_kernel_params_wfs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Inputs::bs_do_kernel_params_wfs(const blitz::Array< bool, 2 > &bs_do_kernel_params_wfs_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_bs_do_kparams_derivs", _wrap_Brdf_Linsup_Inputs_bs_do_kparams_derivs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Inputs::bs_do_kparams_derivs(const blitz::Array< bool, 1 > &bs_do_kparams_derivs_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_bs_n_surface_wfs", _wrap_Brdf_Linsup_Inputs_bs_n_surface_wfs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Inputs::bs_n_surface_wfs(const int &bs_n_surface_wfs_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs", _wrap_Brdf_Linsup_Inputs_bs_n_kernel_factor_wfs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Inputs::bs_n_kernel_factor_wfs(const int &bs_n_kernel_factor_wfs_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_bs_n_kernel_params_wfs", _wrap_Brdf_Linsup_Inputs_bs_n_kernel_params_wfs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Inputs::bs_n_kernel_params_wfs(const int &bs_n_kernel_params_wfs_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_bs_do_bsavalue_wf", _wrap_Brdf_Linsup_Inputs_bs_do_bsavalue_wf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Inputs::bs_do_bsavalue_wf(const bool &bs_do_bsavalue_wf_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_bs_do_wsavalue_wf", _wrap_Brdf_Linsup_Inputs_bs_do_wsavalue_wf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Inputs::bs_do_wsavalue_wf(const bool &bs_do_wsavalue_wf_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_bs_do_windspeed_wf", _wrap_Brdf_Linsup_Inputs_bs_do_windspeed_wf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Inputs::bs_do_windspeed_wf(const bool &bs_do_windspeed_wf_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_print_desc", _wrap_Brdf_Linsup_Inputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Brdf_Linsup_Inputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Inputs_swigregister", Brdf_Linsup_Inputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Brdf_Linsup_Inputs_swiginit", Brdf_Linsup_Inputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Brdf_Linsup_Outputs", _wrap_new_Brdf_Linsup_Outputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Linsup_Outputs::Brdf_Linsup_Outputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Brdf_Linsup_Outputs", (PyCFunction)_wrap_delete_Brdf_Linsup_Outputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Linsup_Outputs::~Brdf_Linsup_Outputs()\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc", _wrap_Brdf_Linsup_Outputs_bs_ls_dbounce_brdfunc, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Outputs::bs_ls_dbounce_brdfunc(const blitz::Array< double, 4 > &bs_ls_dbounce_brdfunc_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Outputs_bs_ls_brdf_f_0", _wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Outputs::bs_ls_brdf_f_0(const blitz::Array< double, 4 > &bs_ls_brdf_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Outputs_bs_ls_brdf_f", _wrap_Brdf_Linsup_Outputs_bs_ls_brdf_f, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Outputs::bs_ls_brdf_f(const blitz::Array< double, 4 > &bs_ls_brdf_f_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0", _wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Outputs::bs_ls_user_brdf_f_0(const blitz::Array< double, 4 > &bs_ls_user_brdf_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Outputs_bs_ls_user_brdf_f", _wrap_Brdf_Linsup_Outputs_bs_ls_user_brdf_f, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Outputs::bs_ls_user_brdf_f(const blitz::Array< double, 4 > &bs_ls_user_brdf_f_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Outputs_bs_ls_emissivity", _wrap_Brdf_Linsup_Outputs_bs_ls_emissivity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Outputs::bs_ls_emissivity(const blitz::Array< double, 2 > &bs_ls_emissivity_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Outputs_bs_ls_user_emissivity", _wrap_Brdf_Linsup_Outputs_bs_ls_user_emissivity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Linsup_Outputs::bs_ls_user_emissivity(const blitz::Array< double, 2 > &bs_ls_user_emissivity_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Outputs_print_desc", _wrap_Brdf_Linsup_Outputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Brdf_Linsup_Outputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Brdf_Linsup_Outputs_swigregister", Brdf_Linsup_Outputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Brdf_Linsup_Outputs_swiginit", Brdf_Linsup_Outputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Brdf_Sup_Inputs", _wrap_new_Brdf_Sup_Inputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Sup_Inputs::Brdf_Sup_Inputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Brdf_Sup_Inputs", (PyCFunction)_wrap_delete_Brdf_Sup_Inputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Sup_Inputs::~Brdf_Sup_Inputs()\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_brdf_surface", _wrap_Brdf_Sup_Inputs_bs_do_brdf_surface, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_brdf_surface(const bool &bs_do_brdf_surface_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_surface_emission", _wrap_Brdf_Sup_Inputs_bs_do_surface_emission, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_surface_emission(const bool &bs_do_surface_emission_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_solar_sources", _wrap_Brdf_Sup_Inputs_bs_do_solar_sources, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_solar_sources(const bool &bs_do_solar_sources_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_user_streams", _wrap_Brdf_Sup_Inputs_bs_do_user_streams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_user_streams(const bool &bs_do_user_streams_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_user_obsgeoms", _wrap_Brdf_Sup_Inputs_bs_do_user_obsgeoms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_user_obsgeoms(const bool &bs_do_user_obsgeoms_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_doublet_geometry", _wrap_Brdf_Sup_Inputs_bs_do_doublet_geometry, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_doublet_geometry(const bool &bs_do_doublet_geometry_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_nstreams", _wrap_Brdf_Sup_Inputs_bs_nstreams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_nstreams(const int &bs_nstreams_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_nbeams", _wrap_Brdf_Sup_Inputs_bs_nbeams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_nbeams(const int &bs_nbeams_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_beam_szas", _wrap_Brdf_Sup_Inputs_bs_beam_szas, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_beam_szas(const blitz::Array< double, 1 > &bs_beam_szas_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_n_user_relazms", _wrap_Brdf_Sup_Inputs_bs_n_user_relazms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_n_user_relazms(const int &bs_n_user_relazms_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_user_relazms", _wrap_Brdf_Sup_Inputs_bs_user_relazms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_user_relazms(const blitz::Array< double, 1 > &bs_user_relazms_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_n_user_streams", _wrap_Brdf_Sup_Inputs_bs_n_user_streams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_n_user_streams(const int &bs_n_user_streams_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_user_angles_input", _wrap_Brdf_Sup_Inputs_bs_user_angles_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_user_angles_input(const blitz::Array< double, 1 > &bs_user_angles_input_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_n_user_obsgeoms", _wrap_Brdf_Sup_Inputs_bs_n_user_obsgeoms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_n_user_obsgeoms(const int &bs_n_user_obsgeoms_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_user_obsgeoms", _wrap_Brdf_Sup_Inputs_bs_user_obsgeoms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_user_obsgeoms(const blitz::Array< double, 2 > &bs_user_obsgeoms_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_n_user_doublets", _wrap_Brdf_Sup_Inputs_bs_n_user_doublets, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_n_user_doublets(const int &bs_n_user_doublets_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_user_doublets", _wrap_Brdf_Sup_Inputs_bs_user_doublets, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_user_doublets(const blitz::Array< double, 2 > &bs_user_doublets_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_n_brdf_kernels", _wrap_Brdf_Sup_Inputs_bs_n_brdf_kernels, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_n_brdf_kernels(const int &bs_n_brdf_kernels_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_brdf_names", (PyCFunction)_wrap_Brdf_Sup_Inputs_bs_brdf_names, METH_O, (char *)"\n"
		"\n"
		"const std::vector< std::string > FullPhysics::Brdf_Sup_Inputs::bs_brdf_names() const\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_which_brdf", _wrap_Brdf_Sup_Inputs_bs_which_brdf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_which_brdf(const blitz::Array< int, 1 > &bs_which_brdf_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_n_brdf_parameters", _wrap_Brdf_Sup_Inputs_bs_n_brdf_parameters, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_n_brdf_parameters(const blitz::Array< int, 1 > &bs_n_brdf_parameters_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_brdf_parameters", _wrap_Brdf_Sup_Inputs_bs_brdf_parameters, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_brdf_parameters(const blitz::Array< double, 2 > &bs_brdf_parameters_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_lambertian_kernel_flag", _wrap_Brdf_Sup_Inputs_bs_lambertian_kernel_flag, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_lambertian_kernel_flag(const blitz::Array< bool, 1 > &bs_lambertian_kernel_flag_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_brdf_factors", _wrap_Brdf_Sup_Inputs_bs_brdf_factors, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_brdf_factors(const blitz::Array< double, 1 > &bs_brdf_factors_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_nstreams_brdf", _wrap_Brdf_Sup_Inputs_bs_nstreams_brdf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_nstreams_brdf(const int &bs_nstreams_brdf_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_shadow_effect", _wrap_Brdf_Sup_Inputs_bs_do_shadow_effect, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_shadow_effect(const bool &bs_do_shadow_effect_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_directbounce_only", _wrap_Brdf_Sup_Inputs_bs_do_directbounce_only, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_directbounce_only(const bool &bs_do_directbounce_only_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_wsabsa_output", _wrap_Brdf_Sup_Inputs_bs_do_wsabsa_output, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_wsabsa_output(const bool &bs_do_wsabsa_output_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_wsa_scaling", _wrap_Brdf_Sup_Inputs_bs_do_wsa_scaling, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_wsa_scaling(const bool &bs_do_wsa_scaling_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_bsa_scaling", _wrap_Brdf_Sup_Inputs_bs_do_bsa_scaling, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_bsa_scaling(const bool &bs_do_bsa_scaling_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_wsa_value", _wrap_Brdf_Sup_Inputs_bs_wsa_value, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_wsa_value(const double &bs_wsa_value_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_bsa_value", _wrap_Brdf_Sup_Inputs_bs_bsa_value, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_bsa_value(const double &bs_bsa_value_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_newcmglint", _wrap_Brdf_Sup_Inputs_bs_do_newcmglint, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_newcmglint(const bool &bs_do_newcmglint_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_salinity", _wrap_Brdf_Sup_Inputs_bs_salinity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_salinity(const double &bs_salinity_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_wavelength", _wrap_Brdf_Sup_Inputs_bs_wavelength, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_wavelength(const double &bs_wavelength_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_windspeed", _wrap_Brdf_Sup_Inputs_bs_windspeed, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_windspeed(const double &bs_windspeed_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_winddir", _wrap_Brdf_Sup_Inputs_bs_winddir, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_winddir(const blitz::Array< double, 1 > &bs_winddir_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_glintshadow", _wrap_Brdf_Sup_Inputs_bs_do_glintshadow, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_glintshadow(const bool &bs_do_glintshadow_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_foamoption", _wrap_Brdf_Sup_Inputs_bs_do_foamoption, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_foamoption(const bool &bs_do_foamoption_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_facetisotropy", _wrap_Brdf_Sup_Inputs_bs_do_facetisotropy, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_facetisotropy(const bool &bs_do_facetisotropy_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_glitter_msrcorr", _wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_glitter_msrcorr(const bool &bs_do_glitter_msrcorr_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly", _wrap_Brdf_Sup_Inputs_bs_do_glitter_msrcorr_dbonly, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_do_glitter_msrcorr_dbonly(const bool &bs_do_glitter_msrcorr_dbonly_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_glitter_msrcorr_order", _wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_order, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_glitter_msrcorr_order(const int &bs_glitter_msrcorr_order_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad", _wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nmuquad, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_glitter_msrcorr_nmuquad(const int &bs_glitter_msrcorr_nmuquad_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad", _wrap_Brdf_Sup_Inputs_bs_glitter_msrcorr_nphiquad, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Inputs::bs_glitter_msrcorr_nphiquad(const int &bs_glitter_msrcorr_nphiquad_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_print_desc", _wrap_Brdf_Sup_Inputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Brdf_Sup_Inputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Inputs_swigregister", Brdf_Sup_Inputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Brdf_Sup_Inputs_swiginit", Brdf_Sup_Inputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Brdf_Sup_Outputs", _wrap_new_Brdf_Sup_Outputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Sup_Outputs::Brdf_Sup_Outputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Brdf_Sup_Outputs", (PyCFunction)_wrap_delete_Brdf_Sup_Outputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Sup_Outputs::~Brdf_Sup_Outputs()\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_dbounce_brdfunc", _wrap_Brdf_Sup_Outputs_bs_dbounce_brdfunc, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_dbounce_brdfunc(const blitz::Array< double, 3 > &bs_dbounce_brdfunc_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_brdf_f_0", _wrap_Brdf_Sup_Outputs_bs_brdf_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_brdf_f_0(const blitz::Array< double, 3 > &bs_brdf_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_brdf_f", _wrap_Brdf_Sup_Outputs_bs_brdf_f, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_brdf_f(const blitz::Array< double, 3 > &bs_brdf_f_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_user_brdf_f_0", _wrap_Brdf_Sup_Outputs_bs_user_brdf_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_user_brdf_f_0(const blitz::Array< double, 3 > &bs_user_brdf_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_user_brdf_f", _wrap_Brdf_Sup_Outputs_bs_user_brdf_f, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_user_brdf_f(const blitz::Array< double, 3 > &bs_user_brdf_f_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_emissivity", _wrap_Brdf_Sup_Outputs_bs_emissivity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_emissivity(const blitz::Array< double, 1 > &bs_emissivity_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_user_emissivity", _wrap_Brdf_Sup_Outputs_bs_user_emissivity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_user_emissivity(const blitz::Array< double, 1 > &bs_user_emissivity_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_wsa_calculated", _wrap_Brdf_Sup_Outputs_bs_wsa_calculated, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_wsa_calculated(const double &bs_wsa_calculated_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_wsa_kernels", _wrap_Brdf_Sup_Outputs_bs_wsa_kernels, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_wsa_kernels(const blitz::Array< double, 1 > &bs_wsa_kernels_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_bsa_calculated", _wrap_Brdf_Sup_Outputs_bs_bsa_calculated, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_bsa_calculated(const double &bs_bsa_calculated_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_bs_bsa_kernels", _wrap_Brdf_Sup_Outputs_bs_bsa_kernels, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Sup_Outputs::bs_bsa_kernels(const blitz::Array< double, 1 > &bs_bsa_kernels_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_print_desc", _wrap_Brdf_Sup_Outputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Brdf_Sup_Outputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Brdf_Sup_Outputs_swigregister", Brdf_Sup_Outputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Brdf_Sup_Outputs_swiginit", Brdf_Sup_Outputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Brdf_Input_Exception_Handling", _wrap_new_Brdf_Input_Exception_Handling, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Input_Exception_Handling::Brdf_Input_Exception_Handling(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Brdf_Input_Exception_Handling", (PyCFunction)_wrap_delete_Brdf_Input_Exception_Handling, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Input_Exception_Handling::~Brdf_Input_Exception_Handling()\n"
		"\n"
		""},
	 { (char *)"Brdf_Input_Exception_Handling_bs_status_inputread", _wrap_Brdf_Input_Exception_Handling_bs_status_inputread, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Input_Exception_Handling::bs_status_inputread(const int &bs_status_inputread_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Input_Exception_Handling_bs_ninputmessages", _wrap_Brdf_Input_Exception_Handling_bs_ninputmessages, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Input_Exception_Handling::bs_ninputmessages(const int &bs_ninputmessages_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Input_Exception_Handling_bs_inputmessages", (PyCFunction)_wrap_Brdf_Input_Exception_Handling_bs_inputmessages, METH_O, (char *)"\n"
		"\n"
		"const std::vector< std::string > FullPhysics::Brdf_Input_Exception_Handling::bs_inputmessages() const\n"
		"\n"
		""},
	 { (char *)"Brdf_Input_Exception_Handling_bs_inputactions", (PyCFunction)_wrap_Brdf_Input_Exception_Handling_bs_inputactions, METH_O, (char *)"\n"
		"\n"
		"const std::vector< std::string > FullPhysics::Brdf_Input_Exception_Handling::bs_inputactions() const\n"
		"\n"
		""},
	 { (char *)"Brdf_Input_Exception_Handling_print_desc", _wrap_Brdf_Input_Exception_Handling_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Brdf_Input_Exception_Handling::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Brdf_Input_Exception_Handling_swigregister", Brdf_Input_Exception_Handling_swigregister, METH_VARARGS, NULL},
	 { (char *)"Brdf_Input_Exception_Handling_swiginit", Brdf_Input_Exception_Handling_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Brdf_Output_Exception_Handling", _wrap_new_Brdf_Output_Exception_Handling, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Output_Exception_Handling::Brdf_Output_Exception_Handling(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Brdf_Output_Exception_Handling", (PyCFunction)_wrap_delete_Brdf_Output_Exception_Handling, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Brdf_Output_Exception_Handling::~Brdf_Output_Exception_Handling()\n"
		"\n"
		""},
	 { (char *)"Brdf_Output_Exception_Handling_bs_status_output", _wrap_Brdf_Output_Exception_Handling_bs_status_output, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Output_Exception_Handling::bs_status_output(const int &bs_status_output_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Output_Exception_Handling_bs_noutputmessages", _wrap_Brdf_Output_Exception_Handling_bs_noutputmessages, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Brdf_Output_Exception_Handling::bs_noutputmessages(const int &bs_noutputmessages_in)\n"
		"\n"
		""},
	 { (char *)"Brdf_Output_Exception_Handling_bs_outputmessages", (PyCFunction)_wrap_Brdf_Output_Exception_Handling_bs_outputmessages, METH_O, (char *)"\n"
		"\n"
		"const std::vector< std::string > FullPhysics::Brdf_Output_Exception_Handling::bs_outputmessages() const\n"
		"\n"
		""},
	 { (char *)"Brdf_Output_Exception_Handling_print_desc", _wrap_Brdf_Output_Exception_Handling_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Brdf_Output_Exception_Handling::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Brdf_Output_Exception_Handling_swigregister", Brdf_Output_Exception_Handling_swigregister, METH_VARARGS, NULL},
	 { (char *)"Brdf_Output_Exception_Handling_swiginit", Brdf_Output_Exception_Handling_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Sleave_Sup_Inputs", _wrap_new_Sleave_Sup_Inputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Sleave_Sup_Inputs::Sleave_Sup_Inputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Sleave_Sup_Inputs", (PyCFunction)_wrap_delete_Sleave_Sup_Inputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Sleave_Sup_Inputs::~Sleave_Sup_Inputs()\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_sleaving", _wrap_Sleave_Sup_Inputs_sl_do_sleaving, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_sleaving(const bool &sl_do_sleaving_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_isotropic", _wrap_Sleave_Sup_Inputs_sl_do_isotropic, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_isotropic(const bool &sl_do_isotropic_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_roughsurface", _wrap_Sleave_Sup_Inputs_sl_do_roughsurface, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_roughsurface(const bool &sl_do_roughsurface_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_exact", _wrap_Sleave_Sup_Inputs_sl_do_exact, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_exact(const bool &sl_do_exact_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_exactonly", _wrap_Sleave_Sup_Inputs_sl_do_exactonly, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_exactonly(const bool &sl_do_exactonly_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_fluorescence", _wrap_Sleave_Sup_Inputs_sl_do_fluorescence, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_fluorescence(const bool &sl_do_fluorescence_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_solar_sources", _wrap_Sleave_Sup_Inputs_sl_do_solar_sources, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_solar_sources(const bool &sl_do_solar_sources_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_sleave_datapath", (PyCFunction)_wrap_Sleave_Sup_Inputs_sl_sleave_datapath, METH_O, (char *)"\n"
		"\n"
		"const std::string FullPhysics::Sleave_Sup_Inputs::sl_sleave_datapath() const\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_user_streams", _wrap_Sleave_Sup_Inputs_sl_do_user_streams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_user_streams(const bool &sl_do_user_streams_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_user_obsgeoms", _wrap_Sleave_Sup_Inputs_sl_do_user_obsgeoms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_user_obsgeoms(const bool &sl_do_user_obsgeoms_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_doublet_geometry", _wrap_Sleave_Sup_Inputs_sl_do_doublet_geometry, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_doublet_geometry(const bool &sl_do_doublet_geometry_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_nstreams", _wrap_Sleave_Sup_Inputs_sl_nstreams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_nstreams(const int &sl_nstreams_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_nbeams", _wrap_Sleave_Sup_Inputs_sl_nbeams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_nbeams(const int &sl_nbeams_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_beam_szas", _wrap_Sleave_Sup_Inputs_sl_beam_szas, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_beam_szas(const blitz::Array< double, 1 > &sl_beam_szas_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_n_user_relazms", _wrap_Sleave_Sup_Inputs_sl_n_user_relazms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_n_user_relazms(const int &sl_n_user_relazms_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_user_relazms", _wrap_Sleave_Sup_Inputs_sl_user_relazms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_user_relazms(const blitz::Array< double, 1 > &sl_user_relazms_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_n_user_streams", _wrap_Sleave_Sup_Inputs_sl_n_user_streams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_n_user_streams(const int &sl_n_user_streams_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_user_angles_input", _wrap_Sleave_Sup_Inputs_sl_user_angles_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_user_angles_input(const blitz::Array< double, 1 > &sl_user_angles_input_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_n_user_obsgeoms", _wrap_Sleave_Sup_Inputs_sl_n_user_obsgeoms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_n_user_obsgeoms(const int &sl_n_user_obsgeoms_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_user_obsgeoms", _wrap_Sleave_Sup_Inputs_sl_user_obsgeoms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_user_obsgeoms(const blitz::Array< double, 2 > &sl_user_obsgeoms_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_n_user_doublets", _wrap_Sleave_Sup_Inputs_sl_n_user_doublets, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_n_user_doublets(const int &sl_n_user_doublets_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_user_doublets", _wrap_Sleave_Sup_Inputs_sl_user_doublets, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_user_doublets(const blitz::Array< double, 2 > &sl_user_doublets_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_salinity", _wrap_Sleave_Sup_Inputs_sl_salinity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_salinity(const double &sl_salinity_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_chlorconc", _wrap_Sleave_Sup_Inputs_sl_chlorconc, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_chlorconc(const double &sl_chlorconc_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_wavelength", _wrap_Sleave_Sup_Inputs_sl_wavelength, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_wavelength(const double &sl_wavelength_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_azimuthdep", _wrap_Sleave_Sup_Inputs_sl_azimuthdep, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_azimuthdep(const bool &sl_azimuthdep_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_fourier_output", _wrap_Sleave_Sup_Inputs_sl_do_fourier_output, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_fourier_output(const bool &sl_do_fourier_output_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_windspeed", _wrap_Sleave_Sup_Inputs_sl_windspeed, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_windspeed(const double &sl_windspeed_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_winddir", _wrap_Sleave_Sup_Inputs_sl_winddir, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_winddir(const blitz::Array< double, 1 > &sl_winddir_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_glintshadow", _wrap_Sleave_Sup_Inputs_sl_do_glintshadow, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_glintshadow(const bool &sl_do_glintshadow_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_foamoption", _wrap_Sleave_Sup_Inputs_sl_do_foamoption, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_foamoption(const bool &sl_do_foamoption_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_do_facetisotropy", _wrap_Sleave_Sup_Inputs_sl_do_facetisotropy, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_do_facetisotropy(const bool &sl_do_facetisotropy_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_fl_wavelength", _wrap_Sleave_Sup_Inputs_sl_fl_wavelength, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_fl_wavelength(const double &sl_fl_wavelength_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_fl_latitude", _wrap_Sleave_Sup_Inputs_sl_fl_latitude, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_fl_latitude(const double &sl_fl_latitude_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_fl_longitude", _wrap_Sleave_Sup_Inputs_sl_fl_longitude, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_fl_longitude(const double &sl_fl_longitude_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_fl_epoch", _wrap_Sleave_Sup_Inputs_sl_fl_epoch, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_fl_epoch(const blitz::Array< int, 1 > &sl_fl_epoch_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_fl_amplitude755", _wrap_Sleave_Sup_Inputs_sl_fl_amplitude755, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_fl_amplitude755(const double &sl_fl_amplitude755_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_fl_do_datagaussian", _wrap_Sleave_Sup_Inputs_sl_fl_do_datagaussian, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_fl_do_datagaussian(const bool &sl_fl_do_datagaussian_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_sl_fl_inputgaussians", _wrap_Sleave_Sup_Inputs_sl_fl_inputgaussians, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Sleave_Sup_Inputs::sl_fl_inputgaussians(const blitz::Array< double, 2 > &sl_fl_inputgaussians_in)\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_print_desc", _wrap_Sleave_Sup_Inputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Sleave_Sup_Inputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Sleave_Sup_Inputs_swigregister", Sleave_Sup_Inputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Sleave_Sup_Inputs_swiginit", Sleave_Sup_Inputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Lincontrol", _wrap_new_Lidort_Fixed_Lincontrol, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Lincontrol::Lidort_Fixed_Lincontrol(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Lincontrol", (PyCFunction)_wrap_delete_Lidort_Fixed_Lincontrol, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Lincontrol::~Lidort_Fixed_Lincontrol()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lincontrol_ts_layer_vary_flag", _wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_flag, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Lincontrol::ts_layer_vary_flag(const blitz::Array< bool, 1 > &ts_layer_vary_flag_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lincontrol_ts_layer_vary_number", _wrap_Lidort_Fixed_Lincontrol_ts_layer_vary_number, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Lincontrol::ts_layer_vary_number(const blitz::Array< int, 1 > &ts_layer_vary_number_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs", _wrap_Lidort_Fixed_Lincontrol_ts_n_totalcolumn_wfs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Lincontrol::ts_n_totalcolumn_wfs(const int &ts_n_totalcolumn_wfs_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lincontrol_ts_n_surface_wfs", _wrap_Lidort_Fixed_Lincontrol_ts_n_surface_wfs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Lincontrol::ts_n_surface_wfs(const int &ts_n_surface_wfs_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lincontrol_ts_n_sleave_wfs", _wrap_Lidort_Fixed_Lincontrol_ts_n_sleave_wfs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Lincontrol::ts_n_sleave_wfs(const int &ts_n_sleave_wfs_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lincontrol_ts_columnwf_names", (PyCFunction)_wrap_Lidort_Fixed_Lincontrol_ts_columnwf_names, METH_O, (char *)"\n"
		"\n"
		"const std::vector< std::string > FullPhysics::Lidort_Fixed_Lincontrol::ts_columnwf_names() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lincontrol_ts_profilewf_names", (PyCFunction)_wrap_Lidort_Fixed_Lincontrol_ts_profilewf_names, METH_O, (char *)"\n"
		"\n"
		"const std::vector< std::string > FullPhysics::Lidort_Fixed_Lincontrol::ts_profilewf_names() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lincontrol_print_desc", _wrap_Lidort_Fixed_Lincontrol_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Lincontrol::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lincontrol_swigregister", Lidort_Fixed_Lincontrol_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Lincontrol_swiginit", Lidort_Fixed_Lincontrol_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Linoptical", _wrap_new_Lidort_Fixed_Linoptical, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Linoptical::Lidort_Fixed_Linoptical(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Linoptical", (PyCFunction)_wrap_delete_Lidort_Fixed_Linoptical, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Linoptical::~Lidort_Fixed_Linoptical()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Linoptical_ts_l_deltau_vert_input", _wrap_Lidort_Fixed_Linoptical_ts_l_deltau_vert_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Linoptical::ts_l_deltau_vert_input(const blitz::Array< double, 2 > &ts_l_deltau_vert_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Linoptical_ts_l_omega_total_input", _wrap_Lidort_Fixed_Linoptical_ts_l_omega_total_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Linoptical::ts_l_omega_total_input(const blitz::Array< double, 2 > &ts_l_omega_total_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input", _wrap_Lidort_Fixed_Linoptical_ts_l_phasmoms_total_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Linoptical::ts_l_phasmoms_total_input(const blitz::Array< double, 3 > &ts_l_phasmoms_total_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up", _wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_up, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Linoptical::ts_l_phasfunc_input_up(const blitz::Array< double, 3 > &ts_l_phasfunc_input_up_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn", _wrap_Lidort_Fixed_Linoptical_ts_l_phasfunc_input_dn, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Linoptical::ts_l_phasfunc_input_dn(const blitz::Array< double, 3 > &ts_l_phasfunc_input_dn_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Linoptical_print_desc", _wrap_Lidort_Fixed_Linoptical_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Linoptical::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Linoptical_swigregister", Lidort_Fixed_Linoptical_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Linoptical_swiginit", Lidort_Fixed_Linoptical_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Lininputs", _wrap_new_Lidort_Fixed_Lininputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Lininputs::Lidort_Fixed_Lininputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Lininputs", (PyCFunction)_wrap_delete_Lidort_Fixed_Lininputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Lininputs::~Lidort_Fixed_Lininputs()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lininputs_cont", _wrap_Lidort_Fixed_Lininputs_cont, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Lininputs::cont(Lidort_Fixed_Lincontrol &cont_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lininputs_optical", _wrap_Lidort_Fixed_Lininputs_optical, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Lininputs::optical(Lidort_Fixed_Linoptical &optical_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lininputs_print_desc", _wrap_Lidort_Fixed_Lininputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Lininputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Lininputs_swigregister", Lidort_Fixed_Lininputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Lininputs_swiginit", Lidort_Fixed_Lininputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Modified_Lincontrol", _wrap_new_Lidort_Modified_Lincontrol, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Lincontrol::Lidort_Modified_Lincontrol(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Modified_Lincontrol", (PyCFunction)_wrap_delete_Lidort_Modified_Lincontrol, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Lincontrol::~Lidort_Modified_Lincontrol()\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_ts_do_column_linearization", _wrap_Lidort_Modified_Lincontrol_ts_do_column_linearization, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Lincontrol::ts_do_column_linearization(const bool &ts_do_column_linearization_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_ts_do_profile_linearization", _wrap_Lidort_Modified_Lincontrol_ts_do_profile_linearization, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Lincontrol::ts_do_profile_linearization(const bool &ts_do_profile_linearization_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_ts_do_atmos_linearization", _wrap_Lidort_Modified_Lincontrol_ts_do_atmos_linearization, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Lincontrol::ts_do_atmos_linearization(const bool &ts_do_atmos_linearization_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_ts_do_surface_linearization", _wrap_Lidort_Modified_Lincontrol_ts_do_surface_linearization, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Lincontrol::ts_do_surface_linearization(const bool &ts_do_surface_linearization_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_ts_do_linearization", _wrap_Lidort_Modified_Lincontrol_ts_do_linearization, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Lincontrol::ts_do_linearization(const bool &ts_do_linearization_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_ts_do_simulation_only", _wrap_Lidort_Modified_Lincontrol_ts_do_simulation_only, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Lincontrol::ts_do_simulation_only(const bool &ts_do_simulation_only_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_ts_do_atmos_lbbf", _wrap_Lidort_Modified_Lincontrol_ts_do_atmos_lbbf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Lincontrol::ts_do_atmos_lbbf(const bool &ts_do_atmos_lbbf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_ts_do_surface_lbbf", _wrap_Lidort_Modified_Lincontrol_ts_do_surface_lbbf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Lincontrol::ts_do_surface_lbbf(const bool &ts_do_surface_lbbf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_ts_do_sleave_wfs", _wrap_Lidort_Modified_Lincontrol_ts_do_sleave_wfs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Lincontrol::ts_do_sleave_wfs(const bool &ts_do_sleave_wfs_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_print_desc", _wrap_Lidort_Modified_Lincontrol_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Modified_Lincontrol::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lincontrol_swigregister", Lidort_Modified_Lincontrol_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Modified_Lincontrol_swiginit", Lidort_Modified_Lincontrol_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Modified_Lininputs", _wrap_new_Lidort_Modified_Lininputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Lininputs::Lidort_Modified_Lininputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Modified_Lininputs", (PyCFunction)_wrap_delete_Lidort_Modified_Lininputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Lininputs::~Lidort_Modified_Lininputs()\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lininputs_mcont", _wrap_Lidort_Modified_Lininputs_mcont, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Lininputs::mcont(Lidort_Modified_Lincontrol &mcont_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lininputs_print_desc", _wrap_Lidort_Modified_Lininputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Modified_Lininputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Lininputs_swigregister", Lidort_Modified_Lininputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Modified_Lininputs_swiginit", Lidort_Modified_Lininputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Linatmos", _wrap_new_Lidort_Linatmos, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linatmos::Lidort_Linatmos(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Linatmos", (PyCFunction)_wrap_delete_Lidort_Linatmos, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linatmos::~Lidort_Linatmos()\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_columnwf", _wrap_Lidort_Linatmos_ts_columnwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_columnwf(const blitz::Array< double, 4 > &ts_columnwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_meani_diffuse_colwf", _wrap_Lidort_Linatmos_ts_meani_diffuse_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_meani_diffuse_colwf(const blitz::Array< double, 4 > &ts_meani_diffuse_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_flux_diffuse_colwf", _wrap_Lidort_Linatmos_ts_flux_diffuse_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_flux_diffuse_colwf(const blitz::Array< double, 4 > &ts_flux_diffuse_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_dnmeani_direct_colwf", _wrap_Lidort_Linatmos_ts_dnmeani_direct_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_dnmeani_direct_colwf(const blitz::Array< double, 3 > &ts_dnmeani_direct_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_dnflux_direct_colwf", _wrap_Lidort_Linatmos_ts_dnflux_direct_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_dnflux_direct_colwf(const blitz::Array< double, 3 > &ts_dnflux_direct_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_profilewf", _wrap_Lidort_Linatmos_ts_profilewf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_profilewf(const blitz::Array< double, 5 > &ts_profilewf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_meani_diffuse_profwf", _wrap_Lidort_Linatmos_ts_meani_diffuse_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_meani_diffuse_profwf(const blitz::Array< double, 5 > &ts_meani_diffuse_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_flux_diffuse_profwf", _wrap_Lidort_Linatmos_ts_flux_diffuse_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_flux_diffuse_profwf(const blitz::Array< double, 5 > &ts_flux_diffuse_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_dnmeani_direct_profwf", _wrap_Lidort_Linatmos_ts_dnmeani_direct_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_dnmeani_direct_profwf(const blitz::Array< double, 4 > &ts_dnmeani_direct_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_dnflux_direct_profwf", _wrap_Lidort_Linatmos_ts_dnflux_direct_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_dnflux_direct_profwf(const blitz::Array< double, 4 > &ts_dnflux_direct_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_abbwfs_jacobians", _wrap_Lidort_Linatmos_ts_abbwfs_jacobians, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_abbwfs_jacobians(const blitz::Array< double, 4 > &ts_abbwfs_jacobians_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_abbwfs_fluxes", _wrap_Lidort_Linatmos_ts_abbwfs_fluxes, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_abbwfs_fluxes(const blitz::Array< double, 4 > &ts_abbwfs_fluxes_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_albmed_user_profwf", _wrap_Lidort_Linatmos_ts_albmed_user_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_albmed_user_profwf(const blitz::Array< double, 3 > &ts_albmed_user_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_trnmed_user_profwf", _wrap_Lidort_Linatmos_ts_trnmed_user_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_trnmed_user_profwf(const blitz::Array< double, 3 > &ts_trnmed_user_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_albmed_fluxes_profwf", _wrap_Lidort_Linatmos_ts_albmed_fluxes_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_albmed_fluxes_profwf(const blitz::Array< double, 3 > &ts_albmed_fluxes_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_trnmed_fluxes_profwf", _wrap_Lidort_Linatmos_ts_trnmed_fluxes_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_trnmed_fluxes_profwf(const blitz::Array< double, 3 > &ts_trnmed_fluxes_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_transbeam_profwf", _wrap_Lidort_Linatmos_ts_transbeam_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_transbeam_profwf(const blitz::Array< double, 3 > &ts_transbeam_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_albmed_user_colwf", _wrap_Lidort_Linatmos_ts_albmed_user_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_albmed_user_colwf(const blitz::Array< double, 2 > &ts_albmed_user_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_trnmed_user_colwf", _wrap_Lidort_Linatmos_ts_trnmed_user_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_trnmed_user_colwf(const blitz::Array< double, 2 > &ts_trnmed_user_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_albmed_fluxes_colwf", _wrap_Lidort_Linatmos_ts_albmed_fluxes_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_albmed_fluxes_colwf(const blitz::Array< double, 2 > &ts_albmed_fluxes_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_trnmed_fluxes_colwf", _wrap_Lidort_Linatmos_ts_trnmed_fluxes_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_trnmed_fluxes_colwf(const blitz::Array< double, 2 > &ts_trnmed_fluxes_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_transbeam_colwf", _wrap_Lidort_Linatmos_ts_transbeam_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_transbeam_colwf(const blitz::Array< double, 2 > &ts_transbeam_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_planetary_transterm_profwf", _wrap_Lidort_Linatmos_ts_planetary_transterm_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_planetary_transterm_profwf(const blitz::Array< double, 3 > &ts_planetary_transterm_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_planetary_sbterm_profwf", _wrap_Lidort_Linatmos_ts_planetary_sbterm_profwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_planetary_sbterm_profwf(const blitz::Array< double, 2 > &ts_planetary_sbterm_profwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_planetary_transterm_colwf", _wrap_Lidort_Linatmos_ts_planetary_transterm_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_planetary_transterm_colwf(const blitz::Array< double, 2 > &ts_planetary_transterm_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_planetary_sbterm_colwf", _wrap_Lidort_Linatmos_ts_planetary_sbterm_colwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_planetary_sbterm_colwf(const blitz::Array< double, 1 > &ts_planetary_sbterm_colwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_lc_lostrans", _wrap_Lidort_Linatmos_ts_lc_lostrans, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_lc_lostrans(const blitz::Array< double, 3 > &ts_lc_lostrans_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_lc_layer_mssts", _wrap_Lidort_Linatmos_ts_lc_layer_mssts, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_lc_layer_mssts(const blitz::Array< double, 3 > &ts_lc_layer_mssts_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_lc_surf_mssts", _wrap_Lidort_Linatmos_ts_lc_surf_mssts, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_lc_surf_mssts(const blitz::Array< double, 2 > &ts_lc_surf_mssts_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_lp_lostrans", _wrap_Lidort_Linatmos_ts_lp_lostrans, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_lp_lostrans(const blitz::Array< double, 3 > &ts_lp_lostrans_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_lp_layer_mssts", _wrap_Lidort_Linatmos_ts_lp_layer_mssts, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_lp_layer_mssts(const blitz::Array< double, 4 > &ts_lp_layer_mssts_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_ts_lp_surf_mssts", _wrap_Lidort_Linatmos_ts_lp_surf_mssts, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linatmos::ts_lp_surf_mssts(const blitz::Array< double, 3 > &ts_lp_surf_mssts_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_print_desc", _wrap_Lidort_Linatmos_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Linatmos::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Linatmos_swigregister", Lidort_Linatmos_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Linatmos_swiginit", Lidort_Linatmos_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Linsurf", _wrap_new_Lidort_Linsurf, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsurf::Lidort_Linsurf(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Linsurf", (PyCFunction)_wrap_delete_Lidort_Linsurf, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsurf::~Lidort_Linsurf()\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsurf_ts_surfacewf", _wrap_Lidort_Linsurf_ts_surfacewf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsurf::ts_surfacewf(const blitz::Array< double, 4 > &ts_surfacewf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsurf_ts_meani_diffuse_surfwf", _wrap_Lidort_Linsurf_ts_meani_diffuse_surfwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsurf::ts_meani_diffuse_surfwf(const blitz::Array< double, 4 > &ts_meani_diffuse_surfwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsurf_ts_flux_diffuse_surfwf", _wrap_Lidort_Linsurf_ts_flux_diffuse_surfwf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsurf::ts_flux_diffuse_surfwf(const blitz::Array< double, 4 > &ts_flux_diffuse_surfwf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsurf_ts_sbbwfs_jacobians", _wrap_Lidort_Linsurf_ts_sbbwfs_jacobians, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsurf::ts_sbbwfs_jacobians(const blitz::Array< double, 3 > &ts_sbbwfs_jacobians_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsurf_ts_sbbwfs_fluxes", _wrap_Lidort_Linsurf_ts_sbbwfs_fluxes, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsurf::ts_sbbwfs_fluxes(const blitz::Array< double, 3 > &ts_sbbwfs_fluxes_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsurf_ts_ls_layer_mssts", _wrap_Lidort_Linsurf_ts_ls_layer_mssts, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsurf::ts_ls_layer_mssts(const blitz::Array< double, 3 > &ts_ls_layer_mssts_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsurf_ts_ls_surf_mssts", _wrap_Lidort_Linsurf_ts_ls_surf_mssts, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsurf::ts_ls_surf_mssts(const blitz::Array< double, 2 > &ts_ls_surf_mssts_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsurf_print_desc", _wrap_Lidort_Linsurf_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Linsurf::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsurf_swigregister", Lidort_Linsurf_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Linsurf_swiginit", Lidort_Linsurf_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Linoutputs", _wrap_new_Lidort_Linoutputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linoutputs::Lidort_Linoutputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Linoutputs", (PyCFunction)_wrap_delete_Lidort_Linoutputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linoutputs::~Lidort_Linoutputs()\n"
		"\n"
		""},
	 { (char *)"Lidort_Linoutputs_atmos", _wrap_Lidort_Linoutputs_atmos, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linoutputs::atmos(Lidort_Linatmos &atmos_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linoutputs_surf", _wrap_Lidort_Linoutputs_surf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linoutputs::surf(Lidort_Linsurf &surf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linoutputs_print_desc", _wrap_Lidort_Linoutputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Linoutputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Linoutputs_swigregister", Lidort_Linoutputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Linoutputs_swiginit", Lidort_Linoutputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Linsup_Brdf", _wrap_new_Lidort_Linsup_Brdf, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Brdf::Lidort_Linsup_Brdf(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Linsup_Brdf", (PyCFunction)_wrap_delete_Lidort_Linsup_Brdf, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Brdf::~Lidort_Linsup_Brdf()\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc", _wrap_Lidort_Linsup_Brdf_ts_ls_exactdb_brdfunc, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Brdf::ts_ls_exactdb_brdfunc(const blitz::Array< double, 4 > &ts_ls_exactdb_brdfunc_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Brdf_ts_ls_brdf_f_0", _wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Brdf::ts_ls_brdf_f_0(const blitz::Array< double, 4 > &ts_ls_brdf_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Brdf_ts_ls_brdf_f", _wrap_Lidort_Linsup_Brdf_ts_ls_brdf_f, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Brdf::ts_ls_brdf_f(const blitz::Array< double, 4 > &ts_ls_brdf_f_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0", _wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Brdf::ts_ls_user_brdf_f_0(const blitz::Array< double, 4 > &ts_ls_user_brdf_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Brdf_ts_ls_user_brdf_f", _wrap_Lidort_Linsup_Brdf_ts_ls_user_brdf_f, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Brdf::ts_ls_user_brdf_f(const blitz::Array< double, 4 > &ts_ls_user_brdf_f_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Brdf_ts_ls_emissivity", _wrap_Lidort_Linsup_Brdf_ts_ls_emissivity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Brdf::ts_ls_emissivity(const blitz::Array< double, 2 > &ts_ls_emissivity_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Brdf_ts_ls_user_emissivity", _wrap_Lidort_Linsup_Brdf_ts_ls_user_emissivity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Brdf::ts_ls_user_emissivity(const blitz::Array< double, 2 > &ts_ls_user_emissivity_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Brdf_print_desc", _wrap_Lidort_Linsup_Brdf_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Linsup_Brdf::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Brdf_swigregister", Lidort_Linsup_Brdf_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Linsup_Brdf_swiginit", Lidort_Linsup_Brdf_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Linsup_Sleave", _wrap_new_Lidort_Linsup_Sleave, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Sleave::Lidort_Linsup_Sleave(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Linsup_Sleave", (PyCFunction)_wrap_delete_Lidort_Linsup_Sleave, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Sleave::~Lidort_Linsup_Sleave()\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic", _wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_isotropic, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Sleave::ts_lssl_slterm_isotropic(const blitz::Array< double, 2 > &ts_lssl_slterm_isotropic_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Sleave_ts_lssl_slterm_userangles", _wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_userangles, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Sleave::ts_lssl_slterm_userangles(const blitz::Array< double, 4 > &ts_lssl_slterm_userangles_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Sleave_ts_lssl_slterm_f_0", _wrap_Lidort_Linsup_Sleave_ts_lssl_slterm_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Sleave::ts_lssl_slterm_f_0(const blitz::Array< double, 4 > &ts_lssl_slterm_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0", _wrap_Lidort_Linsup_Sleave_ts_lssl_user_slterm_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Sleave::ts_lssl_user_slterm_f_0(const blitz::Array< double, 4 > &ts_lssl_user_slterm_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Sleave_print_desc", _wrap_Lidort_Linsup_Sleave_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Linsup_Sleave::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Sleave_swigregister", Lidort_Linsup_Sleave_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Linsup_Sleave_swiginit", Lidort_Linsup_Sleave_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Linsup_Ss_Atmos", _wrap_new_Lidort_Linsup_Ss_Atmos, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Ss_Atmos::Lidort_Linsup_Ss_Atmos(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Linsup_Ss_Atmos", (PyCFunction)_wrap_delete_Lidort_Linsup_Ss_Atmos, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Ss_Atmos::~Lidort_Linsup_Ss_Atmos()\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_Atmos_ts_columnwf_ss", _wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_ss, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Ss_Atmos::ts_columnwf_ss(const blitz::Array< double, 4 > &ts_columnwf_ss_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_Atmos_ts_columnwf_db", _wrap_Lidort_Linsup_Ss_Atmos_ts_columnwf_db, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Ss_Atmos::ts_columnwf_db(const blitz::Array< double, 3 > &ts_columnwf_db_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_Atmos_ts_profilewf_ss", _wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_ss, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Ss_Atmos::ts_profilewf_ss(const blitz::Array< double, 5 > &ts_profilewf_ss_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_Atmos_ts_profilewf_db", _wrap_Lidort_Linsup_Ss_Atmos_ts_profilewf_db, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Ss_Atmos::ts_profilewf_db(const blitz::Array< double, 4 > &ts_profilewf_db_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_Atmos_print_desc", _wrap_Lidort_Linsup_Ss_Atmos_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Linsup_Ss_Atmos::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_Atmos_swigregister", Lidort_Linsup_Ss_Atmos_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Linsup_Ss_Atmos_swiginit", Lidort_Linsup_Ss_Atmos_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Linsup_Ss_Surf", _wrap_new_Lidort_Linsup_Ss_Surf, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Ss_Surf::Lidort_Linsup_Ss_Surf(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Linsup_Ss_Surf", (PyCFunction)_wrap_delete_Lidort_Linsup_Ss_Surf, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Ss_Surf::~Lidort_Linsup_Ss_Surf()\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_Surf_ts_surfacewf_db", _wrap_Lidort_Linsup_Ss_Surf_ts_surfacewf_db, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Ss_Surf::ts_surfacewf_db(const blitz::Array< double, 3 > &ts_surfacewf_db_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_Surf_print_desc", _wrap_Lidort_Linsup_Ss_Surf_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Linsup_Ss_Surf::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_Surf_swigregister", Lidort_Linsup_Ss_Surf_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Linsup_Ss_Surf_swiginit", Lidort_Linsup_Ss_Surf_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Linsup_Ss", _wrap_new_Lidort_Linsup_Ss, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Ss::Lidort_Linsup_Ss(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Linsup_Ss", (PyCFunction)_wrap_delete_Lidort_Linsup_Ss, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Ss::~Lidort_Linsup_Ss()\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_atmos", _wrap_Lidort_Linsup_Ss_atmos, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Ss::atmos(Lidort_Linsup_Ss_Atmos &atmos_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_surf", _wrap_Lidort_Linsup_Ss_surf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Ss::surf(Lidort_Linsup_Ss_Surf &surf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_print_desc", _wrap_Lidort_Linsup_Ss_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Linsup_Ss::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Ss_swigregister", Lidort_Linsup_Ss_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Linsup_Ss_swiginit", Lidort_Linsup_Ss_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Linsup_Inout", _wrap_new_Lidort_Linsup_Inout, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Inout::Lidort_Linsup_Inout(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Linsup_Inout", (PyCFunction)_wrap_delete_Lidort_Linsup_Inout, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Linsup_Inout::~Lidort_Linsup_Inout()\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Inout_brdf", _wrap_Lidort_Linsup_Inout_brdf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Inout::brdf(Lidort_Linsup_Brdf &brdf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Inout_ss", _wrap_Lidort_Linsup_Inout_ss, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Inout::ss(Lidort_Linsup_Ss &ss_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Inout_sleave", _wrap_Lidort_Linsup_Inout_sleave, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Linsup_Inout::sleave(Lidort_Linsup_Sleave &sleave_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Inout_print_desc", _wrap_Lidort_Linsup_Inout_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Linsup_Inout::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Linsup_Inout_swigregister", Lidort_Linsup_Inout_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Linsup_Inout_swiginit", Lidort_Linsup_Inout_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Main_Outputs", _wrap_new_Lidort_Main_Outputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Main_Outputs::Lidort_Main_Outputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Main_Outputs", (PyCFunction)_wrap_delete_Lidort_Main_Outputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Main_Outputs::~Lidort_Main_Outputs()\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_intensity", _wrap_Lidort_Main_Outputs_ts_intensity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_intensity(const blitz::Array< double, 3 > &ts_intensity_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_meani_diffuse", _wrap_Lidort_Main_Outputs_ts_meani_diffuse, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_meani_diffuse(const blitz::Array< double, 3 > &ts_meani_diffuse_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_flux_diffuse", _wrap_Lidort_Main_Outputs_ts_flux_diffuse, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_flux_diffuse(const blitz::Array< double, 3 > &ts_flux_diffuse_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_dnmeani_direct", _wrap_Lidort_Main_Outputs_ts_dnmeani_direct, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_dnmeani_direct(const blitz::Array< double, 2 > &ts_dnmeani_direct_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_dnflux_direct", _wrap_Lidort_Main_Outputs_ts_dnflux_direct, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_dnflux_direct(const blitz::Array< double, 2 > &ts_dnflux_direct_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_albmed_user", _wrap_Lidort_Main_Outputs_ts_albmed_user, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_albmed_user(const blitz::Array< double, 1 > &ts_albmed_user_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_trnmed_user", _wrap_Lidort_Main_Outputs_ts_trnmed_user, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_trnmed_user(const blitz::Array< double, 1 > &ts_trnmed_user_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_albmed_fluxes", _wrap_Lidort_Main_Outputs_ts_albmed_fluxes, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_albmed_fluxes(const blitz::Array< double, 1 > &ts_albmed_fluxes_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_trnmed_fluxes", _wrap_Lidort_Main_Outputs_ts_trnmed_fluxes, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_trnmed_fluxes(const blitz::Array< double, 1 > &ts_trnmed_fluxes_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_planetary_transterm", _wrap_Lidort_Main_Outputs_ts_planetary_transterm, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_planetary_transterm(const blitz::Array< double, 1 > &ts_planetary_transterm_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_planetary_sbterm", _wrap_Lidort_Main_Outputs_ts_planetary_sbterm, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_planetary_sbterm(const double &ts_planetary_sbterm_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_pathgeoms", _wrap_Lidort_Main_Outputs_ts_pathgeoms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_pathgeoms(const blitz::Array< double, 2 > &ts_pathgeoms_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_lostrans", _wrap_Lidort_Main_Outputs_ts_lostrans, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_lostrans(const blitz::Array< double, 2 > &ts_lostrans_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_layer_mssts", _wrap_Lidort_Main_Outputs_ts_layer_mssts, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_layer_mssts(const blitz::Array< double, 2 > &ts_layer_mssts_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_surf_mssts", _wrap_Lidort_Main_Outputs_ts_surf_mssts, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_surf_mssts(const blitz::Array< double, 1 > &ts_surf_mssts_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_contribs", _wrap_Lidort_Main_Outputs_ts_contribs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_contribs(const blitz::Array< double, 2 > &ts_contribs_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_fourier_saved", _wrap_Lidort_Main_Outputs_ts_fourier_saved, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_fourier_saved(const blitz::Array< int, 1 > &ts_fourier_saved_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_n_geometries", _wrap_Lidort_Main_Outputs_ts_n_geometries, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_n_geometries(const int &ts_n_geometries_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_solarbeam_boatrans", _wrap_Lidort_Main_Outputs_ts_solarbeam_boatrans, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_solarbeam_boatrans(const blitz::Array< double, 1 > &ts_solarbeam_boatrans_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_spheralb", _wrap_Lidort_Main_Outputs_ts_spheralb, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_spheralb(const double &ts_spheralb_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_trans1_user", _wrap_Lidort_Main_Outputs_ts_trans1_user, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_trans1_user(const blitz::Array< double, 1 > &ts_trans1_user_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_ts_trans1_beam", _wrap_Lidort_Main_Outputs_ts_trans1_beam, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Main_Outputs::ts_trans1_beam(const blitz::Array< double, 1 > &ts_trans1_beam_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_print_desc", _wrap_Lidort_Main_Outputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Main_Outputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Main_Outputs_swigregister", Lidort_Main_Outputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Main_Outputs_swiginit", Lidort_Main_Outputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Wladjusted_Outputs", _wrap_new_Lidort_Wladjusted_Outputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Wladjusted_Outputs::Lidort_Wladjusted_Outputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Wladjusted_Outputs", (PyCFunction)_wrap_delete_Lidort_Wladjusted_Outputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Wladjusted_Outputs::~Lidort_Wladjusted_Outputs()\n"
		"\n"
		""},
	 { (char *)"Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic", _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_isotropic, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_isotropic(const blitz::Array< double, 1 > &ts_wladjusted_isotropic_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Wladjusted_Outputs_ts_wladjusted_direct", _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_direct, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_direct(const blitz::Array< double, 3 > &ts_wladjusted_direct_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0", _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_ords_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_f_ords_0(const blitz::Array< double, 3 > &ts_wladjusted_f_ords_0_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0", _wrap_Lidort_Wladjusted_Outputs_ts_wladjusted_f_user_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Wladjusted_Outputs::ts_wladjusted_f_user_0(const blitz::Array< double, 3 > &ts_wladjusted_f_user_0_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Wladjusted_Outputs_print_desc", _wrap_Lidort_Wladjusted_Outputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Wladjusted_Outputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Wladjusted_Outputs_swigregister", Lidort_Wladjusted_Outputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Wladjusted_Outputs_swiginit", Lidort_Wladjusted_Outputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Exception_Handling", _wrap_new_Lidort_Exception_Handling, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Exception_Handling::Lidort_Exception_Handling(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Exception_Handling", (PyCFunction)_wrap_delete_Lidort_Exception_Handling, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Exception_Handling::~Lidort_Exception_Handling()\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_ts_status_inputcheck", _wrap_Lidort_Exception_Handling_ts_status_inputcheck, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Exception_Handling::ts_status_inputcheck(const int &ts_status_inputcheck_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_ts_ncheckmessages", _wrap_Lidort_Exception_Handling_ts_ncheckmessages, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Exception_Handling::ts_ncheckmessages(const int &ts_ncheckmessages_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_ts_checkmessages", (PyCFunction)_wrap_Lidort_Exception_Handling_ts_checkmessages, METH_O, (char *)"\n"
		"\n"
		"const std::vector< std::string > FullPhysics::Lidort_Exception_Handling::ts_checkmessages() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_ts_actions", (PyCFunction)_wrap_Lidort_Exception_Handling_ts_actions, METH_O, (char *)"\n"
		"\n"
		"const std::vector< std::string > FullPhysics::Lidort_Exception_Handling::ts_actions() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_ts_status_calculation", _wrap_Lidort_Exception_Handling_ts_status_calculation, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Exception_Handling::ts_status_calculation(const int &ts_status_calculation_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_ts_message", (PyCFunction)_wrap_Lidort_Exception_Handling_ts_message, METH_O, (char *)"\n"
		"\n"
		"const std::string FullPhysics::Lidort_Exception_Handling::ts_message() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_ts_trace_1", (PyCFunction)_wrap_Lidort_Exception_Handling_ts_trace_1, METH_O, (char *)"\n"
		"\n"
		"const std::string FullPhysics::Lidort_Exception_Handling::ts_trace_1() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_ts_trace_2", (PyCFunction)_wrap_Lidort_Exception_Handling_ts_trace_2, METH_O, (char *)"\n"
		"\n"
		"const std::string FullPhysics::Lidort_Exception_Handling::ts_trace_2() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_ts_trace_3", (PyCFunction)_wrap_Lidort_Exception_Handling_ts_trace_3, METH_O, (char *)"\n"
		"\n"
		"const std::string FullPhysics::Lidort_Exception_Handling::ts_trace_3() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_print_desc", _wrap_Lidort_Exception_Handling_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Exception_Handling::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Exception_Handling_swigregister", Lidort_Exception_Handling_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Exception_Handling_swiginit", Lidort_Exception_Handling_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Input_Exception_Handling", _wrap_new_Lidort_Input_Exception_Handling, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Input_Exception_Handling::Lidort_Input_Exception_Handling(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Input_Exception_Handling", (PyCFunction)_wrap_delete_Lidort_Input_Exception_Handling, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Input_Exception_Handling::~Lidort_Input_Exception_Handling()\n"
		"\n"
		""},
	 { (char *)"Lidort_Input_Exception_Handling_ts_status_inputread", _wrap_Lidort_Input_Exception_Handling_ts_status_inputread, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Input_Exception_Handling::ts_status_inputread(const int &ts_status_inputread_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Input_Exception_Handling_ts_ninputmessages", _wrap_Lidort_Input_Exception_Handling_ts_ninputmessages, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Input_Exception_Handling::ts_ninputmessages(const int &ts_ninputmessages_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Input_Exception_Handling_ts_inputmessages", (PyCFunction)_wrap_Lidort_Input_Exception_Handling_ts_inputmessages, METH_O, (char *)"\n"
		"\n"
		"const std::vector< std::string > FullPhysics::Lidort_Input_Exception_Handling::ts_inputmessages() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Input_Exception_Handling_ts_inputactions", (PyCFunction)_wrap_Lidort_Input_Exception_Handling_ts_inputactions, METH_O, (char *)"\n"
		"\n"
		"const std::vector< std::string > FullPhysics::Lidort_Input_Exception_Handling::ts_inputactions() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Input_Exception_Handling_print_desc", _wrap_Lidort_Input_Exception_Handling_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Input_Exception_Handling::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Input_Exception_Handling_swigregister", Lidort_Input_Exception_Handling_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Input_Exception_Handling_swiginit", Lidort_Input_Exception_Handling_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Outputs", _wrap_new_Lidort_Outputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Outputs::Lidort_Outputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Outputs", (PyCFunction)_wrap_delete_Lidort_Outputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Outputs::~Lidort_Outputs()\n"
		"\n"
		""},
	 { (char *)"Lidort_Outputs_main", _wrap_Lidort_Outputs_main, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Outputs::main(Lidort_Main_Outputs &main_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Outputs_wlout", _wrap_Lidort_Outputs_wlout, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Outputs::wlout(Lidort_Wladjusted_Outputs &wlout_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Outputs_status", _wrap_Lidort_Outputs_status, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Outputs::status(Lidort_Exception_Handling &status_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Outputs_print_desc", _wrap_Lidort_Outputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Outputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Outputs_swigregister", Lidort_Outputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Outputs_swiginit", Lidort_Outputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Sup_Brdf", _wrap_new_Lidort_Sup_Brdf, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Sup_Brdf::Lidort_Sup_Brdf(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Sup_Brdf", (PyCFunction)_wrap_delete_Lidort_Sup_Brdf, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Sup_Brdf::~Lidort_Sup_Brdf()\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Brdf_ts_exactdb_brdfunc", _wrap_Lidort_Sup_Brdf_ts_exactdb_brdfunc, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Brdf::ts_exactdb_brdfunc(const blitz::Array< double, 3 > &ts_exactdb_brdfunc_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Brdf_ts_brdf_f_0", _wrap_Lidort_Sup_Brdf_ts_brdf_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Brdf::ts_brdf_f_0(const blitz::Array< double, 3 > &ts_brdf_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Brdf_ts_brdf_f", _wrap_Lidort_Sup_Brdf_ts_brdf_f, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Brdf::ts_brdf_f(const blitz::Array< double, 3 > &ts_brdf_f_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Brdf_ts_user_brdf_f_0", _wrap_Lidort_Sup_Brdf_ts_user_brdf_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Brdf::ts_user_brdf_f_0(const blitz::Array< double, 3 > &ts_user_brdf_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Brdf_ts_user_brdf_f", _wrap_Lidort_Sup_Brdf_ts_user_brdf_f, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Brdf::ts_user_brdf_f(const blitz::Array< double, 3 > &ts_user_brdf_f_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Brdf_ts_emissivity", _wrap_Lidort_Sup_Brdf_ts_emissivity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Brdf::ts_emissivity(const blitz::Array< double, 1 > &ts_emissivity_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Brdf_ts_user_emissivity", _wrap_Lidort_Sup_Brdf_ts_user_emissivity, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Brdf::ts_user_emissivity(const blitz::Array< double, 1 > &ts_user_emissivity_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Brdf_print_desc", _wrap_Lidort_Sup_Brdf_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Sup_Brdf::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Brdf_swigregister", Lidort_Sup_Brdf_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Sup_Brdf_swiginit", Lidort_Sup_Brdf_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Sup_Sleave", _wrap_new_Lidort_Sup_Sleave, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Sup_Sleave::Lidort_Sup_Sleave(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Sup_Sleave", (PyCFunction)_wrap_delete_Lidort_Sup_Sleave, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Sup_Sleave::~Lidort_Sup_Sleave()\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Sleave_ts_slterm_isotropic", _wrap_Lidort_Sup_Sleave_ts_slterm_isotropic, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Sleave::ts_slterm_isotropic(const blitz::Array< double, 1 > &ts_slterm_isotropic_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Sleave_ts_slterm_userangles", _wrap_Lidort_Sup_Sleave_ts_slterm_userangles, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Sleave::ts_slterm_userangles(const blitz::Array< double, 3 > &ts_slterm_userangles_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Sleave_ts_slterm_f_0", _wrap_Lidort_Sup_Sleave_ts_slterm_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Sleave::ts_slterm_f_0(const blitz::Array< double, 3 > &ts_slterm_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Sleave_ts_user_slterm_f_0", _wrap_Lidort_Sup_Sleave_ts_user_slterm_f_0, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Sleave::ts_user_slterm_f_0(const blitz::Array< double, 3 > &ts_user_slterm_f_0_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Sleave_print_desc", _wrap_Lidort_Sup_Sleave_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Sup_Sleave::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Sleave_swigregister", Lidort_Sup_Sleave_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Sup_Sleave_swiginit", Lidort_Sup_Sleave_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Sup_Ss", _wrap_new_Lidort_Sup_Ss, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Sup_Ss::Lidort_Sup_Ss(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Sup_Ss", (PyCFunction)_wrap_delete_Lidort_Sup_Ss, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Sup_Ss::~Lidort_Sup_Ss()\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Ss_ts_intensity_ss", _wrap_Lidort_Sup_Ss_ts_intensity_ss, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Ss::ts_intensity_ss(const blitz::Array< double, 3 > &ts_intensity_ss_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Ss_ts_intensity_db", _wrap_Lidort_Sup_Ss_ts_intensity_db, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Ss::ts_intensity_db(const blitz::Array< double, 2 > &ts_intensity_db_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Ss_ts_contribs_ss", _wrap_Lidort_Sup_Ss_ts_contribs_ss, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Ss::ts_contribs_ss(const blitz::Array< double, 2 > &ts_contribs_ss_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Ss_print_desc", _wrap_Lidort_Sup_Ss_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Sup_Ss::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Ss_swigregister", Lidort_Sup_Ss_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Sup_Ss_swiginit", Lidort_Sup_Ss_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Sup_Inout", _wrap_new_Lidort_Sup_Inout, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Sup_Inout::Lidort_Sup_Inout(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Sup_Inout", (PyCFunction)_wrap_delete_Lidort_Sup_Inout, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Sup_Inout::~Lidort_Sup_Inout()\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Inout_brdf", _wrap_Lidort_Sup_Inout_brdf, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Inout::brdf(Lidort_Sup_Brdf &brdf_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Inout_ss", _wrap_Lidort_Sup_Inout_ss, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Inout::ss(Lidort_Sup_Ss &ss_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Inout_sleave", _wrap_Lidort_Sup_Inout_sleave, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Sup_Inout::sleave(Lidort_Sup_Sleave &sleave_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Inout_print_desc", _wrap_Lidort_Sup_Inout_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Sup_Inout::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Sup_Inout_swigregister", Lidort_Sup_Inout_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Sup_Inout_swiginit", Lidort_Sup_Inout_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Boolean", _wrap_new_Lidort_Fixed_Boolean, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Boolean::Lidort_Fixed_Boolean(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Boolean", (PyCFunction)_wrap_delete_Lidort_Fixed_Boolean, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Boolean::~Lidort_Fixed_Boolean()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_fullrad_mode", _wrap_Lidort_Fixed_Boolean_ts_do_fullrad_mode, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_fullrad_mode(const bool &ts_do_fullrad_mode_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_thermal_emission", _wrap_Lidort_Fixed_Boolean_ts_do_thermal_emission, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_thermal_emission(const bool &ts_do_thermal_emission_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_surface_emission", _wrap_Lidort_Fixed_Boolean_ts_do_surface_emission, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_surface_emission(const bool &ts_do_surface_emission_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_plane_parallel", _wrap_Lidort_Fixed_Boolean_ts_do_plane_parallel, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_plane_parallel(const bool &ts_do_plane_parallel_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_brdf_surface", _wrap_Lidort_Fixed_Boolean_ts_do_brdf_surface, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_brdf_surface(const bool &ts_do_brdf_surface_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_upwelling", _wrap_Lidort_Fixed_Boolean_ts_do_upwelling, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_upwelling(const bool &ts_do_upwelling_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_dnwelling", _wrap_Lidort_Fixed_Boolean_ts_do_dnwelling, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_dnwelling(const bool &ts_do_dnwelling_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_toa_contribs", _wrap_Lidort_Fixed_Boolean_ts_do_toa_contribs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_toa_contribs(const bool &ts_do_toa_contribs_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_surface_leaving", _wrap_Lidort_Fixed_Boolean_ts_do_surface_leaving, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_surface_leaving(const bool &ts_do_surface_leaving_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_sl_isotropic", _wrap_Lidort_Fixed_Boolean_ts_do_sl_isotropic, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_sl_isotropic(const bool &ts_do_sl_isotropic_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_water_leaving", _wrap_Lidort_Fixed_Boolean_ts_do_water_leaving, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_water_leaving(const bool &ts_do_water_leaving_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_fluorescence", _wrap_Lidort_Fixed_Boolean_ts_do_fluorescence, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_fluorescence(const bool &ts_do_fluorescence_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_tf_iteration", _wrap_Lidort_Fixed_Boolean_ts_do_tf_iteration, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_tf_iteration(const bool &ts_do_tf_iteration_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_wladjusted_output", _wrap_Lidort_Fixed_Boolean_ts_do_wladjusted_output, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_wladjusted_output(const bool &ts_do_wladjusted_output_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_toa_illumination", _wrap_Lidort_Fixed_Boolean_ts_do_toa_illumination, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_toa_illumination(const bool &ts_do_toa_illumination_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_boa_illumination", _wrap_Lidort_Fixed_Boolean_ts_do_boa_illumination, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_boa_illumination(const bool &ts_do_boa_illumination_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_albtrn_media", _wrap_Lidort_Fixed_Boolean_ts_do_albtrn_media, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_albtrn_media(const blitz::Array< bool, 1 > &ts_do_albtrn_media_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_planetary_problem", _wrap_Lidort_Fixed_Boolean_ts_do_planetary_problem, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_planetary_problem(const bool &ts_do_planetary_problem_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_ts_do_mssts", _wrap_Lidort_Fixed_Boolean_ts_do_mssts, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Boolean::ts_do_mssts(const bool &ts_do_mssts_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_print_desc", _wrap_Lidort_Fixed_Boolean_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Boolean::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Boolean_swigregister", Lidort_Fixed_Boolean_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Boolean_swiginit", Lidort_Fixed_Boolean_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Control", _wrap_new_Lidort_Fixed_Control, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Control::Lidort_Fixed_Control(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Control", (PyCFunction)_wrap_delete_Lidort_Fixed_Control, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Control::~Lidort_Fixed_Control()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_taylor_order", _wrap_Lidort_Fixed_Control_ts_taylor_order, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_taylor_order(const int &ts_taylor_order_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_nstreams", _wrap_Lidort_Fixed_Control_ts_nstreams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_nstreams(const int &ts_nstreams_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_nlayers", _wrap_Lidort_Fixed_Control_ts_nlayers, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_nlayers(const int &ts_nlayers_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_nfinelayers", _wrap_Lidort_Fixed_Control_ts_nfinelayers, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_nfinelayers(const int &ts_nfinelayers_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_n_thermal_coeffs", _wrap_Lidort_Fixed_Control_ts_n_thermal_coeffs, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_n_thermal_coeffs(const int &ts_n_thermal_coeffs_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_lidort_accuracy", _wrap_Lidort_Fixed_Control_ts_lidort_accuracy, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_lidort_accuracy(const double &ts_lidort_accuracy_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_asymtx_tolerance", _wrap_Lidort_Fixed_Control_ts_asymtx_tolerance, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_asymtx_tolerance(const double &ts_asymtx_tolerance_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_tf_maxiter", _wrap_Lidort_Fixed_Control_ts_tf_maxiter, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_tf_maxiter(const int &ts_tf_maxiter_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_tf_criterion", _wrap_Lidort_Fixed_Control_ts_tf_criterion, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_tf_criterion(const double &ts_tf_criterion_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_toa_illumination", _wrap_Lidort_Fixed_Control_ts_toa_illumination, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_toa_illumination(const double &ts_toa_illumination_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_ts_boa_illumination", _wrap_Lidort_Fixed_Control_ts_boa_illumination, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Control::ts_boa_illumination(const double &ts_boa_illumination_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_print_desc", _wrap_Lidort_Fixed_Control_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Control::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Control_swigregister", Lidort_Fixed_Control_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Control_swiginit", Lidort_Fixed_Control_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Sunrays", _wrap_new_Lidort_Fixed_Sunrays, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Sunrays::Lidort_Fixed_Sunrays(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Sunrays", (PyCFunction)_wrap_delete_Lidort_Fixed_Sunrays, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Sunrays::~Lidort_Fixed_Sunrays()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Sunrays_ts_flux_factor", _wrap_Lidort_Fixed_Sunrays_ts_flux_factor, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Sunrays::ts_flux_factor(const double &ts_flux_factor_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Sunrays_print_desc", _wrap_Lidort_Fixed_Sunrays_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Sunrays::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Sunrays_swigregister", Lidort_Fixed_Sunrays_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Sunrays_swiginit", Lidort_Fixed_Sunrays_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Uservalues", _wrap_new_Lidort_Fixed_Uservalues, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Uservalues::Lidort_Fixed_Uservalues(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Uservalues", (PyCFunction)_wrap_delete_Lidort_Fixed_Uservalues, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Uservalues::~Lidort_Fixed_Uservalues()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Uservalues_ts_n_user_levels", _wrap_Lidort_Fixed_Uservalues_ts_n_user_levels, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Uservalues::ts_n_user_levels(const int &ts_n_user_levels_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Uservalues_print_desc", _wrap_Lidort_Fixed_Uservalues_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Uservalues::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Uservalues_swigregister", Lidort_Fixed_Uservalues_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Uservalues_swiginit", Lidort_Fixed_Uservalues_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Chapman", _wrap_new_Lidort_Fixed_Chapman, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Chapman::Lidort_Fixed_Chapman(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Chapman", (PyCFunction)_wrap_delete_Lidort_Fixed_Chapman, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Chapman::~Lidort_Fixed_Chapman()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Chapman_ts_height_grid", _wrap_Lidort_Fixed_Chapman_ts_height_grid, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Chapman::ts_height_grid(const blitz::Array< double, 1 > &ts_height_grid_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Chapman_ts_pressure_grid", _wrap_Lidort_Fixed_Chapman_ts_pressure_grid, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Chapman::ts_pressure_grid(const blitz::Array< double, 1 > &ts_pressure_grid_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Chapman_ts_temperature_grid", _wrap_Lidort_Fixed_Chapman_ts_temperature_grid, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Chapman::ts_temperature_grid(const blitz::Array< double, 1 > &ts_temperature_grid_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Chapman_ts_finegrid", _wrap_Lidort_Fixed_Chapman_ts_finegrid, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Chapman::ts_finegrid(const blitz::Array< int, 1 > &ts_finegrid_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Chapman_ts_rfindex_parameter", _wrap_Lidort_Fixed_Chapman_ts_rfindex_parameter, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Chapman::ts_rfindex_parameter(const double &ts_rfindex_parameter_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Chapman_print_desc", _wrap_Lidort_Fixed_Chapman_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Chapman::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Chapman_swigregister", Lidort_Fixed_Chapman_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Chapman_swiginit", Lidort_Fixed_Chapman_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Optical", _wrap_new_Lidort_Fixed_Optical, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Optical::Lidort_Fixed_Optical(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Optical", (PyCFunction)_wrap_delete_Lidort_Fixed_Optical, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Optical::~Lidort_Fixed_Optical()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Optical_ts_deltau_vert_input", _wrap_Lidort_Fixed_Optical_ts_deltau_vert_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Optical::ts_deltau_vert_input(const blitz::Array< double, 1 > &ts_deltau_vert_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Optical_ts_phasmoms_total_input", _wrap_Lidort_Fixed_Optical_ts_phasmoms_total_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Optical::ts_phasmoms_total_input(const blitz::Array< double, 2 > &ts_phasmoms_total_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Optical_ts_phasfunc_input_up", _wrap_Lidort_Fixed_Optical_ts_phasfunc_input_up, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Optical::ts_phasfunc_input_up(const blitz::Array< double, 2 > &ts_phasfunc_input_up_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Optical_ts_phasfunc_input_dn", _wrap_Lidort_Fixed_Optical_ts_phasfunc_input_dn, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Optical::ts_phasfunc_input_dn(const blitz::Array< double, 2 > &ts_phasfunc_input_dn_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Optical_ts_lambertian_albedo", _wrap_Lidort_Fixed_Optical_ts_lambertian_albedo, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Optical::ts_lambertian_albedo(const double &ts_lambertian_albedo_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Optical_ts_thermal_bb_input", _wrap_Lidort_Fixed_Optical_ts_thermal_bb_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Optical::ts_thermal_bb_input(const blitz::Array< double, 1 > &ts_thermal_bb_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Optical_ts_surface_bb_input", _wrap_Lidort_Fixed_Optical_ts_surface_bb_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Optical::ts_surface_bb_input(const double &ts_surface_bb_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Optical_ts_atmos_wavelength", _wrap_Lidort_Fixed_Optical_ts_atmos_wavelength, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Optical::ts_atmos_wavelength(const double &ts_atmos_wavelength_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Optical_print_desc", _wrap_Lidort_Fixed_Optical_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Optical::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Optical_swigregister", Lidort_Fixed_Optical_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Optical_swiginit", Lidort_Fixed_Optical_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Write", _wrap_new_Lidort_Fixed_Write, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Write::Lidort_Fixed_Write(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Write", (PyCFunction)_wrap_delete_Lidort_Fixed_Write, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Write::~Lidort_Fixed_Write()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_ts_do_debug_write", _wrap_Lidort_Fixed_Write_ts_do_debug_write, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Write::ts_do_debug_write(const bool &ts_do_debug_write_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_ts_do_write_input", _wrap_Lidort_Fixed_Write_ts_do_write_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Write::ts_do_write_input(const bool &ts_do_write_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_ts_input_write_filename", (PyCFunction)_wrap_Lidort_Fixed_Write_ts_input_write_filename, METH_O, (char *)"\n"
		"\n"
		"const std::string FullPhysics::Lidort_Fixed_Write::ts_input_write_filename() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_ts_do_write_scenario", _wrap_Lidort_Fixed_Write_ts_do_write_scenario, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Write::ts_do_write_scenario(const bool &ts_do_write_scenario_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_ts_scenario_write_filename", (PyCFunction)_wrap_Lidort_Fixed_Write_ts_scenario_write_filename, METH_O, (char *)"\n"
		"\n"
		"const std::string FullPhysics::Lidort_Fixed_Write::ts_scenario_write_filename() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_ts_do_write_fourier", _wrap_Lidort_Fixed_Write_ts_do_write_fourier, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Write::ts_do_write_fourier(const bool &ts_do_write_fourier_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_ts_fourier_write_filename", (PyCFunction)_wrap_Lidort_Fixed_Write_ts_fourier_write_filename, METH_O, (char *)"\n"
		"\n"
		"const std::string FullPhysics::Lidort_Fixed_Write::ts_fourier_write_filename() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_ts_do_write_results", _wrap_Lidort_Fixed_Write_ts_do_write_results, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Write::ts_do_write_results(const bool &ts_do_write_results_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_ts_results_write_filename", (PyCFunction)_wrap_Lidort_Fixed_Write_ts_results_write_filename, METH_O, (char *)"\n"
		"\n"
		"const std::string FullPhysics::Lidort_Fixed_Write::ts_results_write_filename() const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_print_desc", _wrap_Lidort_Fixed_Write_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Write::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Write_swigregister", Lidort_Fixed_Write_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Write_swiginit", Lidort_Fixed_Write_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Fixed_Inputs", _wrap_new_Lidort_Fixed_Inputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Inputs::Lidort_Fixed_Inputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Fixed_Inputs", (PyCFunction)_wrap_delete_Lidort_Fixed_Inputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Fixed_Inputs::~Lidort_Fixed_Inputs()\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Inputs_f_bool", _wrap_Lidort_Fixed_Inputs_f_bool, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Inputs::f_bool(Lidort_Fixed_Boolean &bool_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Inputs_cont", _wrap_Lidort_Fixed_Inputs_cont, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Inputs::cont(Lidort_Fixed_Control &cont_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Inputs_sunrays", _wrap_Lidort_Fixed_Inputs_sunrays, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Inputs::sunrays(Lidort_Fixed_Sunrays &sunrays_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Inputs_userval", _wrap_Lidort_Fixed_Inputs_userval, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Inputs::userval(Lidort_Fixed_Uservalues &userval_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Inputs_chapman", _wrap_Lidort_Fixed_Inputs_chapman, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Inputs::chapman(Lidort_Fixed_Chapman &chapman_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Inputs_optical", _wrap_Lidort_Fixed_Inputs_optical, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Inputs::optical(Lidort_Fixed_Optical &optical_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Inputs_write", _wrap_Lidort_Fixed_Inputs_write, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Fixed_Inputs::write(Lidort_Fixed_Write &write_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Inputs_print_desc", _wrap_Lidort_Fixed_Inputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Fixed_Inputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Fixed_Inputs_swigregister", Lidort_Fixed_Inputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Fixed_Inputs_swiginit", Lidort_Fixed_Inputs_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Modified_Boolean", _wrap_new_Lidort_Modified_Boolean, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Boolean::Lidort_Modified_Boolean(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Modified_Boolean", (PyCFunction)_wrap_delete_Lidort_Modified_Boolean, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Boolean::~Lidort_Modified_Boolean()\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_focorr", _wrap_Lidort_Modified_Boolean_ts_do_focorr, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_focorr(const bool &ts_do_focorr_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_focorr_external", _wrap_Lidort_Modified_Boolean_ts_do_focorr_external, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_focorr_external(const bool &ts_do_focorr_external_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_focorr_nadir", _wrap_Lidort_Modified_Boolean_ts_do_focorr_nadir, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_focorr_nadir(const bool &ts_do_focorr_nadir_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_focorr_outgoing", _wrap_Lidort_Modified_Boolean_ts_do_focorr_outgoing, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_focorr_outgoing(const bool &ts_do_focorr_outgoing_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_sscorr_truncation", _wrap_Lidort_Modified_Boolean_ts_do_sscorr_truncation, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_sscorr_truncation(const bool &ts_do_sscorr_truncation_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc", _wrap_Lidort_Modified_Boolean_ts_do_sscorr_usephasfunc, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_sscorr_usephasfunc(const bool &ts_do_sscorr_usephasfunc_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_external_wleave", _wrap_Lidort_Modified_Boolean_ts_do_external_wleave, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_external_wleave(const bool &ts_do_external_wleave_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_double_convtest", _wrap_Lidort_Modified_Boolean_ts_do_double_convtest, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_double_convtest(const bool &ts_do_double_convtest_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_solar_sources", _wrap_Lidort_Modified_Boolean_ts_do_solar_sources, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_solar_sources(const bool &ts_do_solar_sources_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_refractive_geometry", _wrap_Lidort_Modified_Boolean_ts_do_refractive_geometry, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_refractive_geometry(const bool &ts_do_refractive_geometry_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_chapman_function", _wrap_Lidort_Modified_Boolean_ts_do_chapman_function, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_chapman_function(const bool &ts_do_chapman_function_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_rayleigh_only", _wrap_Lidort_Modified_Boolean_ts_do_rayleigh_only, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_rayleigh_only(const bool &ts_do_rayleigh_only_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_isotropic_only", _wrap_Lidort_Modified_Boolean_ts_do_isotropic_only, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_isotropic_only(const bool &ts_do_isotropic_only_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_no_azimuth", _wrap_Lidort_Modified_Boolean_ts_do_no_azimuth, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_no_azimuth(const bool &ts_do_no_azimuth_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_all_fourier", _wrap_Lidort_Modified_Boolean_ts_do_all_fourier, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_all_fourier(const bool &ts_do_all_fourier_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_deltam_scaling", _wrap_Lidort_Modified_Boolean_ts_do_deltam_scaling, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_deltam_scaling(const bool &ts_do_deltam_scaling_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_solution_saving", _wrap_Lidort_Modified_Boolean_ts_do_solution_saving, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_solution_saving(const bool &ts_do_solution_saving_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_bvp_telescoping", _wrap_Lidort_Modified_Boolean_ts_do_bvp_telescoping, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_bvp_telescoping(const bool &ts_do_bvp_telescoping_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_user_streams", _wrap_Lidort_Modified_Boolean_ts_do_user_streams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_user_streams(const bool &ts_do_user_streams_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_additional_mvout", _wrap_Lidort_Modified_Boolean_ts_do_additional_mvout, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_additional_mvout(const bool &ts_do_additional_mvout_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_mvout_only", _wrap_Lidort_Modified_Boolean_ts_do_mvout_only, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_mvout_only(const bool &ts_do_mvout_only_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_thermal_transonly", _wrap_Lidort_Modified_Boolean_ts_do_thermal_transonly, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_thermal_transonly(const bool &ts_do_thermal_transonly_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_observation_geometry", _wrap_Lidort_Modified_Boolean_ts_do_observation_geometry, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_observation_geometry(const bool &ts_do_observation_geometry_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_ts_do_doublet_geometry", _wrap_Lidort_Modified_Boolean_ts_do_doublet_geometry, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Boolean::ts_do_doublet_geometry(const bool &ts_do_doublet_geometry_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_print_desc", _wrap_Lidort_Modified_Boolean_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Modified_Boolean::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Boolean_swigregister", Lidort_Modified_Boolean_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Modified_Boolean_swiginit", Lidort_Modified_Boolean_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Modified_Control", _wrap_new_Lidort_Modified_Control, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Control::Lidort_Modified_Control(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Modified_Control", (PyCFunction)_wrap_delete_Lidort_Modified_Control, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Control::~Lidort_Modified_Control()\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Control_ts_nmoments_input", _wrap_Lidort_Modified_Control_ts_nmoments_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Control::ts_nmoments_input(const int &ts_nmoments_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Control_print_desc", _wrap_Lidort_Modified_Control_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Modified_Control::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Control_swigregister", Lidort_Modified_Control_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Modified_Control_swiginit", Lidort_Modified_Control_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Modified_Sunrays", _wrap_new_Lidort_Modified_Sunrays, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Sunrays::Lidort_Modified_Sunrays(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Modified_Sunrays", (PyCFunction)_wrap_delete_Lidort_Modified_Sunrays, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Sunrays::~Lidort_Modified_Sunrays()\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Sunrays_ts_nbeams", _wrap_Lidort_Modified_Sunrays_ts_nbeams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Sunrays::ts_nbeams(const int &ts_nbeams_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Sunrays_ts_beam_szas", _wrap_Lidort_Modified_Sunrays_ts_beam_szas, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Sunrays::ts_beam_szas(const blitz::Array< double, 1 > &ts_beam_szas_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Sunrays_print_desc", _wrap_Lidort_Modified_Sunrays_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Modified_Sunrays::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Sunrays_swigregister", Lidort_Modified_Sunrays_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Modified_Sunrays_swiginit", Lidort_Modified_Sunrays_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Modified_Uservalues", _wrap_new_Lidort_Modified_Uservalues, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Uservalues::Lidort_Modified_Uservalues(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Modified_Uservalues", (PyCFunction)_wrap_delete_Lidort_Modified_Uservalues, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Uservalues::~Lidort_Modified_Uservalues()\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_ts_n_user_relazms", _wrap_Lidort_Modified_Uservalues_ts_n_user_relazms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Uservalues::ts_n_user_relazms(const int &ts_n_user_relazms_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_ts_user_relazms", _wrap_Lidort_Modified_Uservalues_ts_user_relazms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Uservalues::ts_user_relazms(const blitz::Array< double, 1 > &ts_user_relazms_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_ts_n_user_streams", _wrap_Lidort_Modified_Uservalues_ts_n_user_streams, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Uservalues::ts_n_user_streams(const int &ts_n_user_streams_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_ts_user_angles_input", _wrap_Lidort_Modified_Uservalues_ts_user_angles_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Uservalues::ts_user_angles_input(const blitz::Array< double, 1 > &ts_user_angles_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_ts_user_levels", _wrap_Lidort_Modified_Uservalues_ts_user_levels, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Uservalues::ts_user_levels(const blitz::Array< double, 1 > &ts_user_levels_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_ts_geometry_specheight", _wrap_Lidort_Modified_Uservalues_ts_geometry_specheight, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Uservalues::ts_geometry_specheight(const double &ts_geometry_specheight_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_ts_n_user_obsgeoms", _wrap_Lidort_Modified_Uservalues_ts_n_user_obsgeoms, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Uservalues::ts_n_user_obsgeoms(const int &ts_n_user_obsgeoms_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_ts_user_obsgeoms_input", _wrap_Lidort_Modified_Uservalues_ts_user_obsgeoms_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Uservalues::ts_user_obsgeoms_input(const blitz::Array< double, 2 > &ts_user_obsgeoms_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_ts_n_user_doublets", _wrap_Lidort_Modified_Uservalues_ts_n_user_doublets, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Uservalues::ts_n_user_doublets(const int &ts_n_user_doublets_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_ts_user_doublets", _wrap_Lidort_Modified_Uservalues_ts_user_doublets, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Uservalues::ts_user_doublets(const blitz::Array< double, 2 > &ts_user_doublets_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_print_desc", _wrap_Lidort_Modified_Uservalues_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Modified_Uservalues::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Uservalues_swigregister", Lidort_Modified_Uservalues_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Modified_Uservalues_swiginit", Lidort_Modified_Uservalues_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Modified_Chapman", _wrap_new_Lidort_Modified_Chapman, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Chapman::Lidort_Modified_Chapman(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Modified_Chapman", (PyCFunction)_wrap_delete_Lidort_Modified_Chapman, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Chapman::~Lidort_Modified_Chapman()\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Chapman_ts_earth_radius", _wrap_Lidort_Modified_Chapman_ts_earth_radius, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Chapman::ts_earth_radius(const double &ts_earth_radius_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Chapman_print_desc", _wrap_Lidort_Modified_Chapman_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Modified_Chapman::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Chapman_swigregister", Lidort_Modified_Chapman_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Modified_Chapman_swiginit", Lidort_Modified_Chapman_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Modified_Optical", _wrap_new_Lidort_Modified_Optical, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Optical::Lidort_Modified_Optical(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Modified_Optical", (PyCFunction)_wrap_delete_Lidort_Modified_Optical, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Optical::~Lidort_Modified_Optical()\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Optical_ts_omega_total_input", _wrap_Lidort_Modified_Optical_ts_omega_total_input, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Optical::ts_omega_total_input(const blitz::Array< double, 1 > &ts_omega_total_input_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Optical_print_desc", _wrap_Lidort_Modified_Optical_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Modified_Optical::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Optical_swigregister", Lidort_Modified_Optical_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Modified_Optical_swiginit", Lidort_Modified_Optical_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_Lidort_Modified_Inputs", _wrap_new_Lidort_Modified_Inputs, METH_VARARGS, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Inputs::Lidort_Modified_Inputs(void *allocated_f_type_c)\n"
		"\n"
		""},
	 { (char *)"delete_Lidort_Modified_Inputs", (PyCFunction)_wrap_delete_Lidort_Modified_Inputs, METH_O, (char *)"\n"
		"\n"
		"FullPhysics::Lidort_Modified_Inputs::~Lidort_Modified_Inputs()\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Inputs_mbool", _wrap_Lidort_Modified_Inputs_mbool, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Inputs::mbool(Lidort_Modified_Boolean &mbool_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Inputs_mcont", _wrap_Lidort_Modified_Inputs_mcont, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Inputs::mcont(Lidort_Modified_Control &mcont_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Inputs_msunrays", _wrap_Lidort_Modified_Inputs_msunrays, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Inputs::msunrays(Lidort_Modified_Sunrays &msunrays_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Inputs_muserval", _wrap_Lidort_Modified_Inputs_muserval, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Inputs::muserval(Lidort_Modified_Uservalues &muserval_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Inputs_mchapman", _wrap_Lidort_Modified_Inputs_mchapman, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Inputs::mchapman(Lidort_Modified_Chapman &mchapman_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Inputs_moptical", _wrap_Lidort_Modified_Inputs_moptical, METH_VARARGS, (char *)"\n"
		"\n"
		"void FullPhysics::Lidort_Modified_Inputs::moptical(Lidort_Modified_Optical &moptical_in)\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Inputs_print_desc", _wrap_Lidort_Modified_Inputs_print_desc, METH_VARARGS, (char *)"\n"
		"\n"
		"virtual void FullPhysics::Lidort_Modified_Inputs::print(std::ostream &output_stream) const\n"
		"\n"
		""},
	 { (char *)"Lidort_Modified_Inputs_swigregister", Lidort_Modified_Inputs_swigregister, METH_VARARGS, NULL},
	 { (char *)"Lidort_Modified_Inputs_swiginit", Lidort_Modified_Inputs_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_FullPhysics__Lidort_Linsup_Ss_SurfTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Linsup_Ss_Surf *) x));
}
static void *_p_FullPhysics__Lidort_Sup_SleaveTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Sup_Sleave *) x));
}
static void *_p_FullPhysics__Lidort_Linsup_SleaveTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Linsup_Sleave *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_LinopticalTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Linoptical *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_OpticalTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Optical *) x));
}
static void *_p_FullPhysics__Lidort_Modified_OpticalTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Modified_Optical *) x));
}
static void *_p_FullPhysics__Lidort_LinsurfTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Linsurf *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_WriteTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Write *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_ControlTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Control *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_LincontrolTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Lincontrol *) x));
}
static void *_p_FullPhysics__Lidort_Modified_LincontrolTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Modified_Lincontrol *) x));
}
static void *_p_FullPhysics__Lidort_Modified_ControlTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Modified_Control *) x));
}
static void *_p_FullPhysics__Lidort_Linsup_Ss_AtmosTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Linsup_Ss_Atmos *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_UservaluesTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Uservalues *) x));
}
static void *_p_FullPhysics__Lidort_Modified_UservaluesTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Modified_Uservalues *) x));
}
static void *_p_FullPhysics__Brdf_Linsup_InputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Brdf_Linsup_Inputs *) x));
}
static void *_p_FullPhysics__Brdf_Sup_InputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Brdf_Sup_Inputs *) x));
}
static void *_p_FullPhysics__Sleave_Sup_InputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Sleave_Sup_Inputs *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_LininputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Lininputs *) x));
}
static void *_p_FullPhysics__Lidort_Modified_LininputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Modified_Lininputs *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_InputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Inputs *) x));
}
static void *_p_FullPhysics__Lidort_Modified_InputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Modified_Inputs *) x));
}
static void *_p_FullPhysics__Lidort_Sup_InoutTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Sup_Inout *) x));
}
static void *_p_FullPhysics__Lidort_Linsup_InoutTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Linsup_Inout *) x));
}
static void *_p_FullPhysics__Lidort_Sup_SsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Sup_Ss *) x));
}
static void *_p_FullPhysics__Lidort_Linsup_SsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Linsup_Ss *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_SunraysTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Sunrays *) x));
}
static void *_p_FullPhysics__Lidort_Modified_SunraysTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Modified_Sunrays *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_BooleanTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Boolean *) x));
}
static void *_p_FullPhysics__Lidort_Modified_BooleanTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Modified_Boolean *) x));
}
static void *_p_FullPhysics__Lidort_Sup_BrdfTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Sup_Brdf *) x));
}
static void *_p_FullPhysics__Lidort_Linsup_BrdfTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Linsup_Brdf *) x));
}
static void *_p_FullPhysics__Lidort_Input_Exception_HandlingTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Input_Exception_Handling *) x));
}
static void *_p_FullPhysics__Lidort_Exception_HandlingTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Exception_Handling *) x));
}
static void *_p_FullPhysics__Brdf_Input_Exception_HandlingTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Brdf_Input_Exception_Handling *) x));
}
static void *_p_FullPhysics__Brdf_Output_Exception_HandlingTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Brdf_Output_Exception_Handling *) x));
}
static void *_p_FullPhysics__Lidort_OutputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Outputs *) x));
}
static void *_p_FullPhysics__Lidort_Wladjusted_OutputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Wladjusted_Outputs *) x));
}
static void *_p_FullPhysics__Lidort_Main_OutputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Main_Outputs *) x));
}
static void *_p_FullPhysics__Lidort_LinoutputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Linoutputs *) x));
}
static void *_p_FullPhysics__Brdf_Linsup_OutputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Brdf_Linsup_Outputs *) x));
}
static void *_p_FullPhysics__Brdf_Sup_OutputsTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Brdf_Sup_Outputs *) x));
}
static void *_p_FullPhysics__Lidort_LinatmosTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Linatmos *) x));
}
static void *_p_FullPhysics__Lidort_Fixed_ChapmanTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Fixed_Chapman *) x));
}
static void *_p_FullPhysics__Lidort_Modified_ChapmanTo_p_FullPhysics__Lidort_Structure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FullPhysics::Lidort_Structure *)  ((FullPhysics::Lidort_Modified_Chapman *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static swig_type_info _swigt__p_FullPhysics__Brdf_Input_Exception_Handling = {"_p_FullPhysics__Brdf_Input_Exception_Handling", "FullPhysics::Brdf_Input_Exception_Handling *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Brdf_Linsup_Inputs = {"_p_FullPhysics__Brdf_Linsup_Inputs", "FullPhysics::Brdf_Linsup_Inputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Brdf_Linsup_Outputs = {"_p_FullPhysics__Brdf_Linsup_Outputs", "FullPhysics::Brdf_Linsup_Outputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Brdf_Output_Exception_Handling = {"_p_FullPhysics__Brdf_Output_Exception_Handling", "FullPhysics::Brdf_Output_Exception_Handling *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Brdf_Sup_Inputs = {"_p_FullPhysics__Brdf_Sup_Inputs", "FullPhysics::Brdf_Sup_Inputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Brdf_Sup_Outputs = {"_p_FullPhysics__Brdf_Sup_Outputs", "FullPhysics::Brdf_Sup_Outputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Exception_Handling = {"_p_FullPhysics__Lidort_Exception_Handling", "FullPhysics::Lidort_Exception_Handling *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Boolean = {"_p_FullPhysics__Lidort_Fixed_Boolean", "FullPhysics::Lidort_Fixed_Boolean *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Chapman = {"_p_FullPhysics__Lidort_Fixed_Chapman", "FullPhysics::Lidort_Fixed_Chapman *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Control = {"_p_FullPhysics__Lidort_Fixed_Control", "FullPhysics::Lidort_Fixed_Control *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Inputs = {"_p_FullPhysics__Lidort_Fixed_Inputs", "FullPhysics::Lidort_Fixed_Inputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Lincontrol = {"_p_FullPhysics__Lidort_Fixed_Lincontrol", "FullPhysics::Lidort_Fixed_Lincontrol *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Lininputs = {"_p_FullPhysics__Lidort_Fixed_Lininputs", "FullPhysics::Lidort_Fixed_Lininputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Linoptical = {"_p_FullPhysics__Lidort_Fixed_Linoptical", "FullPhysics::Lidort_Fixed_Linoptical *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Optical = {"_p_FullPhysics__Lidort_Fixed_Optical", "FullPhysics::Lidort_Fixed_Optical *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Sunrays = {"_p_FullPhysics__Lidort_Fixed_Sunrays", "FullPhysics::Lidort_Fixed_Sunrays *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Uservalues = {"_p_FullPhysics__Lidort_Fixed_Uservalues", "FullPhysics::Lidort_Fixed_Uservalues *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Fixed_Write = {"_p_FullPhysics__Lidort_Fixed_Write", "FullPhysics::Lidort_Fixed_Write *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Input_Exception_Handling = {"_p_FullPhysics__Lidort_Input_Exception_Handling", "FullPhysics::Lidort_Input_Exception_Handling *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Linatmos = {"_p_FullPhysics__Lidort_Linatmos", "FullPhysics::Lidort_Linatmos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Linoutputs = {"_p_FullPhysics__Lidort_Linoutputs", "FullPhysics::Lidort_Linoutputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Linsup_Brdf = {"_p_FullPhysics__Lidort_Linsup_Brdf", "FullPhysics::Lidort_Linsup_Brdf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Linsup_Inout = {"_p_FullPhysics__Lidort_Linsup_Inout", "FullPhysics::Lidort_Linsup_Inout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Linsup_Sleave = {"_p_FullPhysics__Lidort_Linsup_Sleave", "FullPhysics::Lidort_Linsup_Sleave *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Linsup_Ss = {"_p_FullPhysics__Lidort_Linsup_Ss", "FullPhysics::Lidort_Linsup_Ss *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Linsup_Ss_Atmos = {"_p_FullPhysics__Lidort_Linsup_Ss_Atmos", "FullPhysics::Lidort_Linsup_Ss_Atmos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Linsup_Ss_Surf = {"_p_FullPhysics__Lidort_Linsup_Ss_Surf", "FullPhysics::Lidort_Linsup_Ss_Surf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Linsurf = {"_p_FullPhysics__Lidort_Linsurf", "FullPhysics::Lidort_Linsurf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Main_Outputs = {"_p_FullPhysics__Lidort_Main_Outputs", "FullPhysics::Lidort_Main_Outputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Modified_Boolean = {"_p_FullPhysics__Lidort_Modified_Boolean", "FullPhysics::Lidort_Modified_Boolean *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Modified_Chapman = {"_p_FullPhysics__Lidort_Modified_Chapman", "FullPhysics::Lidort_Modified_Chapman *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Modified_Control = {"_p_FullPhysics__Lidort_Modified_Control", "FullPhysics::Lidort_Modified_Control *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Modified_Inputs = {"_p_FullPhysics__Lidort_Modified_Inputs", "FullPhysics::Lidort_Modified_Inputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Modified_Lincontrol = {"_p_FullPhysics__Lidort_Modified_Lincontrol", "FullPhysics::Lidort_Modified_Lincontrol *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Modified_Lininputs = {"_p_FullPhysics__Lidort_Modified_Lininputs", "FullPhysics::Lidort_Modified_Lininputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Modified_Optical = {"_p_FullPhysics__Lidort_Modified_Optical", "FullPhysics::Lidort_Modified_Optical *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Modified_Sunrays = {"_p_FullPhysics__Lidort_Modified_Sunrays", "FullPhysics::Lidort_Modified_Sunrays *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Modified_Uservalues = {"_p_FullPhysics__Lidort_Modified_Uservalues", "FullPhysics::Lidort_Modified_Uservalues *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Outputs = {"_p_FullPhysics__Lidort_Outputs", "FullPhysics::Lidort_Outputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Pars = {"_p_FullPhysics__Lidort_Pars", "FullPhysics::Lidort_Pars *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Structure = {"_p_FullPhysics__Lidort_Structure", "FullPhysics::Lidort_Structure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Sup_Brdf = {"_p_FullPhysics__Lidort_Sup_Brdf", "FullPhysics::Lidort_Sup_Brdf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Sup_Inout = {"_p_FullPhysics__Lidort_Sup_Inout", "FullPhysics::Lidort_Sup_Inout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Sup_Sleave = {"_p_FullPhysics__Lidort_Sup_Sleave", "FullPhysics::Lidort_Sup_Sleave *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Sup_Ss = {"_p_FullPhysics__Lidort_Sup_Ss", "FullPhysics::Lidort_Sup_Ss *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Lidort_Wladjusted_Outputs = {"_p_FullPhysics__Lidort_Wladjusted_Outputs", "FullPhysics::Lidort_Wladjusted_Outputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FullPhysics__Sleave_Sup_Inputs = {"_p_FullPhysics__Sleave_Sup_Inputs", "FullPhysics::Sleave_Sup_Inputs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_bool_1_t = {"_p_blitz__ArrayT_bool_1_t", "blitz::Array< bool,1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_bool_2_t = {"_p_blitz__ArrayT_bool_2_t", "blitz::Array< bool,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_bool_3_t = {"_p_blitz__ArrayT_bool_3_t", "blitz::Array< bool,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_bool_4_t = {"_p_blitz__ArrayT_bool_4_t", "blitz::Array< bool,4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_double_1_t = {"_p_blitz__ArrayT_double_1_t", "blitz::Array< double,1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_double_2_t = {"_p_blitz__ArrayT_double_2_t", "blitz::Array< double,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_double_3_t = {"_p_blitz__ArrayT_double_3_t", "blitz::Array< double,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_double_4_t = {"_p_blitz__ArrayT_double_4_t", "blitz::Array< double,4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_double_5_t = {"_p_blitz__ArrayT_double_5_t", "blitz::Array< double,5 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_int_1_t = {"_p_blitz__ArrayT_int_1_t", "blitz::Array< int,1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_int_2_t = {"_p_blitz__ArrayT_int_2_t", "blitz::Array< int,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_int_3_t = {"_p_blitz__ArrayT_int_3_t", "blitz::Array< int,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blitz__ArrayT_int_4_t = {"_p_blitz__ArrayT_int_4_t", "blitz::Array< int,4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t = {"_p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t", "boost::shared_ptr< FullPhysics::Lidort_Pars > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char,std::char_traits< char > > *|std::ios *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t", "std::basic_iostream< char,std::char_traits< char > > *|std::iostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > *|std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > *|std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FullPhysics__Brdf_Input_Exception_Handling,
  &_swigt__p_FullPhysics__Brdf_Linsup_Inputs,
  &_swigt__p_FullPhysics__Brdf_Linsup_Outputs,
  &_swigt__p_FullPhysics__Brdf_Output_Exception_Handling,
  &_swigt__p_FullPhysics__Brdf_Sup_Inputs,
  &_swigt__p_FullPhysics__Brdf_Sup_Outputs,
  &_swigt__p_FullPhysics__Lidort_Exception_Handling,
  &_swigt__p_FullPhysics__Lidort_Fixed_Boolean,
  &_swigt__p_FullPhysics__Lidort_Fixed_Chapman,
  &_swigt__p_FullPhysics__Lidort_Fixed_Control,
  &_swigt__p_FullPhysics__Lidort_Fixed_Inputs,
  &_swigt__p_FullPhysics__Lidort_Fixed_Lincontrol,
  &_swigt__p_FullPhysics__Lidort_Fixed_Lininputs,
  &_swigt__p_FullPhysics__Lidort_Fixed_Linoptical,
  &_swigt__p_FullPhysics__Lidort_Fixed_Optical,
  &_swigt__p_FullPhysics__Lidort_Fixed_Sunrays,
  &_swigt__p_FullPhysics__Lidort_Fixed_Uservalues,
  &_swigt__p_FullPhysics__Lidort_Fixed_Write,
  &_swigt__p_FullPhysics__Lidort_Input_Exception_Handling,
  &_swigt__p_FullPhysics__Lidort_Linatmos,
  &_swigt__p_FullPhysics__Lidort_Linoutputs,
  &_swigt__p_FullPhysics__Lidort_Linsup_Brdf,
  &_swigt__p_FullPhysics__Lidort_Linsup_Inout,
  &_swigt__p_FullPhysics__Lidort_Linsup_Sleave,
  &_swigt__p_FullPhysics__Lidort_Linsup_Ss,
  &_swigt__p_FullPhysics__Lidort_Linsup_Ss_Atmos,
  &_swigt__p_FullPhysics__Lidort_Linsup_Ss_Surf,
  &_swigt__p_FullPhysics__Lidort_Linsurf,
  &_swigt__p_FullPhysics__Lidort_Main_Outputs,
  &_swigt__p_FullPhysics__Lidort_Modified_Boolean,
  &_swigt__p_FullPhysics__Lidort_Modified_Chapman,
  &_swigt__p_FullPhysics__Lidort_Modified_Control,
  &_swigt__p_FullPhysics__Lidort_Modified_Inputs,
  &_swigt__p_FullPhysics__Lidort_Modified_Lincontrol,
  &_swigt__p_FullPhysics__Lidort_Modified_Lininputs,
  &_swigt__p_FullPhysics__Lidort_Modified_Optical,
  &_swigt__p_FullPhysics__Lidort_Modified_Sunrays,
  &_swigt__p_FullPhysics__Lidort_Modified_Uservalues,
  &_swigt__p_FullPhysics__Lidort_Outputs,
  &_swigt__p_FullPhysics__Lidort_Pars,
  &_swigt__p_FullPhysics__Lidort_Structure,
  &_swigt__p_FullPhysics__Lidort_Sup_Brdf,
  &_swigt__p_FullPhysics__Lidort_Sup_Inout,
  &_swigt__p_FullPhysics__Lidort_Sup_Sleave,
  &_swigt__p_FullPhysics__Lidort_Sup_Ss,
  &_swigt__p_FullPhysics__Lidort_Wladjusted_Outputs,
  &_swigt__p_FullPhysics__Sleave_Sup_Inputs,
  &_swigt__p_allocator_type,
  &_swigt__p_blitz__ArrayT_bool_1_t,
  &_swigt__p_blitz__ArrayT_bool_2_t,
  &_swigt__p_blitz__ArrayT_bool_3_t,
  &_swigt__p_blitz__ArrayT_bool_4_t,
  &_swigt__p_blitz__ArrayT_double_1_t,
  &_swigt__p_blitz__ArrayT_double_2_t,
  &_swigt__p_blitz__ArrayT_double_3_t,
  &_swigt__p_blitz__ArrayT_double_4_t,
  &_swigt__p_blitz__ArrayT_double_5_t,
  &_swigt__p_blitz__ArrayT_int_1_t,
  &_swigt__p_blitz__ArrayT_int_2_t,
  &_swigt__p_blitz__ArrayT_int_3_t,
  &_swigt__p_blitz__ArrayT_int_4_t,
  &_swigt__p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_difference_type,
  &_swigt__p_fmtflags,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_pos_type,
  &_swigt__p_seekdir,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_traits_type,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_FullPhysics__Brdf_Input_Exception_Handling[] = {  {&_swigt__p_FullPhysics__Brdf_Input_Exception_Handling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Brdf_Linsup_Inputs[] = {  {&_swigt__p_FullPhysics__Brdf_Linsup_Inputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Brdf_Linsup_Outputs[] = {  {&_swigt__p_FullPhysics__Brdf_Linsup_Outputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Brdf_Output_Exception_Handling[] = {  {&_swigt__p_FullPhysics__Brdf_Output_Exception_Handling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Brdf_Sup_Inputs[] = {  {&_swigt__p_FullPhysics__Brdf_Sup_Inputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Brdf_Sup_Outputs[] = {  {&_swigt__p_FullPhysics__Brdf_Sup_Outputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Exception_Handling[] = {  {&_swigt__p_FullPhysics__Lidort_Exception_Handling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Boolean[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Boolean, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Chapman[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Chapman, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Control[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Control, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Inputs[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Inputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Lincontrol[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Lincontrol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Lininputs[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Lininputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Linoptical[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Linoptical, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Optical[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Optical, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Sunrays[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Sunrays, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Uservalues[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Uservalues, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Fixed_Write[] = {  {&_swigt__p_FullPhysics__Lidort_Fixed_Write, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Input_Exception_Handling[] = {  {&_swigt__p_FullPhysics__Lidort_Input_Exception_Handling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Linatmos[] = {  {&_swigt__p_FullPhysics__Lidort_Linatmos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Linoutputs[] = {  {&_swigt__p_FullPhysics__Lidort_Linoutputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Linsup_Brdf[] = {  {&_swigt__p_FullPhysics__Lidort_Linsup_Brdf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Linsup_Inout[] = {  {&_swigt__p_FullPhysics__Lidort_Linsup_Inout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Linsup_Sleave[] = {  {&_swigt__p_FullPhysics__Lidort_Linsup_Sleave, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Linsup_Ss[] = {  {&_swigt__p_FullPhysics__Lidort_Linsup_Ss, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Linsup_Ss_Atmos[] = {  {&_swigt__p_FullPhysics__Lidort_Linsup_Ss_Atmos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Linsup_Ss_Surf[] = {  {&_swigt__p_FullPhysics__Lidort_Linsup_Ss_Surf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Linsurf[] = {  {&_swigt__p_FullPhysics__Lidort_Linsurf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Main_Outputs[] = {  {&_swigt__p_FullPhysics__Lidort_Main_Outputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Modified_Boolean[] = {  {&_swigt__p_FullPhysics__Lidort_Modified_Boolean, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Modified_Chapman[] = {  {&_swigt__p_FullPhysics__Lidort_Modified_Chapman, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Modified_Control[] = {  {&_swigt__p_FullPhysics__Lidort_Modified_Control, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Modified_Inputs[] = {  {&_swigt__p_FullPhysics__Lidort_Modified_Inputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Modified_Lincontrol[] = {  {&_swigt__p_FullPhysics__Lidort_Modified_Lincontrol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Modified_Lininputs[] = {  {&_swigt__p_FullPhysics__Lidort_Modified_Lininputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Modified_Optical[] = {  {&_swigt__p_FullPhysics__Lidort_Modified_Optical, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Modified_Sunrays[] = {  {&_swigt__p_FullPhysics__Lidort_Modified_Sunrays, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Modified_Uservalues[] = {  {&_swigt__p_FullPhysics__Lidort_Modified_Uservalues, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Outputs[] = {  {&_swigt__p_FullPhysics__Lidort_Outputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Pars[] = {  {&_swigt__p_FullPhysics__Lidort_Pars, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Structure[] = {  {&_swigt__p_FullPhysics__Lidort_Linsup_Ss_Surf, _p_FullPhysics__Lidort_Linsup_Ss_SurfTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Sup_Sleave, _p_FullPhysics__Lidort_Sup_SleaveTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Linsup_Sleave, _p_FullPhysics__Lidort_Linsup_SleaveTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Linoptical, _p_FullPhysics__Lidort_Fixed_LinopticalTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Optical, _p_FullPhysics__Lidort_Fixed_OpticalTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Modified_Optical, _p_FullPhysics__Lidort_Modified_OpticalTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Linsurf, _p_FullPhysics__Lidort_LinsurfTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Write, _p_FullPhysics__Lidort_Fixed_WriteTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Control, _p_FullPhysics__Lidort_Fixed_ControlTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Lincontrol, _p_FullPhysics__Lidort_Fixed_LincontrolTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Modified_Lincontrol, _p_FullPhysics__Lidort_Modified_LincontrolTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Modified_Control, _p_FullPhysics__Lidort_Modified_ControlTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Linsup_Ss_Atmos, _p_FullPhysics__Lidort_Linsup_Ss_AtmosTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Uservalues, _p_FullPhysics__Lidort_Fixed_UservaluesTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Modified_Uservalues, _p_FullPhysics__Lidort_Modified_UservaluesTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Brdf_Linsup_Inputs, _p_FullPhysics__Brdf_Linsup_InputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Brdf_Sup_Inputs, _p_FullPhysics__Brdf_Sup_InputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Sleave_Sup_Inputs, _p_FullPhysics__Sleave_Sup_InputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Lininputs, _p_FullPhysics__Lidort_Fixed_LininputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Modified_Lininputs, _p_FullPhysics__Lidort_Modified_LininputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Inputs, _p_FullPhysics__Lidort_Fixed_InputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Modified_Inputs, _p_FullPhysics__Lidort_Modified_InputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Structure, 0, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Sup_Inout, _p_FullPhysics__Lidort_Sup_InoutTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Linsup_Inout, _p_FullPhysics__Lidort_Linsup_InoutTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Sup_Ss, _p_FullPhysics__Lidort_Sup_SsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Linsup_Ss, _p_FullPhysics__Lidort_Linsup_SsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Sunrays, _p_FullPhysics__Lidort_Fixed_SunraysTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Modified_Sunrays, _p_FullPhysics__Lidort_Modified_SunraysTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Boolean, _p_FullPhysics__Lidort_Fixed_BooleanTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Modified_Boolean, _p_FullPhysics__Lidort_Modified_BooleanTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Sup_Brdf, _p_FullPhysics__Lidort_Sup_BrdfTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Linsup_Brdf, _p_FullPhysics__Lidort_Linsup_BrdfTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Input_Exception_Handling, _p_FullPhysics__Lidort_Input_Exception_HandlingTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Exception_Handling, _p_FullPhysics__Lidort_Exception_HandlingTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Brdf_Input_Exception_Handling, _p_FullPhysics__Brdf_Input_Exception_HandlingTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Brdf_Output_Exception_Handling, _p_FullPhysics__Brdf_Output_Exception_HandlingTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Outputs, _p_FullPhysics__Lidort_OutputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Wladjusted_Outputs, _p_FullPhysics__Lidort_Wladjusted_OutputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Main_Outputs, _p_FullPhysics__Lidort_Main_OutputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Linoutputs, _p_FullPhysics__Lidort_LinoutputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Brdf_Linsup_Outputs, _p_FullPhysics__Brdf_Linsup_OutputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Brdf_Sup_Outputs, _p_FullPhysics__Brdf_Sup_OutputsTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Linatmos, _p_FullPhysics__Lidort_LinatmosTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Fixed_Chapman, _p_FullPhysics__Lidort_Fixed_ChapmanTo_p_FullPhysics__Lidort_Structure, 0, 0},  {&_swigt__p_FullPhysics__Lidort_Modified_Chapman, _p_FullPhysics__Lidort_Modified_ChapmanTo_p_FullPhysics__Lidort_Structure, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Sup_Brdf[] = {  {&_swigt__p_FullPhysics__Lidort_Sup_Brdf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Sup_Inout[] = {  {&_swigt__p_FullPhysics__Lidort_Sup_Inout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Sup_Sleave[] = {  {&_swigt__p_FullPhysics__Lidort_Sup_Sleave, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Sup_Ss[] = {  {&_swigt__p_FullPhysics__Lidort_Sup_Ss, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Lidort_Wladjusted_Outputs[] = {  {&_swigt__p_FullPhysics__Lidort_Wladjusted_Outputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullPhysics__Sleave_Sup_Inputs[] = {  {&_swigt__p_FullPhysics__Sleave_Sup_Inputs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_bool_1_t[] = {  {&_swigt__p_blitz__ArrayT_bool_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_bool_2_t[] = {  {&_swigt__p_blitz__ArrayT_bool_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_bool_3_t[] = {  {&_swigt__p_blitz__ArrayT_bool_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_bool_4_t[] = {  {&_swigt__p_blitz__ArrayT_bool_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_double_1_t[] = {  {&_swigt__p_blitz__ArrayT_double_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_double_2_t[] = {  {&_swigt__p_blitz__ArrayT_double_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_double_3_t[] = {  {&_swigt__p_blitz__ArrayT_double_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_double_4_t[] = {  {&_swigt__p_blitz__ArrayT_double_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_double_5_t[] = {  {&_swigt__p_blitz__ArrayT_double_5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_int_1_t[] = {  {&_swigt__p_blitz__ArrayT_int_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_int_2_t[] = {  {&_swigt__p_blitz__ArrayT_int_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_int_3_t[] = {  {&_swigt__p_blitz__ArrayT_int_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blitz__ArrayT_int_4_t[] = {  {&_swigt__p_blitz__ArrayT_int_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t[] = {  {&_swigt__p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FullPhysics__Brdf_Input_Exception_Handling,
  _swigc__p_FullPhysics__Brdf_Linsup_Inputs,
  _swigc__p_FullPhysics__Brdf_Linsup_Outputs,
  _swigc__p_FullPhysics__Brdf_Output_Exception_Handling,
  _swigc__p_FullPhysics__Brdf_Sup_Inputs,
  _swigc__p_FullPhysics__Brdf_Sup_Outputs,
  _swigc__p_FullPhysics__Lidort_Exception_Handling,
  _swigc__p_FullPhysics__Lidort_Fixed_Boolean,
  _swigc__p_FullPhysics__Lidort_Fixed_Chapman,
  _swigc__p_FullPhysics__Lidort_Fixed_Control,
  _swigc__p_FullPhysics__Lidort_Fixed_Inputs,
  _swigc__p_FullPhysics__Lidort_Fixed_Lincontrol,
  _swigc__p_FullPhysics__Lidort_Fixed_Lininputs,
  _swigc__p_FullPhysics__Lidort_Fixed_Linoptical,
  _swigc__p_FullPhysics__Lidort_Fixed_Optical,
  _swigc__p_FullPhysics__Lidort_Fixed_Sunrays,
  _swigc__p_FullPhysics__Lidort_Fixed_Uservalues,
  _swigc__p_FullPhysics__Lidort_Fixed_Write,
  _swigc__p_FullPhysics__Lidort_Input_Exception_Handling,
  _swigc__p_FullPhysics__Lidort_Linatmos,
  _swigc__p_FullPhysics__Lidort_Linoutputs,
  _swigc__p_FullPhysics__Lidort_Linsup_Brdf,
  _swigc__p_FullPhysics__Lidort_Linsup_Inout,
  _swigc__p_FullPhysics__Lidort_Linsup_Sleave,
  _swigc__p_FullPhysics__Lidort_Linsup_Ss,
  _swigc__p_FullPhysics__Lidort_Linsup_Ss_Atmos,
  _swigc__p_FullPhysics__Lidort_Linsup_Ss_Surf,
  _swigc__p_FullPhysics__Lidort_Linsurf,
  _swigc__p_FullPhysics__Lidort_Main_Outputs,
  _swigc__p_FullPhysics__Lidort_Modified_Boolean,
  _swigc__p_FullPhysics__Lidort_Modified_Chapman,
  _swigc__p_FullPhysics__Lidort_Modified_Control,
  _swigc__p_FullPhysics__Lidort_Modified_Inputs,
  _swigc__p_FullPhysics__Lidort_Modified_Lincontrol,
  _swigc__p_FullPhysics__Lidort_Modified_Lininputs,
  _swigc__p_FullPhysics__Lidort_Modified_Optical,
  _swigc__p_FullPhysics__Lidort_Modified_Sunrays,
  _swigc__p_FullPhysics__Lidort_Modified_Uservalues,
  _swigc__p_FullPhysics__Lidort_Outputs,
  _swigc__p_FullPhysics__Lidort_Pars,
  _swigc__p_FullPhysics__Lidort_Structure,
  _swigc__p_FullPhysics__Lidort_Sup_Brdf,
  _swigc__p_FullPhysics__Lidort_Sup_Inout,
  _swigc__p_FullPhysics__Lidort_Sup_Sleave,
  _swigc__p_FullPhysics__Lidort_Sup_Ss,
  _swigc__p_FullPhysics__Lidort_Wladjusted_Outputs,
  _swigc__p_FullPhysics__Sleave_Sup_Inputs,
  _swigc__p_allocator_type,
  _swigc__p_blitz__ArrayT_bool_1_t,
  _swigc__p_blitz__ArrayT_bool_2_t,
  _swigc__p_blitz__ArrayT_bool_3_t,
  _swigc__p_blitz__ArrayT_bool_4_t,
  _swigc__p_blitz__ArrayT_double_1_t,
  _swigc__p_blitz__ArrayT_double_2_t,
  _swigc__p_blitz__ArrayT_double_3_t,
  _swigc__p_blitz__ArrayT_double_4_t,
  _swigc__p_blitz__ArrayT_double_5_t,
  _swigc__p_blitz__ArrayT_int_1_t,
  _swigc__p_blitz__ArrayT_int_2_t,
  _swigc__p_blitz__ArrayT_int_3_t,
  _swigc__p_blitz__ArrayT_int_4_t,
  _swigc__p_boost__shared_ptrT_FullPhysics__Lidort_Pars_t,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_difference_type,
  _swigc__p_fmtflags,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_pos_type,
  _swigc__p_seekdir,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_traits_type,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));
  
  FullPhysics::swig_type_map[FullPhysics::type_index(typeid(FullPhysics::Lidort_Pars))] =
  boost::shared_ptr<FullPhysics::SwigTypeMapperBase>(new FullPhysics::SwigTypeMapper< FullPhysics::Lidort_Pars >("boost::shared_ptr< FullPhysics::Lidort_Pars > *"));
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

