# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _lidort_driver.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lidort_driver')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lidort_driver')
    _lidort_driver = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lidort_driver', [dirname(__file__)])
        except ImportError:
            import _lidort_driver
            return _lidort_driver
        try:
            _mod = imp.load_module('_lidort_driver', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _lidort_driver = swig_import_helper()
    del swig_import_helper
else:
    import _lidort_driver
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _lidort_driver.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class SpurrBrdfDriver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def n_brdf_kernels(self):
        return self._v_n_brdf_kernels()


    @property
    def n_kernel_factor_wfs(self):
        return self._v_n_kernel_factor_wfs()


    @property
    def n_kernel_params_wfs(self):
        return self._v_n_kernel_params_wfs()


    @property
    def n_surface_wfs(self):
        return self._v_n_surface_wfs()


    @property
    def do_shadow_effect(self):
        return self._v_do_shadow_effect()

    __swig_destroy__ = _lidort_driver.delete_SpurrBrdfDriver
SpurrBrdfDriver.initialize_brdf_inputs = new_instancemethod(_lidort_driver.SpurrBrdfDriver_initialize_brdf_inputs, None, SpurrBrdfDriver)
SpurrBrdfDriver.setup_geometry = new_instancemethod(_lidort_driver.SpurrBrdfDriver_setup_geometry, None, SpurrBrdfDriver)
SpurrBrdfDriver.setup_brdf_inputs = new_instancemethod(_lidort_driver.SpurrBrdfDriver_setup_brdf_inputs, None, SpurrBrdfDriver)
SpurrBrdfDriver._v_n_brdf_kernels = new_instancemethod(_lidort_driver.SpurrBrdfDriver__v_n_brdf_kernels, None, SpurrBrdfDriver)
SpurrBrdfDriver._v_n_kernel_factor_wfs = new_instancemethod(_lidort_driver.SpurrBrdfDriver__v_n_kernel_factor_wfs, None, SpurrBrdfDriver)
SpurrBrdfDriver._v_n_kernel_params_wfs = new_instancemethod(_lidort_driver.SpurrBrdfDriver__v_n_kernel_params_wfs, None, SpurrBrdfDriver)
SpurrBrdfDriver._v_n_surface_wfs = new_instancemethod(_lidort_driver.SpurrBrdfDriver__v_n_surface_wfs, None, SpurrBrdfDriver)
SpurrBrdfDriver._v_do_shadow_effect = new_instancemethod(_lidort_driver.SpurrBrdfDriver__v_do_shadow_effect, None, SpurrBrdfDriver)
SpurrBrdfDriver_swigregister = _lidort_driver.SpurrBrdfDriver_swigregister
SpurrBrdfDriver_swigregister(SpurrBrdfDriver)

class SpurrRtDriver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def brdf_driver(self):
        return self._v_brdf_driver()

    __swig_destroy__ = _lidort_driver.delete_SpurrRtDriver
SpurrRtDriver.reflectance_calculate = new_instancemethod(_lidort_driver.SpurrRtDriver_reflectance_calculate, None, SpurrRtDriver)
SpurrRtDriver.reflectance_and_jacobian_calculate = new_instancemethod(_lidort_driver.SpurrRtDriver_reflectance_and_jacobian_calculate, None, SpurrRtDriver)
SpurrRtDriver._v_brdf_driver = new_instancemethod(_lidort_driver.SpurrRtDriver__v_brdf_driver, None, SpurrRtDriver)
SpurrRtDriver.setup_height_grid = new_instancemethod(_lidort_driver.SpurrRtDriver_setup_height_grid, None, SpurrRtDriver)
SpurrRtDriver.setup_geometry = new_instancemethod(_lidort_driver.SpurrRtDriver_setup_geometry, None, SpurrRtDriver)
SpurrRtDriver.setup_optical_inputs = new_instancemethod(_lidort_driver.SpurrRtDriver_setup_optical_inputs, None, SpurrRtDriver)
SpurrRtDriver.clear_linear_inputs = new_instancemethod(_lidort_driver.SpurrRtDriver_clear_linear_inputs, None, SpurrRtDriver)
SpurrRtDriver.setup_linear_inputs = new_instancemethod(_lidort_driver.SpurrRtDriver_setup_linear_inputs, None, SpurrRtDriver)
SpurrRtDriver.calculate_rt = new_instancemethod(_lidort_driver.SpurrRtDriver_calculate_rt, None, SpurrRtDriver)
SpurrRtDriver.get_intensity = new_instancemethod(_lidort_driver.SpurrRtDriver_get_intensity, None, SpurrRtDriver)
SpurrRtDriver.copy_jacobians = new_instancemethod(_lidort_driver.SpurrRtDriver_copy_jacobians, None, SpurrRtDriver)
SpurrRtDriver_swigregister = _lidort_driver.SpurrRtDriver_swigregister
SpurrRtDriver_swigregister(SpurrRtDriver)

class LidortBrdfDriver(SpurrBrdfDriver):
    """

    LIDORT specific BRDF driver implementation.

    C++ includes: lidort_driver.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nstream, nmoment):
        """

        LidortBrdfDriver::LidortBrdfDriver(int nstream, int nmoment)
        Initialize Lidort BRDF interface. 
        """
        _lidort_driver.LidortBrdfDriver_swiginit(self, _lidort_driver.new_LidortBrdfDriver(nstream, nmoment))
    __swig_destroy__ = _lidort_driver.delete_LidortBrdfDriver

    def _v_brdf_interface(self):
        """

        const boost::shared_ptr<Brdf_Lin_Sup_Masters> FullPhysics::LidortBrdfDriver::brdf_interface() const
        Interface to BRDF interface to allow changing configuration to values.

        """
        return _lidort_driver.LidortBrdfDriver__v_brdf_interface(self)


    @property
    def brdf_interface(self):
        return self._v_brdf_interface()


    @property
    def n_brdf_kernels(self):
        return self._v_n_brdf_kernels()


    @property
    def n_kernel_factor_wfs(self):
        return self._v_n_kernel_factor_wfs()


    @property
    def n_kernel_params_wfs(self):
        return self._v_n_kernel_params_wfs()


    @property
    def n_surface_wfs(self):
        return self._v_n_surface_wfs()


    @property
    def do_shadow_effect(self):
        return self._v_do_shadow_effect()


    def do_kparams_derivs(self, kernel_index):
        """

        bool LidortBrdfDriver::do_kparams_derivs(const int kernel_index) const

        """
        return _lidort_driver.LidortBrdfDriver_do_kparams_derivs(self, kernel_index)

LidortBrdfDriver._v_brdf_interface = new_instancemethod(_lidort_driver.LidortBrdfDriver__v_brdf_interface, None, LidortBrdfDriver)
LidortBrdfDriver.do_kparams_derivs = new_instancemethod(_lidort_driver.LidortBrdfDriver_do_kparams_derivs, None, LidortBrdfDriver)
LidortBrdfDriver_swigregister = _lidort_driver.LidortBrdfDriver_swigregister
LidortBrdfDriver_swigregister(LidortBrdfDriver)

class LidortRtDriver(SpurrRtDriver):
    """

    LIDORT specific Radiative transfer interface implementation.

    C++ includes: lidort_driver.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nstream, nmoment, do_multi_scatt_only, surface_type, zen, pure_nadir):
        """

        LidortRtDriver::LidortRtDriver(int nstream, int nmoment, bool do_multi_scatt_only, int surface_type,
        const blitz::Array< double, 1 > &zen, bool pure_nadir)

        """
        _lidort_driver.LidortRtDriver_swiginit(self, _lidort_driver.new_LidortRtDriver(nstream, nmoment, do_multi_scatt_only, surface_type, zen, pure_nadir))

    def _v_number_moment(self):
        """

        int LidortRtDriver::number_moment() const

        """
        return _lidort_driver.LidortRtDriver__v_number_moment(self)


    @property
    def number_moment(self):
        return self._v_number_moment()


    def _v_number_stream(self):
        """

        int LidortRtDriver::number_stream() const

        """
        return _lidort_driver.LidortRtDriver__v_number_stream(self)


    @property
    def number_stream(self):
        return self._v_number_stream()


    def setup_sphericity(self, zen):
        """

        void LidortRtDriver::setup_sphericity(double zen) const
        Set up/reset sphericity mode which may be affected by the current
        zenith viewing angle. 
        """
        return _lidort_driver.LidortRtDriver_setup_sphericity(self, zen)


    def set_plane_parallel(self):
        """

        void LidortRtDriver::set_plane_parallel() const
        Set plane parallel sphericity. 
        """
        return _lidort_driver.LidortRtDriver_set_plane_parallel(self)


    def set_pseudo_spherical(self):
        """

        void LidortRtDriver::set_pseudo_spherical() const
        Set pseudo spherical sphericity. 
        """
        return _lidort_driver.LidortRtDriver_set_pseudo_spherical(self)


    def set_plane_parallel_plus_ss_correction(self):
        """

        void LidortRtDriver::set_plane_parallel_plus_ss_correction() const
        Set plane parallel plus single scattering correction. 
        """
        return _lidort_driver.LidortRtDriver_set_plane_parallel_plus_ss_correction(self)


    def set_line_of_sight(self):
        """

        void LidortRtDriver::set_line_of_sight() const
        Set line of sight mode. 
        """
        return _lidort_driver.LidortRtDriver_set_line_of_sight(self)


    def _v_do_multi_scatt_only(self):
        """

        bool FullPhysics::LidortRtDriver::do_multi_scatt_only() const

        """
        return _lidort_driver.LidortRtDriver__v_do_multi_scatt_only(self)


    @property
    def do_multi_scatt_only(self):
        return self._v_do_multi_scatt_only()


    def _v_pure_nadir(self):
        """

        bool FullPhysics::LidortRtDriver::pure_nadir() const

        """
        return _lidort_driver.LidortRtDriver__v_pure_nadir(self)


    @property
    def pure_nadir(self):
        return self._v_pure_nadir()


    def _v_lidort_brdf_driver(self):
        """

        const boost::shared_ptr<LidortBrdfDriver> FullPhysics::LidortRtDriver::lidort_brdf_driver() const
        Access to BRDF driver. 
        """
        return _lidort_driver.LidortRtDriver__v_lidort_brdf_driver(self)


    @property
    def lidort_brdf_driver(self):
        return self._v_lidort_brdf_driver()


    def _v_brdf_interface(self):
        """

        const boost::shared_ptr<Brdf_Lin_Sup_Masters> FullPhysics::LidortRtDriver::brdf_interface() const

        """
        return _lidort_driver.LidortRtDriver__v_brdf_interface(self)


    @property
    def brdf_interface(self):
        return self._v_brdf_interface()


    def _v_lidort_interface(self):
        """

        const boost::shared_ptr<Lidort_Lps_Masters> FullPhysics::LidortRtDriver::lidort_interface() const
        Interface to LIDORT RT software inputs to allow changing LIDORT
        configuration to values other than default. 
        """
        return _lidort_driver.LidortRtDriver__v_lidort_interface(self)


    @property
    def lidort_interface(self):
        return self._v_lidort_interface()

    __swig_destroy__ = _lidort_driver.delete_LidortRtDriver
LidortRtDriver._v_number_moment = new_instancemethod(_lidort_driver.LidortRtDriver__v_number_moment, None, LidortRtDriver)
LidortRtDriver._v_number_stream = new_instancemethod(_lidort_driver.LidortRtDriver__v_number_stream, None, LidortRtDriver)
LidortRtDriver.setup_sphericity = new_instancemethod(_lidort_driver.LidortRtDriver_setup_sphericity, None, LidortRtDriver)
LidortRtDriver.set_plane_parallel = new_instancemethod(_lidort_driver.LidortRtDriver_set_plane_parallel, None, LidortRtDriver)
LidortRtDriver.set_pseudo_spherical = new_instancemethod(_lidort_driver.LidortRtDriver_set_pseudo_spherical, None, LidortRtDriver)
LidortRtDriver.set_plane_parallel_plus_ss_correction = new_instancemethod(_lidort_driver.LidortRtDriver_set_plane_parallel_plus_ss_correction, None, LidortRtDriver)
LidortRtDriver.set_line_of_sight = new_instancemethod(_lidort_driver.LidortRtDriver_set_line_of_sight, None, LidortRtDriver)
LidortRtDriver._v_do_multi_scatt_only = new_instancemethod(_lidort_driver.LidortRtDriver__v_do_multi_scatt_only, None, LidortRtDriver)
LidortRtDriver._v_pure_nadir = new_instancemethod(_lidort_driver.LidortRtDriver__v_pure_nadir, None, LidortRtDriver)
LidortRtDriver._v_lidort_brdf_driver = new_instancemethod(_lidort_driver.LidortRtDriver__v_lidort_brdf_driver, None, LidortRtDriver)
LidortRtDriver._v_brdf_interface = new_instancemethod(_lidort_driver.LidortRtDriver__v_brdf_interface, None, LidortRtDriver)
LidortRtDriver._v_lidort_interface = new_instancemethod(_lidort_driver.LidortRtDriver__v_lidort_interface, None, LidortRtDriver)
LidortRtDriver_swigregister = _lidort_driver.LidortRtDriver_swigregister
LidortRtDriver_swigregister(LidortRtDriver)



